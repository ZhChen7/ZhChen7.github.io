{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/04/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%89%8D%E7%9E%BB%E5%8D%9A%E6%96%87%E5%9C%B0%E5%9D%80/",
            "url": "http://example.com/2021/04/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%89%8D%E7%9E%BB%E5%8D%9A%E6%96%87%E5%9C%B0%E5%9D%80/",
            "title": "优质博客～收集",
            "date_published": "2021-04-01T09:07:39.000Z",
            "content_html": "<h1 id=\"博客收集\"><a class=\"markdownIt-Anchor\" href=\"#博客收集\">#</a> 博客收集</h1>\n<h2 id=\"长期更新的前端-weekly\"><a class=\"markdownIt-Anchor\" href=\"#长期更新的前端-weekly\">#</a> 长期更新的前端  <code>Weekly</code></h2>\n<ul>\n<li><a href=\"http://fex.baidu.com/\">百度 <code>FEX</code> </a></li>\n<li><a href=\"https://weekly.75team.com/\">奇舞周刊</a></li>\n<li><a href=\"https://www.infoq.cn/topic/33\"> <code>InfoQ</code>  前端专栏</a></li>\n<li><a href=\"https://github.com/dt-fe/weekly\">阿里  <code>DT-FE Weekly</code> </a></li>\n</ul>\n<h2 id=\"优秀技术官网\"><a class=\"markdownIt-Anchor\" href=\"#优秀技术官网\">#</a> 优秀技术官网</h2>\n<ul>\n<li><a href=\"http://www.aliued.com/?cat=14\">阿里 <code>UED</code> </a></li>\n<li><a href=\"https://github.com/DDFE/DDFE-blog\">滴滴  <code>FE BLOG</code> </a></li>\n<li><a href=\"https://techblog.toutiao.com/tag/%E5%89%8D%E7%AB%AF/\">头条前端</a></li>\n<li><a href=\"https://tech.youzan.com/tag/front-end/page/2/\">有赞前端</a></li>\n<li><a href=\"http://www.alloyteam.com/page/0/\">腾讯  <code>AlloyTeam</code> </a></li>\n<li><a href=\"https://github.com/Tnfe/TNFE-Weekly\">腾讯  <code>TNFE</code> </a></li>\n<li><a href=\"https://efe.baidu.com/\">百度  <code>EFE</code> </a></li>\n<li><a href=\"https://blog.rsuitejs.com/\">HYPERS 前端团队博客</a></li>\n<li><a href=\"https://www.infoq.cn/topic/33\">InfoQ 前端专栏</a></li>\n<li><a href=\"https://weekly.docschina.org/javascript\">印记中文周刊</a></li>\n<li><a href=\"https://github.com/ruanyf/weekly\">阮一峰老师 weekly</a></li>\n<li><a href=\"https://github.com/ProtoTeam/blog\">蚂蚁数据体验技术团队</a></li>\n<li><a href=\"https://github.com/Tnfe/TNFE-Weekly\">TNFE-Weekly</a></li>\n</ul>\n<h2 id=\"优秀知乎专栏\"><a class=\"markdownIt-Anchor\" href=\"#优秀知乎专栏\">#</a> 优秀知乎专栏</h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/ElemeFE\">饿了么</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/mm-fe\">阿里妈妈</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/aliyun\">阿里云</a></li>\n<li><a href=\"https://www.zhihu.com/org/mei-tuan-dian-ping-ji-shu-tuan-dui\">美团技术团队</a></li>\n<li><a href=\"https://www.zhihu.com/org/xian-yu-ji-zhu\">闲鱼技术</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/tmallf2e\">淘系前端团队</a></li>\n</ul>\n<h2 id=\"国外其他优秀站点\"><a class=\"markdownIt-Anchor\" href=\"#国外其他优秀站点\">#</a> 国外其他优秀站点</h2>\n<ul>\n<li><a href=\"https://medium.com/\">Medium</a></li>\n<li><a href=\"https://frontendfoc.us/\">Frontend Focus</a></li>\n<li><a href=\"https://javascriptweekly.com/\"> <code>JavaScript Weekly</code> </a></li>\n<li><a href=\"https://nodeweekly.com/\"> <code>Node.js Weekly</code> </a></li>\n</ul>\n<h2 id=\"列举长期更新的周刊源每周精选的主要来源\"><a class=\"markdownIt-Anchor\" href=\"#列举长期更新的周刊源每周精选的主要来源\">#</a> 列举长期更新的周刊源，每周精选的主要来源。</h2>\n<ul>\n<li>\n<p><a href=\"https://weekly.75team.com/\">奇舞周刊</a></p>\n</li>\n<li>\n<p><a href=\"https://www.infoq.cn/topic/33\">InfoQ 前端专栏</a></p>\n</li>\n<li>\n<p><a href=\"http://javascriptweekly.com/latest\">javascript weekly</a></p>\n</li>\n<li>\n<p><a href=\"https://nodeweekly.com/latest\">nodejs weekly</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/sorrycc/zaobao/issues?page=1&amp;q=is%3Aissue+is%3Aopen\">zaobao</a></p>\n</li>\n<li>\n<p><a href=\"https://indepth.dev/\">indepth</a> <a href=\"https://indepth.dev/search/?query=react&amp;tags=react\">indepth-react</a></p>\n</li>\n<li>\n<p><a href=\"https://www.smashingmagazine.com/\">smashing magazine</a></p>\n</li>\n<li>\n<p><a href=\"http://www.infoq.com/cn/news/2018/03/arch-weekly-54?utm_source=news_about_Front-end&amp;utm_medium=link&amp;utm_campaign=Front-end\">InfoQ 前端周刊</a></p>\n</li>\n<li>\n<p><a href=\"https://www.tuicool.com/mags\">推酷</a></p>\n</li>\n<li>\n<p><a href=\"https://medium.com/\">Medium</a></p>\n</li>\n<li>\n<p><a href=\"https://news.ycombinator.com/\">Hacker News</a></p>\n</li>\n<li>\n<p><a href=\"https://weekly.techbridge.cc/\">TechBridge Weekly 技術週刊</a></p>\n</li>\n<li>\n<p><a href=\"https://weekly.codetengu.com/\">CodeTengu Weekly 碼天狗週刊</a></p>\n</li>\n</ul>\n<p><a href=\"https://docschina.org/weekly/js/\">印记中文周刊</a></p>\n<ul>\n<li>\n<p><a href=\"https://www.smashingmagazine.com/articles/\">Smashing Articles</a></p>\n</li>\n<li>\n<p><a href=\"https://developers.google.com/web/updates/\">Google Updates</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/Tnfe/TNFE-Weekly\">TNFE-Weekly</a></p>\n</li>\n</ul>\n<h3 id=\"编程狂人\"><a class=\"markdownIt-Anchor\" href=\"#编程狂人\">#</a> 编程狂人</h3>\n<p><a href=\"https://www.tuicool.com/mags\">https://www.tuicool.com/mags</a></p>\n",
            "tags": [
                "博文"
            ]
        },
        {
            "id": "http://example.com/2021/03/01/React%E6%BA%90%E7%A0%81%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/",
            "url": "http://example.com/2021/03/01/React%E6%BA%90%E7%A0%81%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/",
            "title": "React源码准备工作",
            "date_published": "2021-03-01T03:02:51.000Z",
            "content_html": "<h1 id=\"react源码准备工作\"><a class=\"markdownIt-Anchor\" href=\"#react源码准备工作\">#</a> React 源码准备工作</h1>\n",
            "tags": [
                "React源码"
            ]
        },
        {
            "id": "http://example.com/2020/10/30/hexo-%E6%97%A0%E6%B3%95%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2020/10/30/hexo-%E6%97%A0%E6%B3%95%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/",
            "title": "hexo 无法搜索问题",
            "date_published": "2020-10-30T08:22:23.000Z",
            "content_html": "<h2 id=\"一般hexo博客无法搜索主要有2种以下情况\"><a class=\"markdownIt-Anchor\" href=\"#一般hexo博客无法搜索主要有2种以下情况\">#</a> 一般 <code>Hexo</code>  博客无法搜索主要有 <code>2</code>  种以下情况:</h2>\n<ul>\n<li><code>搜索插件没有配置好</code></li>\n<li><code>文章中包含特殊字符</code></li>\n</ul>\n<h2 id=\"一-搜索插件的配置\"><a class=\"markdownIt-Anchor\" href=\"#一-搜索插件的配置\">#</a> 一、搜索插件的配置</h2>\n<p>编辑  <code>站点配置文件</code> ，新增以下内容到任意位置：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">search<span class=\"token operator\">:</span>\n  path<span class=\"token operator\">:</span> search<span class=\"token punctuation\">.</span>xml\n  field<span class=\"token operator\">:</span> post\n  format<span class=\"token operator\">:</span> html\n  limit<span class=\"token operator\">:</span> <span class=\"token number\">10000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>编辑  <code>主题配置文件</code> ，启用本地搜索功能：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"># Local search\nlocal_search<span class=\"token operator\">:</span>\n  enable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>安装搜索插件</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> npm install hexo<span class=\"token operator\">-</span>generator<span class=\"token operator\">-</span>searchdb <span class=\"token operator\">--</span>save\n\n<span class=\"token operator\">+</span> hexo<span class=\"token operator\">-</span>generator<span class=\"token operator\">-</span>searchdb@<span class=\"token number\">1.0</span><span class=\"token number\">.8</span>\nadded <span class=\"token number\">119</span> packages <span class=\"token keyword\">in</span> <span class=\"token number\">8.327</span>s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"二-文章中特殊字符\"><a class=\"markdownIt-Anchor\" href=\"#二-文章中特殊字符\">#</a> 二、文章中特殊字符</h2>\n<h3 id=\"检查-searchmxl-的状态\"><a class=\"markdownIt-Anchor\" href=\"#检查-searchmxl-的状态\">#</a> 检查 search.mxl 的状态</h3>\n<p><img src=\"http://static.zxinc520.com/uPic/ggSet1.png\" alt=\"ggSet1\"></p>\n<h3 id=\"浏览器直接访问searchxml文件看看\"><a class=\"markdownIt-Anchor\" href=\"#浏览器直接访问searchxml文件看看\">#</a> 浏览器直接访问 <code>search.xml</code>  文件看看:</h3>\n<p><img src=\"http://static.zxinc520.com/uPic/8ZPJND.png\" alt=\"8ZPJND\"></p>\n",
            "tags": [
                "blog",
                "hexo"
            ]
        },
        {
            "id": "http://example.com/2020/10/23/redux/",
            "url": "http://example.com/2020/10/23/redux/",
            "title": "Redux 学习指南",
            "date_published": "2020-10-23T04:41:50.000Z",
            "content_html": "<h2 id=\"redux-学习指南\"><a class=\"markdownIt-Anchor\" href=\"#redux-学习指南\">#</a> Redux 学习指南</h2>\n<h3 id=\"设计思想\"><a class=\"markdownIt-Anchor\" href=\"#设计思想\">#</a> 设计思想</h3>\n<p>Redux 的设计思想很简单，就两句话。</p>\n<blockquote>\n<p>（1）Web 应用是一个状态机，视图与状态是一一对应的。</p>\n<p>（2）所有的状态，保存在一个对象里面。</p>\n</blockquote>\n<p>请务必记住这两句话，下面就是详细解释。</p>\n<h3 id=\"redux-三大核心\"><a class=\"markdownIt-Anchor\" href=\"#redux-三大核心\">#</a> Redux 三大核心</h3>\n<ol>\n<li>单一数据源</li>\n<li>State 是只读的</li>\n<li>使用纯函数来执行修改</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/uPic/uLpZu4.png\" alt=\"uLpZu4\"></p>\n<p><strong>store、components、actionCreaters、reducers 的关系即为：</strong></p>\n<ul>\n<li>首先有一个组件，组件要去获取 store 中的一些数据</li>\n<li>actionCreaters 通过 dispatch (action) 方法  让 store 知道 组件要获取数据</li>\n<li>store 在 reducer 查组件需要什么数据，reducer 返回组件应该拿到的数据</li>\n<li>store 获得数据后把数据 返给 组件</li>\n</ul>\n<h2 id=\"redux-核心\"><a class=\"markdownIt-Anchor\" href=\"#redux-核心\">#</a> Redux 核心</h2>\n<h3 id=\"state-状态\"><a class=\"markdownIt-Anchor\" href=\"#state-状态\">#</a> state 状态</h3>\n<ul>\n<li>DomainState：服务器返回的 State</li>\n<li>UI State ： 关于当前组件的 State</li>\n<li>App State：全局的 State</li>\n</ul>\n<p><code>Store</code>  对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 State。</p>\n<p>当前时刻的 State，可以通过 <code>store.getState()</code>  拿到。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>Redux 规定， 一个 State 对应一个 View。只要 State 相同，View 就相同。你知道 State，就知道 View 是什么样，反之亦然。</p>\n<h3 id=\"action-事件对象\"><a class=\"markdownIt-Anchor\" href=\"#action-事件对象\">#</a> Action 事件对象</h3>\n<ul>\n<li>本质就是一个 JS 对象</li>\n<li>必须包含 Type 属性</li>\n<li>只是描述了有事情要发生，并没有描述如何去更新 State</li>\n</ul>\n<p>State 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。</p>\n<p>Action 是一个对象。其中的 <code>type</code>  属性是必须的，表示 Action 的名称。其他属性可以自由设置，社区有一个<a href=\"https://github.com/acdlite/flux-standard-action\">规范</a>可以参考。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token string\">'Learn Redux'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>上面代码中，Action 的名称是 <code>ADD_TODO</code> ，它携带的信息是字符串 <code>Learn Redux</code> 。</p>\n<p>可以这样理解，Action 描述当前发生的事情。改变 State 的唯一办法，就是使用 Action。它会运送数据到 Store。</p>\n<h3 id=\"action-creator\"><a class=\"markdownIt-Anchor\" href=\"#action-creator\">#</a> Action Creator</h3>\n<p>View 要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 Action Creator。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_TODO</span> <span class=\"token operator\">=</span> <span class=\"token string\">'添加 TODO'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">,</span>\n    text\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Learn Redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>上面代码中， <code>addTodo</code>  函数就是一个 Action Creator。</p>\n<h3 id=\"store\"><a class=\"markdownIt-Anchor\" href=\"#store\">#</a> Store</h3>\n<ul>\n<li>用来把 action 喝 reducer 关联到一起</li>\n<li>通过 createStore 来构建 store</li>\n<li>通过 subscribe 来注册监听</li>\n<li>通过 dispatch 来发送 action</li>\n</ul>\n<p>Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。</p>\n<p>Redux 提供 <code>createStore</code>  这个函数，用来生成 Store。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</blockquote>\n<p>上面代码中， <code>createStore</code>  函数接受另一个函数作为参数，返回新生成的 Store 对象。</p>\n<h3 id=\"storedispatch\"><a class=\"markdownIt-Anchor\" href=\"#storedispatch\">#</a> store.dispatch()</h3>\n<p><code>store.dispatch()</code>  是 View 发出 Action 的唯一方法。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token string\">'Learn Redux'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>上面代码中， <code>store.dispatch</code>  接受一个 Action 对象作为参数，将它发送出去。</p>\n<p>结合 Action Creator，这段代码可以改写如下。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Learn Redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<h3 id=\"reducer\"><a class=\"markdownIt-Anchor\" href=\"#reducer\">#</a> Reducer</h3>\n<ul>\n<li>本质就是一个函数</li>\n<li>响应发送过来的 action</li>\n<li>函数接收两个参数，第一个是初始化 state，第二个是发送过来的 action</li>\n<li>必须要有 return 返回值</li>\n</ul>\n<p><strong>Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。</strong></p>\n<p>Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> new_state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>整个应用的初始状态，可以作为 State 的默认值。下面是一个实际的例子。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> defaultState <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> defaultState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'ADD'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> \n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>上面代码中， <code>reducer</code>  函数收到名为 <code>ADD</code>  的 Action 以后，就返回一个新的 State，作为加法的计算结果。其他运算的逻辑（比如减法），也可以根据 Action 的不同来实现。</p>\n<p>实际应用中，Reducer 函数不用像上面这样手动调用， <code>store.dispatch</code>  方法会触发 Reducer 的自动执行。为此，Store 需要知道 Reducer 函数，做法就是在生成 Store 的时候，将 Reducer 传入 <code>createStore</code>  方法。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</blockquote>\n<p>上面代码中， <code>createStore</code>  接受 Reducer 作为参数，生成一个新的 Store。以后每当 <code>store.dispatch</code>  发送过来一个新的 Action，就会自动调用 Reducer，得到新的 State。</p>\n<p>为什么这个函数叫做 Reducer 呢？因为它可以作为数组的 <code>reduce</code>  方法的参数。请看下面的例子，一系列 Action 对象按照顺序作为一个数组。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>上面代码中，数组 <code>actions</code>  表示依次有三个 Action，分别是加 <code>0</code> 、加 <code>1</code>  和加 <code>2</code> 。数组的 <code>reduce</code>  方法接受 Reducer 函数作为参数，就可以直接得到最终的状态 <code>3</code> 。</p>\n<h3 id=\"纯函数\"><a class=\"markdownIt-Anchor\" href=\"#纯函数\">#</a> 纯函数</h3>\n<p>由于 Reducer 是纯函数，就可以保证同样的 State，必定得到同样的 View。但也正因为这一点，Reducer 函数里面不能改变 State，必须返回一个全新的对象，请参考下面的写法。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// State 是一个对象</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> thingToChange <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 或者</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newState <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// State 是一个数组</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>最好把 State 对象设成只读。你没法改变它，要得到新的 State，唯一办法就是生成一个新对象。这样的好处是，任何时候，与某个 View 对应的 State 总是一个不变的对象。</p>\n<h3 id=\"storesubscribe\"><a class=\"markdownIt-Anchor\" href=\"#storesubscribe\">#</a> store.subscribe()</h3>\n<p>Store 允许使用 <code>store.subscribe</code>  方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>显然，只要把 View 的更新函数（对于 React 项目，就是组件的 <code>render</code>  方法或 <code>setState</code>  方法）放入 <code>listen</code> ，就会实现 View 的自动渲染。</p>\n<p><code>store.subscribe</code>  方法返回一个函数，调用这个函数就可以解除监听。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"工作流程\"><a class=\"markdownIt-Anchor\" href=\"#工作流程\">#</a> 工作流程</h2>\n<p>首先，用户发出 Action。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>然后，Store 自动调用 Reducer，并且传入两个参数：当前 State 和收到的 Action。 Reducer 会返回新的 State 。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> nextState <span class=\"token operator\">=</span> <span class=\"token function\">todoApp</span><span class=\"token punctuation\">(</span>previousState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>State 一旦有变化，Store 就会调用监听函数。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 设置监听函数</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</blockquote>\n<p><code>listener</code>  可以通过 <code>store.getState()</code>  得到当前状态。如果使用的是 React，这时可以触发重新渲染 View。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">listerner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> newState <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  component<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"store-的实现\"><a class=\"markdownIt-Anchor\" href=\"#store-的实现\">#</a> Store 的实现</h2>\n<p>上一节介绍了 Redux 涉及的基本概念，可以发现 Store 提供了三个方法。</p>\n<blockquote>\n<ul>\n<li>store.getState()</li>\n<li>store.dispatch()</li>\n<li>store.subscribe()</li>\n</ul>\n</blockquote>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> subscribe<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">,</span> getState <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</blockquote>\n<p><code>createStore</code>  方法还可以接受第二个参数，表示 State 的最初状态。这通常是服务器给出的。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>todoApp<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">STATE_FROM_SERVER</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面代码中， <code>window.STATE_FROM_SERVER</code>  就是整个应用的状态初始值。注意，如果提供了这个参数，它会覆盖 Reducer 函数的默认初始值。</p>\n<p>下面是 <code>createStore</code>  方法的一个简单实现，可以了解一下 Store 是怎么生成的。</p>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    state <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">listener</span> <span class=\"token operator\">=></span> <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subscribe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">listener</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    listeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      listeners <span class=\"token operator\">=</span> listeners<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l</span> <span class=\"token operator\">=></span> l <span class=\"token operator\">!==</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> getState<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">,</span> subscribe <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"redux-简单-demo\"><a class=\"markdownIt-Anchor\" href=\"#redux-简单-demo\">#</a> Redux 简单 demo</h2>\n<p><strong>src/action/index.js:</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_TODO</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ADD_TODO\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">,</span>\n    text<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>src/reducer/index.js</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> demoInitialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token string\">'默认值'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> demoInitialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>action\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> state\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    reducer\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>src/store/index.js：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 倒入我们自己创建的 reducer</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reducer <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../reducer\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 构建 store</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Home.jsx:</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//导入 store</span>\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">\"../store\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 导入 action</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> addTodo <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../action\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Home</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"11111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleClick<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Home 按钮<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Home<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/MYLa1c.png\" alt=\"MYLa1c\"></p>\n",
            "tags": [
                "React",
                "redux"
            ]
        },
        {
            "id": "http://example.com/2020/10/22/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%AE%9D%E5%A1%94%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2020/10/22/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%AE%9D%E5%A1%94%E4%BD%BF%E7%94%A8/",
            "title": "阿里云- 宝塔使用",
            "date_published": "2020-10-22T03:08:01.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2020/10/21/%E5%BF%85%E9%A1%BB%E8%A6%81%E4%BC%9A%E7%9A%84-50-%E4%B8%AA-React-%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://example.com/2020/10/21/%E5%BF%85%E9%A1%BB%E8%A6%81%E4%BC%9A%E7%9A%84-50-%E4%B8%AA-React-%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "必须要会的 50 个 React 面试题",
            "date_published": "2020-10-21T07:04:17.000Z",
            "content_html": "<h2 id=\"react-面试题-参考\"><a class=\"markdownIt-Anchor\" href=\"#react-面试题-参考\">#</a> <strong>React 面试题</strong>  –  <a href=\"https://juejin.im/post/6844903806715559943\">参考🔗</a></h2>\n<p>以下是面试官最有可能问到的 <strong>50 个 React 面试题和答案</strong>。为方便你学习，我对它们进行了分类：</p>\n<ul>\n<li>基本知识</li>\n<li>React 组件</li>\n<li>React Redux</li>\n<li>React 路由</li>\n</ul>\n<h2 id=\"基本知识\"><a class=\"markdownIt-Anchor\" href=\"#基本知识\">#</a> <strong>基本知识</strong></h2>\n<h3 id=\"1-区分-real-dom-和-virtual-dom\"><a class=\"markdownIt-Anchor\" href=\"#1-区分-real-dom-和-virtual-dom\">#</a> <strong>1. 区分 Real DOM 和 Virtual DOM</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>Real DOM</strong></th>\n<th><strong>Virtual DOM</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 更新缓慢。</td>\n<td>1. 更新更快。</td>\n</tr>\n<tr>\n<td>2. 可以直接更新 HTML。</td>\n<td>2. 无法直接更新 HTML。</td>\n</tr>\n<tr>\n<td>3. 如果元素更新，则创建新 DOM。</td>\n<td>3. 如果元素更新，则更新 JSX 。</td>\n</tr>\n<tr>\n<td>4. DOM 操作代价很高。</td>\n<td>4. DOM 操作非常简单。</td>\n</tr>\n<tr>\n<td>5. 消耗的内存较多。</td>\n<td>5. 很少的内存消耗。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-什么是-react\"><a class=\"markdownIt-Anchor\" href=\"#2-什么是-react\">#</a> <strong>2. 什么是 React？</strong></h3>\n<ul>\n<li>React 是 Facebook 在 2011 年开发的前端 JavaScript 库。</li>\n<li>它遵循基于组件的方法，有助于构建可重用的 UI 组件。</li>\n<li>它用于开发复杂和交互式的 Web 和移动 UI。</li>\n<li>尽管它仅在 2015 年开源，但有一个很大的支持社区。</li>\n</ul>\n<h3 id=\"3-react-有什么特点\"><a class=\"markdownIt-Anchor\" href=\"#3-react-有什么特点\">#</a> <strong>3. React 有什么特点？</strong></h3>\n<p>React 的主要功能如下：</p>\n<ol>\n<li>它使用 ** 虚拟 DOM ** 而不是真正的 DOM。</li>\n<li>它可以用<strong>服务器端渲染</strong>。</li>\n<li>它遵循<strong>单向数据流</strong>或数据绑定。</li>\n</ol>\n<h3 id=\"4-列出-react-的一些主要优点\"><a class=\"markdownIt-Anchor\" href=\"#4-列出-react-的一些主要优点\">#</a> <strong>4. 列出 React 的一些主要优点。</strong></h3>\n<p>React 的一些主要优点是：</p>\n<ol>\n<li>它提高了应用的性能</li>\n<li>可以方便地在客户端和服务器端使用</li>\n<li>由于 JSX，代码的可读性很好</li>\n<li>React 很容易与 Meteor，Angular 等其他框架集成</li>\n<li>使用 React，编写 UI 测试用例变得非常容易</li>\n</ol>\n<h3 id=\"5-react-有哪些限制\"><a class=\"markdownIt-Anchor\" href=\"#5-react-有哪些限制\">#</a> <strong>5. React 有哪些限制？</strong></h3>\n<p>React 的限制如下：</p>\n<ol>\n<li>React 只是一个库，而不是一个完整的框架</li>\n<li>它的库非常庞大，需要时间来理解</li>\n<li>新手程序员可能很难理解</li>\n<li>编码变得复杂，因为它使用内联模板和 JSX</li>\n</ol>\n<h3 id=\"6-什么是-jsx\"><a class=\"markdownIt-Anchor\" href=\"#6-什么是-jsx\">#</a> <strong>6. 什么是 JSX？</strong></h3>\n<p>JSX 是 J avaScript XML 的简写。是 React 使用的一种文件，它利用 JavaScript 的表现力和类似 HTML 的模板语法。这使得 HTML 文件非常容易理解。此文件能使应用非常可靠，并能够提高其性能。下面是 JSX 的一个例子：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">render()&#123;\n    return(\n        &lt;div&gt;\n            &lt;h1&gt; Hello World from Edureka!!&lt;&#x2F;h1&gt;\n        &lt;&#x2F;div&gt;\n    );\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"7-你了解-virtual-dom-吗解释一下它的工作原理\"><a class=\"markdownIt-Anchor\" href=\"#7-你了解-virtual-dom-吗解释一下它的工作原理\">#</a> <strong>7. 你了解 Virtual DOM 吗？解释一下它的工作原理。</strong></h3>\n<p>Virtual DOM 是一个轻量级的 JavaScript 对象，它最初只是 real DOM 的副本。它是一个节点树，它将元素、它们的属性和内容作为对象及其属性。 React 的渲染函数从 React 组件中创建一个节点树。然后它响应数据模型中的变化来更新该树，该变化是由用户或系统完成的各种动作引起的。</p>\n<p>Virtual DOM 工作过程有三个简单的步骤。</p>\n<ol>\n<li>\n<p>每当底层数据发生改变时，整个 UI 都将在 Virtual DOM 描述中重新渲染。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c3abe78a05?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Virtual DOM 1\"></p>\n</li>\n<li>\n<p>然后计算之前 DOM 表示与新表示的之间的差异。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c3b5c6759a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Virtual DOM 2\"></p>\n</li>\n<li>\n<p>完成计算后，将只用实际更改的内容更新 real DOM。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c3b5163360?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Virtual DOM 3\"></p>\n</li>\n</ol>\n<h3 id=\"8-为什么浏览器无法读取-jsx\"><a class=\"markdownIt-Anchor\" href=\"#8-为什么浏览器无法读取-jsx\">#</a> <strong>8. 为什么浏览器无法读取 JSX？</strong></h3>\n<p>浏览器只能处理 JavaScript 对象，而不能读取常规 JavaScript 对象中的 JSX。所以为了使浏览器能够读取 JSX，首先，需要用像 Babel 这样的 JSX 转换器将 JSX 文件转换为 JavaScript 对象，然后再将其传给浏览器。</p>\n<h3 id=\"9-与-es5-相比react-的-es6-语法有何不同\"><a class=\"markdownIt-Anchor\" href=\"#9-与-es5-相比react-的-es6-语法有何不同\">#</a> <strong>9. 与 ES5 相比，React 的 ES6 语法有何不同？</strong></h3>\n<p>以下语法是 ES5 与 ES6 中的区别：</p>\n<ol>\n<li>require 与 import</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES5\nvar React &#x3D; require(&#39;react&#39;);\n\n&#x2F;&#x2F; ES6\nimport React from &#39;react&#39;;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>export 与 exports</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES5\nmodule.exports &#x3D; Component;\n\n&#x2F;&#x2F; ES6\nexport default Component;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>component 和 function</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES5\nvar MyComponent &#x3D; React.createClass(&#123;\n    render: function() &#123;\n        return\n\t\t\t&lt;h3&gt;Hello Edureka!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;);\n\n&#x2F;&#x2F; ES6\nclass MyComponent extends React.Component &#123;\n    render() &#123;\n        return\n\t\t\t&lt;h3&gt;Hello Edureka!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>props</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES5\nvar App &#x3D; React.createClass(&#123;\n    propTypes: &#123; name: React.PropTypes.string &#125;,\n    render: function() &#123;\n        return\n\t\t\t&lt;h3&gt;Hello, &#123;this.props.name&#125;!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;);\n\n&#x2F;&#x2F; ES6\nclass App extends React.Component &#123;\n    render() &#123;\n        return\n\t\t\t&lt;h3&gt;Hello, &#123;this.props.name&#125;!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>state</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES5\nvar App &#x3D; React.createClass(&#123;\n    getInitialState: function() &#123;\n        return &#123; name: &#39;world&#39; &#125;;\n    &#125;,\n    render: function() &#123;\n        return\n\t        &lt;h3&gt;Hello, &#123;this.state.name&#125;!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;);\n\n&#x2F;&#x2F; ES6\nclass App extends React.Component &#123;\n    constructor() &#123;\n        super();\n        this.state &#x3D; &#123; name: &#39;world&#39; &#125;;\n    &#125;\n    render() &#123;\n        return\n\t        &lt;h3&gt;Hello, &#123;this.state.name&#125;!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"10-react-与-angular-有何不同\"><a class=\"markdownIt-Anchor\" href=\"#10-react-与-angular-有何不同\">#</a> <strong>10. React 与 Angular 有何不同？</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>主题</strong></th>\n<th><strong>React</strong></th>\n<th><strong>Angular</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>1. 体系结构</em></td>\n<td>只有 MVC 中的 View</td>\n<td>完整的 MVC</td>\n</tr>\n<tr>\n<td><em>2. 渲染</em></td>\n<td>可以在服务器端渲染</td>\n<td>客户端渲染</td>\n</tr>\n<tr>\n<td><em>3. DOM</em></td>\n<td>使用 virtual DOM</td>\n<td>使用 real DOM</td>\n</tr>\n<tr>\n<td><em>4. 数据绑定</em></td>\n<td>单向数据绑定</td>\n<td>双向数据绑定</td>\n</tr>\n<tr>\n<td><em>5. 调试</em></td>\n<td>编译时调试</td>\n<td>运行时调试</td>\n</tr>\n<tr>\n<td><em>6. 作者</em></td>\n<td>Facebook</td>\n<td>Google</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"react-组件\"><a class=\"markdownIt-Anchor\" href=\"#react-组件\">#</a> <strong>React 组件</strong></h2>\n<h3 id=\"11-你理解在-react-中一切都是组件这句话\"><a class=\"markdownIt-Anchor\" href=\"#11-你理解在-react-中一切都是组件这句话\">#</a> <strong>11. 你理解 “在 React 中，一切都是组件” 这句话。</strong></h3>\n<p>组件是 React 应用 UI 的构建块。这些组件将整个 UI 分成小的独立并可重用的部分。每个组件彼此独立，而不会影响 UI 的其余部分。</p>\n<h3 id=\"12-解释-react-中-render-的目的\"><a class=\"markdownIt-Anchor\" href=\"#12-解释-react-中-render-的目的\">#</a> <strong>12. 解释 React 中 render () 的目的。</strong></h3>\n<p>每个 React 组件强制要求必须有一个 <strong>render()</strong>。它返回一个 React 元素，是原生 DOM 组件的表示。如果需要渲染多个 HTML 元素，则必须将它们组合在一个封闭标记内，例如  <code>&lt;form&gt;</code> 、 <code>&lt;group&gt;</code> 、 <code>&lt;div&gt;</code>  等。此函数必须保持纯净，即必须每次调用时都返回相同的结果。</p>\n<h3 id=\"13-如何将两个或多个组件嵌入到一个组件中\"><a class=\"markdownIt-Anchor\" href=\"#13-如何将两个或多个组件嵌入到一个组件中\">#</a> <strong>13. 如何将两个或多个组件嵌入到一个组件中？</strong></h3>\n<p>可以通过以下方式将组件嵌入到一个组件中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class MyComponent extends React.Component&#123;\n    render()&#123;\n        return(\n\t\t\t&lt;div&gt;\n            \t&lt;h1&gt;Hello&lt;&#x2F;h1&gt;\n                &lt;Header&#x2F;&gt;\n            &lt;&#x2F;div&gt;\n        );\n    &#125;\n&#125;\nclass Header extends React.Component&#123;\n    render()&#123;\n        return\n\t\t\t&lt;h1&gt;Header Component&lt;&#x2F;h1&gt;\n   &#125;;\n&#125;\nReactDOM.render(\n    &lt;MyComponent&#x2F;&gt;, document.getElementById(&#39;content&#39;)\n);\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"14-什么是-props\"><a class=\"markdownIt-Anchor\" href=\"#14-什么是-props\">#</a> <strong>14. 什么是 Props?</strong></h3>\n<p>Props 是 React 中属性的简写。它们是只读组件，必须保持纯，即不可变。它们总是在整个应用中从父组件传递到子组件。子组件永远不能将 prop 送回父组件。这有助于维护单向数据流，通常用于呈现动态生成的数据。</p>\n<h3 id=\"15-react-中的状态是什么它是如何使用的\"><a class=\"markdownIt-Anchor\" href=\"#15-react-中的状态是什么它是如何使用的\">#</a> <strong>15. React 中的状态是什么？它是如何使用的？</strong></h3>\n<p>状态是 React 组件的核心，是数据的来源，必须尽可能简单。基本上状态是确定组件呈现和行为的对象。与 props 不同，它们是可变的，并创建动态和交互式组件。可以通过  <code>this.state()</code>  访问它们。</p>\n<h3 id=\"16-区分状态和-props\"><a class=\"markdownIt-Anchor\" href=\"#16-区分状态和-props\">#</a> <strong>16. 区分状态和 props</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>条件</strong></th>\n<th><strong>State</strong></th>\n<th><strong>Props</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 从父组件中接收初始值</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>2. 父组件可以改变值</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>3. 在组件中设置默认值</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>4. 在组件的内部变化</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>5. 设置子组件的初始值</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>6. 在子组件的内部更改</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"17-如何更新组件的状态\"><a class=\"markdownIt-Anchor\" href=\"#17-如何更新组件的状态\">#</a> <strong>17. 如何更新组件的状态？</strong></h3>\n<p>可以用  <code>this.setState()</code>  更新组件的状态。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class MyComponent extends React.Component &#123;\n    constructor() &#123;\n        super();\n        this.state &#x3D; &#123;\n            name: &#39;Maxx&#39;,\n            id: &#39;101&#39;\n        &#125;\n    &#125;\n    render()\n        &#123;\n            setTimeout(()&#x3D;&gt;&#123;this.setState(&#123;name:&#39;Jaeha&#39;, id:&#39;222&#39;&#125;)&#125;,2000)\n            return (\n\t\t\t\t&lt;div&gt;\n                \t&lt;h1&gt;Hello &#123;this.state.name&#125;&lt;&#x2F;h1&gt;\n\t\t\t\t\t&lt;h2&gt;Your Id is &#123;this.state.id&#125;&lt;&#x2F;h2&gt;\n                &lt;&#x2F;div&gt;\n            );\n        &#125;\n    &#125;\nReactDOM.render(\n    &lt;MyComponent&#x2F;&gt;, document.getElementById(&#39;content&#39;)\n);\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"18-react-中的箭头函数是什么怎么用\"><a class=\"markdownIt-Anchor\" href=\"#18-react-中的箭头函数是什么怎么用\">#</a> <strong>18. React 中的箭头函数是什么？怎么用？</strong></h3>\n<p>箭头函数（<strong>=&gt;</strong>）是用于编写函数表达式的简短语法。这些函数允许正确绑定组件的上下文，因为在 ES6 中默认下不能使用自动绑定。使用高阶函数时，箭头函数非常有用。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;General way\nrender() &#123;\n    return(\n        &lt;MyInput onChange &#x3D; &#123;this.handleChange.bind(this) &#125; &#x2F;&gt;\n    );\n&#125;\n&#x2F;&#x2F;With Arrow Function\nrender() &#123;\n    return(\n        &lt;MyInput onChange &#x3D; &#123; (e)&#x3D;&gt;this.handleOnChange(e) &#125; &#x2F;&gt;\n    );\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"19-区分有状态和无状态组件\"><a class=\"markdownIt-Anchor\" href=\"#19-区分有状态和无状态组件\">#</a> <strong>19. 区分有状态和无状态组件。</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>有状态组件</strong></th>\n<th><strong>无状态组件</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 在内存中存储有关组件状态变化的信息</td>\n<td>1. 计算组件的内部的状态</td>\n</tr>\n<tr>\n<td>2. 有权改变状态</td>\n<td>2. 无权改变状态</td>\n</tr>\n<tr>\n<td>3. 包含过去、现在和未来可能的状态变化情况</td>\n<td>3. 不包含过去，现在和未来可能发生的状态变化情况</td>\n</tr>\n<tr>\n<td>4. 接受无状态组件状态变化要求的通知，然后将 props 发送给他们。</td>\n<td>4. 从有状态组件接收 props 并将其视为回调函数。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"20-react-组件生命周期的阶段是什么\"><a class=\"markdownIt-Anchor\" href=\"#20-react-组件生命周期的阶段是什么\">#</a> <strong>20. React 组件生命周期的阶段是什么？</strong></h3>\n<p>React 组件的生命周期有三个不同的阶段：</p>\n<ol>\n<li>* 初始渲染阶段：* 这是组件即将开始其生命之旅并进入 DOM 的阶段。</li>\n<li>* 更新阶段：* 一旦组件被添加到 DOM，它只有在 prop 或状态发生变化时才可能更新和重新渲染。这些只发生在这个阶段。</li>\n<li>* 卸载阶段：* 这是组件生命周期的最后阶段，组件被销毁并从 DOM 中删除。</li>\n</ol>\n<h3 id=\"21-详细解释-react-组件的生命周期方法\"><a class=\"markdownIt-Anchor\" href=\"#21-详细解释-react-组件的生命周期方法\">#</a> <strong>21. 详细解释 React 组件的生命周期方法。</strong></h3>\n<p>一些最重要的生命周期方法是：</p>\n<ol>\n<li><strong>*componentWillMount***</strong>()** – 在渲染之前执行，在客户端和服务器端都会执行。</li>\n<li><strong>*componentDidMount***</strong>()** – 仅在第一次渲染后在客户端执行。</li>\n<li><strong>*componentWillReceiveProps***</strong>()** – 当从父类接收到 props 并且在调用另一个渲染器之前调用。</li>\n<li><strong>*shouldComponentUpdate***</strong>()** – 根据特定条件返回 true 或 false。如果你希望更新组件，请返回<strong> true</strong> 否则返回 **false**。默认情况下，它返回 false。</li>\n<li><strong>*componentWillUpdate***</strong>()** – 在 DOM 中进行渲染之前调用。</li>\n<li><strong>*componentDidUpdate***</strong>()** – 在渲染发生后立即调用。</li>\n<li><strong>*componentWillUnmount***</strong>()** – 从 DOM 卸载组件后调用。用于清理内存空间。</li>\n</ol>\n<h3 id=\"22-react-中的事件是什么\"><a class=\"markdownIt-Anchor\" href=\"#22-react-中的事件是什么\">#</a> <strong>22. React 中的事件是什么？</strong></h3>\n<p>在 React 中，事件是对鼠标悬停、鼠标单击、按键等特定操作的触发反应。处理这些事件类似于处理 DOM 元素中的事件。但是有一些语法差异，如：</p>\n<ol>\n<li>用驼峰命名法对事件命名而不是仅使用小写字母。</li>\n<li>事件作为函数而不是字符串传递。</li>\n</ol>\n<p>事件参数重包含一组特定于事件的属性。每个事件类型都包含自己的属性和行为，只能通过其事件处理程序访问。</p>\n<h3 id=\"23-如何在-react-中创建一个事件\"><a class=\"markdownIt-Anchor\" href=\"#23-如何在-react-中创建一个事件\">#</a> <strong>23. 如何在 React 中创建一个事件？</strong></h3>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Display extends React.Component(&#123;\n    show(evt) &#123;\n        &#x2F;&#x2F; code\n    &#125;,\n    render() &#123;\n        &#x2F;&#x2F; Render the div with an onClick prop (value is a function)\n        return (\n            &lt;div onClick&#x3D;&#123;this.show&#125;&gt;Click Me!&lt;&#x2F;div&gt;\n        );\n    &#125;\n&#125;);\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"24-react-中的合成事件是什么\"><a class=\"markdownIt-Anchor\" href=\"#24-react-中的合成事件是什么\">#</a> <strong>24. React 中的合成事件是什么？</strong></h3>\n<p>合成事件是围绕浏览器原生事件充当跨浏览器包装器的对象。它们将不同浏览器的行为合并为一个 API。这样做是为了确保事件在不同浏览器中显示一致的属性。</p>\n<h3 id=\"25-你对-react-的-refs-有什么了解\"><a class=\"markdownIt-Anchor\" href=\"#25-你对-react-的-refs-有什么了解\">#</a> <strong>25. 你对 React 的 refs 有什么了解？</strong></h3>\n<p>Refs 是 React 中引用的简写。它是一个有助于存储对特定的 React 元素或组件的引用的属性，它将由组件渲染配置函数返回。用于对 render () 返回的特定元素或组件的引用。当需要进行 DOM 测量或向组件添加方法时，它们会派上用场。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class ReferenceDemo extends React.Component&#123;\n     display() &#123;\n         const name &#x3D; this.inputDemo.value;\n         document.getElementById(&#39;disp&#39;).innerHTML &#x3D; name;\n     &#125;\nrender() &#123;\n    return(\n          &lt;div&gt;\n            Name: &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123;input &#x3D;&gt; this.inputDemo &#x3D; input&#125; &#x2F;&gt;\n            &lt;button name&#x3D;&quot;Click&quot; onClick&#x3D;&#123;this.display&#125;&gt;Click&lt;&#x2F;button&gt;\n            &lt;h2&gt;Hello &lt;span id&#x3D;&quot;disp&quot;&gt;&lt;&#x2F;span&gt; !!!&lt;&#x2F;h2&gt;\n          &lt;&#x2F;div&gt;\n    );\n   &#125;\n &#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"26-列出一些应该使用-refs-的情况\"><a class=\"markdownIt-Anchor\" href=\"#26-列出一些应该使用-refs-的情况\">#</a> <strong>26. 列出一些应该使用 Refs 的情况。</strong></h3>\n<p>以下是应该使用 refs 的情况：</p>\n<ul>\n<li>需要管理焦点、选择文本或媒体播放时</li>\n<li>触发式动画</li>\n<li>与第三方 DOM 库集成</li>\n</ul>\n<h3 id=\"27-如何模块化-react-中的代码\"><a class=\"markdownIt-Anchor\" href=\"#27-如何模块化-react-中的代码\">#</a> <strong>27. 如何模块化 React 中的代码？</strong></h3>\n<p>可以使用 export 和 import 属性来模块化代码。它们有助于在不同的文件中单独编写组件。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;ChildComponent.jsx\nexport default class ChildComponent extends React.Component &#123;\n    render() &#123;\n        return(\n              &lt;div&gt;\n              \t&lt;h1&gt;This is a child component&lt;&#x2F;h1&gt;\n              &lt;&#x2F;div&gt;\n        );\n    &#125;\n&#125;\n\n&#x2F;&#x2F;ParentComponent.jsx\nimport ChildComponent from &#39;.&#x2F;childcomponent.js&#39;;\nclass ParentComponent extends React.Component &#123;\n    render() &#123;\n        return(\n             &lt;div&gt;\n                &lt;App &#x2F;&gt;\n             &lt;&#x2F;div&gt;\n        );\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"28-如何在-react-中创建表单\"><a class=\"markdownIt-Anchor\" href=\"#28-如何在-react-中创建表单\">#</a> <strong>28. 如何在 React 中创建表单</strong></h3>\n<p>React 表单类似于 HTML 表单。但是在 React 中，状态包含在组件的 state 属性中，并且只能通过  <code>setState()</code>  更新。因此元素不能直接更新它们的状态，它们的提交是由 JavaScript 函数处理的。此函数可以完全访问用户输入到表单的数据。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">handleSubmit(event) &#123;\n    alert(&#39;A name was submitted: &#39; + this.state.value);\n    event.preventDefault();\n&#125;\n\nrender() &#123;\n    return (\n        &lt;form onSubmit&#x3D;&#123;this.handleSubmit&#125;&gt;\n            &lt;label&gt;\n                Name:\n                &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;this.state.value&#125; onChange&#x3D;&#123;this.handleSubmit&#125; &#x2F;&gt;\n            &lt;&#x2F;label&gt;\n            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot; &#x2F;&gt;\n        &lt;&#x2F;form&gt;\n    );\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"29-你对受控组件和非受控组件了解多少\"><a class=\"markdownIt-Anchor\" href=\"#29-你对受控组件和非受控组件了解多少\">#</a> <strong>29. 你对受控组件和非受控组件了解多少？</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>受控组件</strong></th>\n<th><strong>非受控组件</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 没有维持自己的状态</td>\n<td>1. 保持着自己的状态</td>\n</tr>\n<tr>\n<td>2. 数据由父组件控制</td>\n<td>2. 数据由 DOM 控制</td>\n</tr>\n<tr>\n<td>3. 通过 props 获取当前值，然后通过回调通知更改</td>\n<td>3. Refs 用于获取其当前值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"30-什么是高阶组件hoc\"><a class=\"markdownIt-Anchor\" href=\"#30-什么是高阶组件hoc\">#</a> <strong>30. 什么是高阶组件（HOC）？</strong></h3>\n<p>高阶组件是重用组件逻辑的高级方法，是一种源于 React 的组件模式。 HOC 是自定义组件，在它之内包含另一个组件。它们可以接受子组件提供的任何动态，但不会修改或复制其输入组件中的任何行为。你可以认为 HOC 是 “纯（Pure）” 组件。</p>\n<h3 id=\"31-你能用-hoc-做什么\"><a class=\"markdownIt-Anchor\" href=\"#31-你能用-hoc-做什么\">#</a> <strong>31. 你能用 HOC 做什么？</strong></h3>\n<p>HOC 可用于许多任务，例如：</p>\n<ul>\n<li>代码重用，逻辑和引导抽象</li>\n<li>渲染劫持</li>\n<li>状态抽象和控制</li>\n<li>Props 控制</li>\n</ul>\n<h3 id=\"32-什么是纯组件\"><a class=\"markdownIt-Anchor\" href=\"#32-什么是纯组件\">#</a> <strong>32. 什么是纯组件？</strong></h3>\n<p><em>纯（Pure）</em> 组件是可以编写的最简单、最快的组件。它们可以替换任何只有 <strong>render()</strong> 的组件。这些组件增强了代码的简单性和应用的性能。</p>\n<h3 id=\"33-react-中-key-的重要性是什么\"><a class=\"markdownIt-Anchor\" href=\"#33-react-中-key-的重要性是什么\">#</a> <strong>33. React 中 key 的重要性是什么？</strong></h3>\n<p>key 用于识别唯一的 Virtual DOM 元素及其驱动 UI 的相应数据。它们通过回收 DOM 中当前所有的元素来帮助 React 优化渲染。这些 key 必须是唯一的数字或字符串，React 只是重新排序元素而不是重新渲染它们。这可以提高应用程序的性能。</p>\n<h2 id=\"react-redux\"><a class=\"markdownIt-Anchor\" href=\"#react-redux\">#</a> <strong>React Redux</strong></h2>\n<h3 id=\"34-mvc-框架的主要问题是什么\"><a class=\"markdownIt-Anchor\" href=\"#34-mvc-框架的主要问题是什么\">#</a> <strong>34. MVC 框架的主要问题是什么？</strong></h3>\n<p>以下是 MVC 框架的一些主要问题：</p>\n<ul>\n<li>对 DOM 操作的代价非常高</li>\n<li>程序运行缓慢且效率低下</li>\n<li>内存浪费严重</li>\n<li>由于循环依赖性，组件模型需要围绕 models 和 views 进行创建</li>\n</ul>\n<h3 id=\"35-解释一下-flux\"><a class=\"markdownIt-Anchor\" href=\"#35-解释一下-flux\">#</a> <strong>35. 解释一下 Flux</strong></h3>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c4d3813a3e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"flux\"></p>\n<p>Flux 是一种强制单向数据流的架构模式。它控制派生数据，并使用具有所有数据权限的中心 store 实现多个组件之间的通信。整个应用中的数据更新必须只能在此处进行。 Flux 为应用提供稳定性并减少运行时的错误。</p>\n<h3 id=\"36-什么是-redux\"><a class=\"markdownIt-Anchor\" href=\"#36-什么是-redux\">#</a> <strong>36. 什么是 Redux？</strong></h3>\n<p>Redux 是当今最热门的前端开发库之一。它是 JavaScript 程序的可预测状态容器，用于整个应用的状态管理。使用 Redux 开发的应用易于测试，可以在不同环境中运行，并显示一致的行为。</p>\n<h3 id=\"37-redux-遵循的三个原则是什么\"><a class=\"markdownIt-Anchor\" href=\"#37-redux-遵循的三个原则是什么\">#</a> <strong>37. Redux 遵循的三个原则是什么？</strong></h3>\n<ol>\n<li>**<em> 单一事实来源：</em>** 整个应用的状态存储在单个 store 中的对象 / 状态树里。单一状态树可以更容易地跟踪随时间的变化，并调试或检查应用程序。</li>\n<li>**<em> 状态是只读的：</em>** 改变状态的唯一方法是去触发一个动作。动作是描述变化的普通 JS 对象。就像 state 是数据的最小表示一样，该操作是对数据更改的最小表示。</li>\n<li>**<em> 使用纯函数进行更改：</em>** 为了指定状态树如何通过操作进行转换，你需要纯函数。纯函数是那些返回值仅取决于其参数值的函数。</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c501879053?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Store\"></p>\n<h3 id=\"38-你对单一事实来源有什么理解\"><a class=\"markdownIt-Anchor\" href=\"#38-你对单一事实来源有什么理解\">#</a> <strong>38. 你对 “单一事实来源” 有什么理解？</strong></h3>\n<p>Redux 使用 “Store” 将程序的整个状态存储在同一个地方。因此所有组件的状态都存储在 Store 中，并且它们从 Store 本身接收更新。单一状态树可以更容易地跟踪随时间的变化，并调试或检查程序。</p>\n<h3 id=\"39-列出-redux-的组件\"><a class=\"markdownIt-Anchor\" href=\"#39-列出-redux-的组件\">#</a> <strong>39. 列出 Redux 的组件。</strong></h3>\n<p>Redux 由以下组件组成：</p>\n<ol>\n<li><strong>Action</strong> – 这是一个用来描述发生了什么事情的对象。</li>\n<li><strong>Reducer</strong> – 这是一个确定状态将如何变化的地方。</li>\n<li><strong>Store</strong> – 整个程序的状态 / 对象树保存在 Store 中。</li>\n<li><strong>View</strong> – 只显示 Store 提供的数据。</li>\n</ol>\n<h3 id=\"40-数据如何通过-redux-流动\"><a class=\"markdownIt-Anchor\" href=\"#40-数据如何通过-redux-流动\">#</a> <strong>40. 数据如何通过 Redux 流动？</strong></h3>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c4958809d0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Data Flow in Redux\"></p>\n<h3 id=\"41-如何在-redux-中定义-action\"><a class=\"markdownIt-Anchor\" href=\"#41-如何在-redux-中定义-action\">#</a> <strong>41. 如何在 Redux 中定义 Action？</strong></h3>\n<p>React 中的 Action 必须具有 type 属性，该属性指示正在执行的 ACTION 的类型。必须将它们定义为字符串常量，并且还可以向其添加更多的属性。在 Redux 中，action 被名为 Action Creators 的函数所创建。以下是 Action 和 Action Creator 的示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function addTodo(text) &#123;\n       return &#123;\n                type: ADD_TODO,\n                 text\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"42-解释-reducer-的作用\"><a class=\"markdownIt-Anchor\" href=\"#42-解释-reducer-的作用\">#</a> <strong>42. 解释 Reducer 的作用。</strong></h3>\n<p>Reducers 是纯函数，它规定应用程序的状态怎样因响应 ACTION 而改变。Reducers 通过接受先前的状态和 action 来工作，然后它返回一个新的状态。它根据操作的类型确定需要执行哪种更新，然后返回新的值。如果不需要完成任务，它会返回原来的状态。</p>\n<h3 id=\"43-store-在-redux-中的意义是什么\"><a class=\"markdownIt-Anchor\" href=\"#43-store-在-redux-中的意义是什么\">#</a> <strong>43. Store 在 Redux 中的意义是什么？</strong></h3>\n<p>Store 是一个 JavaScript 对象，它可以保存程序的状态，并提供一些方法来访问状态、调度操作和注册侦听器。应用程序的整个状态 / 对象树保存在单一存储中。因此，Redux 非常简单且是可预测的。我们可以将中间件传递到 store 来处理数据，并记录改变存储状态的各种操作。所有操作都通过 reducer 返回一个新状态。</p>\n<h3 id=\"44-redux-与-flux-有何不同\"><a class=\"markdownIt-Anchor\" href=\"#44-redux-与-flux-有何不同\">#</a> <strong>44. Redux 与 Flux 有何不同？</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>Flux</strong></th>\n<th><strong>Redux</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. Store 包含状态和更改逻辑</td>\n<td>1. Store 和更改逻辑是分开的</td>\n</tr>\n<tr>\n<td>2. 有多个 Store</td>\n<td>2. 只有一个 Store</td>\n</tr>\n<tr>\n<td>3. 所有 Store 都互不影响且是平级的</td>\n<td>3. 带有分层 reducer 的单一 Store</td>\n</tr>\n<tr>\n<td>4. 有单一调度器</td>\n<td>4. 没有调度器的概念</td>\n</tr>\n<tr>\n<td>5. React 组件订阅 store</td>\n<td>5. 容器组件是有联系的</td>\n</tr>\n<tr>\n<td>6. 状态是可变的</td>\n<td>6. 状态是不可改变的</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"45-redux-有哪些优点\"><a class=\"markdownIt-Anchor\" href=\"#45-redux-有哪些优点\">#</a> <strong>45. Redux 有哪些优点？</strong></h3>\n<p>Redux 的优点如下：</p>\n<ul>\n<li><strong>结果的可预测性 -</strong> 由于总是存在一个真实来源，即 store ，因此不存在如何将当前状态与动作和应用的其他部分同步的问题。</li>\n<li><strong>可维护性 -</strong> 代码变得更容易维护，具有可预测的结果和严格的结构。</li>\n<li><strong>服务器端渲染 -</strong> 你只需将服务器上创建的 store 传到客户端即可。这对初始渲染非常有用，并且可以优化应用性能，从而提供更好的用户体验。</li>\n<li><strong>开发人员工具 -</strong> 从操作到状态更改，开发人员可以实时跟踪应用中发生的所有事情。</li>\n<li><strong>社区和生态系统 -</strong> Redux 背后有一个巨大的社区，这使得它更加迷人。一个由才华横溢的人组成的大型社区为库的改进做出了贡献，并开发了各种应用。</li>\n<li><strong>易于测试 -</strong> Redux 的代码主要是小巧、纯粹和独立的功能。这使代码可测试且独立。</li>\n<li><strong>组织 -</strong> Redux 准确地说明了代码的组织方式，这使得代码在团队使用时更加一致和简单。</li>\n</ul>\n<h2 id=\"react-路由\"><a class=\"markdownIt-Anchor\" href=\"#react-路由\">#</a> <strong>React 路由</strong></h2>\n<h3 id=\"46-什么是-react-路由\"><a class=\"markdownIt-Anchor\" href=\"#46-什么是-react-路由\">#</a> <strong>46. 什么是 React 路由？</strong></h3>\n<p>React 路由是一个构建在 React 之上的强大的路由库，它有助于向应用程序添加新的屏幕和流。这使 URL 与网页上显示的数据保持同步。它负责维护标准化的结构和行为，并用于开发单页 Web 应用。 React 路由有一个简单的 API。</p>\n<h3 id=\"47-为什么-react-router-v4-中使用-switch-关键字\"><a class=\"markdownIt-Anchor\" href=\"#47-为什么-react-router-v4-中使用-switch-关键字\">#</a> <strong>47. 为什么 React Router v4 中使用 switch 关键字 ？</strong></h3>\n<p>虽然 <strong> <code>&lt;div&gt;</code>  ** 用于封装 Router 中的多个路由，当你想要仅显示要在多个定义的路线中呈现的单个路线时，可以使用 “switch” 关键字。使用时，</strong> <code>&lt;switch&gt;</code> ** 标记会按顺序将已定义的 URL 与已定义的路由进行匹配。找到第一个匹配项后，它将渲染指定的路径。从而绕过其它路线。</p>\n<h3 id=\"48-为什么需要-react-中的路由\"><a class=\"markdownIt-Anchor\" href=\"#48-为什么需要-react-中的路由\">#</a> <strong>48. 为什么需要 React 中的路由？</strong></h3>\n<p>Router 用于定义多个路由，当用户定义特定的 URL 时，如果此 URL 与 Router 内定义的任何 “路由” 的路径匹配，则用户将重定向到该特定路由。所以基本上我们需要在自己的应用中添加一个 Router 库，允许创建多个路由，每个路由都会向我们提供一个独特的视图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;switch&gt;\n    &lt;route exact path&#x3D;’&#x2F;’ component&#x3D;&#123;Home&#125;&#x2F;&gt;\n    &lt;route path&#x3D;’&#x2F;posts&#x2F;:id’ component&#x3D;&#123;Newpost&#125;&#x2F;&gt;\n    &lt;route path&#x3D;’&#x2F;posts’   component&#x3D;&#123;Post&#125;&#x2F;&gt;\n&lt;&#x2F;switch&gt;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"49-列出-react-router-的优点\"><a class=\"markdownIt-Anchor\" href=\"#49-列出-react-router-的优点\">#</a> <strong>49. 列出 React Router 的优点。</strong></h3>\n<p>几个优点是：</p>\n<ol>\n<li>就像 React 基于组件一样，在 React Router v4 中，API 是 <em>‘All About Components’</em>。可以将 Router 可视化为单个根组件（<strong> <code>&lt;BrowserRouter&gt;</code> </strong>），其中我们将特定的子路由（<strong> <code>&lt;route&gt;</code> </strong>）包起来。</li>\n<li>无需手动设置历史值：在 React Router v4 中，我们要做的就是将路由包装在 <strong> <code>&lt;BrowserRouter&gt;</code> </strong> 组件中。</li>\n<li>包是分开的：共有三个包，分别用于 Web、Native 和 Core。这使我们应用更加紧凑。基于类似的编码风格很容易进行切换。</li>\n</ol>\n<h3 id=\"50-react-router-与常规路由有何不同\"><a class=\"markdownIt-Anchor\" href=\"#50-react-router-与常规路由有何不同\">#</a> <strong>50. React Router 与常规路由有何不同？</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>主题</strong></th>\n<th><strong>常规路由</strong></th>\n<th><strong>React 路由</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>参与的页面</strong></td>\n<td>每个视图对应一个新文件</td>\n<td>只涉及单个 HTML 页面</td>\n</tr>\n<tr>\n<td><strong>URL 更改</strong></td>\n<td>HTTP 请求被发送到服务器并且接收相应的 HTML 页面</td>\n<td>仅更改历史记录属性</td>\n</tr>\n<tr>\n<td><strong>体验</strong></td>\n<td>用户实际在每个视图的不同页面切换</td>\n<td>用户认为自己正在不同的页面间切换</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "React基础面试题-50"
            ]
        },
        {
            "id": "http://example.com/2020/10/19/Hook/",
            "url": "http://example.com/2020/10/19/Hook/",
            "title": "React Hooks",
            "date_published": "2020-10-19T12:07:07.000Z",
            "content_html": "<p>如果你刚开始接触 Hook，那么可能需要先查阅 <a href=\"https://reactjs.bootcss.com/docs/hooks-overview.html\">Hook 概览</a>。你也可以在 <a href=\"https://reactjs.bootcss.com/docs/hooks-faq.html\">Hooks FAQ</a> 章节中获取有用的信息。</p>\n<ul>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#basic-hooks\">基础 Hook</a>\n<ul>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#usestate\"> <code>useState</code> </a></li>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#useeffect\"> <code>useEffect</code> </a></li>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#usecontext\"> <code>useContext</code> </a></li>\n</ul>\n</li>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#additional-hooks\">额外的 Hook</a>\n<ul>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#usereducer\"> <code>useReducer</code> </a></li>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#usecallback\"> <code>useCallback</code> </a></li>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#usememo\"> <code>useMemo</code> </a></li>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#useref\"> <code>useRef</code> </a></li>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#useimperativehandle\"> <code>useImperativeHandle</code> </a></li>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#uselayouteffect\"> <code>useLayoutEffect</code> </a></li>\n<li><a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#usedebugvalue\"> <code>useDebugValue</code> </a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"一-什么是-hooks\"><a class=\"markdownIt-Anchor\" href=\"#一-什么是-hooks\">#</a> 一、什么是 Hooks</h2>\n<ul>\n<li>\n<p>React 一直都提倡使用 **** 函数组件 **<strong>，但是有时候需要使用 state 或者其他一些功能时，只能使用</strong> ** 类组件 ****，因为函数组件没有实例，没有生命周期函数，只有类组件才有</p>\n</li>\n<li>\n<p>Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</p>\n</li>\n<li>\n<p>如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以直接在现有的函数组件中使用 Hooks</p>\n</li>\n<li>\n<p>凡是 use 开头的 React API 都是 Hooks</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 声明一个新的叫做 “count” 的 state 变量</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>You clicked <span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span> times<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Click me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"二-hooks-解决的问题\"><a class=\"markdownIt-Anchor\" href=\"#二-hooks-解决的问题\">#</a> 二、Hooks 解决的问题</h2>\n<h3 id=\"1-类组件的不足\"><a class=\"markdownIt-Anchor\" href=\"#1-类组件的不足\">#</a> 1. 类组件的不足</h3>\n<ul>\n<li>\n<p><strong>状态逻辑难复用：</strong> 在组件之间复用状态逻辑很难，可能要用到 <strong>render props</strong> （<strong>渲染属性</strong>）或者 <strong>HOC</strong>（<strong>高阶组件</strong>），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是 div 元素），<strong>导致层级冗余</strong></p>\n</li>\n<li>\n<p>趋向复杂难以维护：</p>\n<ul>\n<li>在生命周期函数中混杂不相干的逻辑（如：在  <code>componentDidMount</code>  中注册事件以及其他的逻辑，在  <code>componentWillUnmount</code>  中卸载事件，这样分散不集中的写法，很容易写出 bug ）</li>\n<li>类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件</li>\n</ul>\n</li>\n<li>\n<p>this 指向问题</p>\n<p>：父组件给子组件传递函数时，必须绑定 this</p>\n<ul>\n<li>react 中的组件四种绑定 this 方法的区别</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n  handleClick2<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      num<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">\" react study\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick1</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">handleClick1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      num<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function-variable function\">handleClick3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      num<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Ann<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick2<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>btn1<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick1</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>btn2<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>btn3<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick3<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>btn4<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>前提：子组件内部做了性能优化，如（<strong>React.PureComponent</strong>）</p>\n<ul>\n<li>第一种是<strong>在构造函数中绑定 this</strong>：那么每次父组件刷新的时候，如果传递给子组件其他的 props 值不变，那么子组件就不会刷新；</li>\n<li>第二种是<strong>在 render () 函数里面绑定 this</strong>：因为 <strong>bind 函数会返回一个新的函数</strong>，所以每次父组件刷新时，都会重新生成一个函数，即使父组件传递给子组件其他的 props 值不变，子组件每次都会刷新；</li>\n<li>第三种是<strong>使用箭头函数</strong>：父组件刷新的时候，即使两个箭头函数的函数体是一样的，都会生成一个新的箭头函数，所以子组件每次都会刷新；</li>\n<li>第四种是<strong>使用类的静态属性：原理和第一种方法差不多，比第一种更简洁</strong></li>\n</ul>\n<p>综上所述，如果不注意的话，很容易写成第三种写法，导致性能上有所损耗。</p>\n<h3 id=\"2-hooks-优势\"><a class=\"markdownIt-Anchor\" href=\"#2-hooks-优势\">#</a> 2. Hooks 优势</h3>\n<ul>\n<li>能优化类组件的三大问题</li>\n<li>能在无需修改组件结构的情况下复用状态逻辑（自定义 Hooks ）</li>\n<li>能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）</li>\n<li><strong>副作用的关注点分离</strong>：<strong>副作用指那些没有发生在数据向视图转换过程中的逻辑，如  <code>ajax</code>  请求、访问原生 <code>dom</code>  元素、本地持久化缓存、绑定 / 解绑事件、添加订阅、设置定时器、记录日志等</strong>。以往这些副作用都是写在类组件生命周期函数中的。而  <code>useEffect</code>  在全部渲染完毕后才会执行， <code>useLayoutEffect</code>  会在浏览器  <code>layout</code>  之后， <code>painting</code>  之前执行。</li>\n</ul>\n<h2 id=\"三-注意事项\"><a class=\"markdownIt-Anchor\" href=\"#三-注意事项\">#</a> 三、注意事项</h2>\n<ul>\n<li><strong>只能在 **** 函数内部的最外层 **** 调用 Hook，不要在循环、条件判断或者子函数中调用</strong></li>\n<li><strong>只能在 React 的 **** 函数组件 **** 中调用 Hook，不要在其他 JavaScript 函数中调用</strong></li>\n<li><a href=\"https://reactjs.org/warnings/invalid-hook-call-warning.html\"><strong>https://reactjs.org/warnings/invalid-hook-call-warning.html</strong></a></li>\n</ul>\n<h2 id=\"四-usestate-usememo-usecallback\"><a class=\"markdownIt-Anchor\" href=\"#四-usestate-usememo-usecallback\">#</a> 四、useState &amp; useMemo &amp; useCallback</h2>\n<ul>\n<li><strong>React 假设当你多次调用 useState 的时候，你能保证每次渲染时它们的 **** 调用顺序 **** 是不变的。</strong></li>\n<li>通过在函数组件里调用它来给组件添加一些内部 state，React 会 <strong>在重复渲染时保留这个 state</strong></li>\n<li>useState 唯一的参数就是初始 state</li>\n<li>useState 会返回一个数组：一个 state，一个更新 state 的函数\n<ul>\n<li>在初始化渲染期间，返回的状态 (state) 与传入的第一个参数 (initialState) 值相同</li>\n<li>你可以在事件处理函数中或其他一些地方调用这个函数。它类似 class 组件的 this.setState，但是它<strong>不会把新的 state 和旧的 state 进行合并，而是直接替换</strong></li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 这里可以任意命名，因为返回的是数组，数组解构</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"41-使用例子\"><a class=\"markdownIt-Anchor\" href=\"#41-使用例子\">#</a> 4.1 使用例子</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 声明一个叫 \"count\" 的 state 变量</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>You clicked <span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span> times<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Click me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>state 初始值为  <code>&#123; count: 0 &#125;</code>  ，当用户点击按钮后，我们通过调用  <code>this.setState()</code>  来增加  <code>state.count</code> 。整个章节中都将使用该 class 的代码片段做示例。</p>\n<p><strong>等价的 class 示例</strong></p>\n<p>如果你之前在 React 中使用过 class，这段代码看起来应该很熟悉：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>You clicked <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span> times<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n          Click me\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"42-每次渲染都是独立的闭包\"><a class=\"markdownIt-Anchor\" href=\"#42-每次渲染都是独立的闭包\">#</a> 4.2 每次渲染都是独立的闭包</h3>\n<ul>\n<li>每一次渲染都有它自己的 Props 和 State</li>\n<li>每一次渲染都有它自己的事件处理函数</li>\n<li>当点击更新状态的时候，函数组件都会重新被调用，那么每次渲染都是独立的，取到的值不会受后面操作的影响</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">alertNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// alert 只能获取到点击按钮时的那个状态</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>number<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>alertNumber<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>alertNumber<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"43-函数式更新\"><a class=\"markdownIt-Anchor\" href=\"#43-函数式更新\">#</a> 4.3 函数式更新</h3>\n<ul>\n<li><strong>如果新的 state 需要通过使用先前的 state 计算得出，那么可以将回调函数当做参数传递给 setState。该回调函数将接收先前的 state，并返回一个更新后的值。</strong></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// setNumber(number+1);</span>\n      <span class=\"token comment\">// 这样每次执行时都会去获取一遍 state，而不是使用点击触发时的那个 state</span>\n      <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>number<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>lazy<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>lazy<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"44-惰性初始化-state\"><a class=\"markdownIt-Anchor\" href=\"#44-惰性初始化-state\">#</a> 4.4 惰性初始化 state</h3>\n<ul>\n<li><strong>initialState 参数只会在组件的初始化渲染中起作用，后续渲染时会被忽略</strong></li>\n<li><strong>如果初始 state 需要通过复杂计算获得，则可以传入一个函数，在函数中计算并返回初始的 state，此函数只在初始渲染时被调用</strong></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Counter5 render\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 这个函数只在初始渲染时执行一次，后续更新状态重新渲染组件时，该函数就不会再被调用</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getInitState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> number<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>number <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>getInitState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>counter<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> number<span class=\"token operator\">:</span> counter<span class=\"token punctuation\">.</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">+</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>setCounter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"45-性能优化\"><a class=\"markdownIt-Anchor\" href=\"#45-性能优化\">#</a> 4.5 性能优化</h3>\n<h4 id=\"451-objectis-浅比较\"><a class=\"markdownIt-Anchor\" href=\"#451-objectis-浅比较\">#</a> 4.5.1 <a href=\"http://Object.is\">Object.is</a> （浅比较）</h4>\n<ul>\n<li>Hook 内部使用 <a href=\"http://Object.is\">Object.is</a> 来比较新 / 旧 state 是否相等</li>\n<li><strong>与 class 组件中的 setState 方法不同，如果你修改状态的时候，传的状态值没有变化，则不重新渲染</strong></li>\n<li><strong>与 class 组件中的 setState 方法不同，useState 不会自动合并更新对象。你可以用函数式的 setState 结合展开运算符来达到合并更新对象的效果</strong></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"计数器\"</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"render Counter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 如果你修改状态的时候，传的状态值没有变化，则不重新渲染</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">&#123;</span>counter<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>counter<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button\n        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>counter<span class=\"token punctuation\">,</span> number<span class=\"token operator\">:</span> counter<span class=\"token punctuation\">.</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token operator\">+</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">++</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nj<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"452-减少渲染次数\"><a class=\"markdownIt-Anchor\" href=\"#452-减少渲染次数\">#</a> 4.5.2 减少渲染次数</h4>\n<ul>\n<li><strong>默认情况，只要父组件状态变了（不管子组件依不依赖该状态），子组件也会重新渲染</strong></li>\n<li>一般的优化：\n<ol>\n<li><strong>类组件</strong>：可以使用  <code>pureComponent</code>  ；</li>\n<li><strong>函数组件</strong>：使用  <code>React.memo</code>  ，将函数组件传递给  <code>memo</code>  之后，就会返回一个新的组件，新组件的功能：<strong>如果接受到的属性不变，则不重新渲染函数</strong>；</li>\n</ol>\n</li>\n<li><strong>但是怎么保证属性不会变尼？这里使用 useState ，每次更新都是独立的</strong>， <code>const [number,setNumber] = useState(0)</code>  <strong>也就是说每次都会生成一个新的值（哪怕这个值没有变化），即使使用了  <code>React.memo</code>  ，也还是会重新渲染</strong></li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">,</span> useMemo<span class=\"token punctuation\">,</span> useCallback <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> onClick<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubCounter render\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>onClick<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nSubCounter <span class=\"token operator\">=</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>SubCounter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Counter6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Counter render\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"计数器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> number <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>SubCounter data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">&#125;</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>addClick<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>更深入的优化：\n<ol>\n<li><strong>useCallback</strong>：接收一个内联回调函数参数和一个依赖项数组（子组件依赖父组件的状态，即子组件会使用到父组件的值） ，useCallback 会返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新</li>\n<li><strong>useMemo</strong>：把创建函数和依赖项数组作为参数传入  <code>useMemo</code> ，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"基础-hook\"><a class=\"markdownIt-Anchor\" href=\"#基础-hook\">#</a> 基础 Hook</h2>\n<h3 id=\"usestate\"><a class=\"markdownIt-Anchor\" href=\"#usestate\">#</a> useState</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"zc\"</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">,</span> setArr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>func<span class=\"token punctuation\">,</span> setFunc<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token operator\">...</span>count<span class=\"token punctuation\">,</span>\n      age<span class=\"token operator\">:</span> count<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>arr<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>func<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handle<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>增加<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button\n        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">setArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">></span>\n        增加\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Hook<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"useeffect\"><a class=\"markdownIt-Anchor\" href=\"#useeffect\">#</a> useEffect</h3>\n<ul>\n<li><strong>effect（副作用）：指那些没有发生在数据向视图转换过程中的逻辑，如  <code>ajax</code>  请求、访问原生 <code>dom</code>  元素、本地持久化缓存、绑定 / 解绑事件、添加订阅、设置定时器、记录日志等。</strong></li>\n<li><strong>副作用操作 **** 可以分两 **** 类：**** 需要清除的和不需要清除的 ****。</strong></li>\n<li>原先在函数组件内（这里指在 React 渲染阶段）改变 dom 、发送 ajax 请求以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性</li>\n<li>useEffect 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的  <code>componentDidMount</code> 、 <code>componentDidUpdate</code>  和  <code>componentWillUnmount</code>  具有相同的用途，只不过被合并成了一个 API</li>\n<li><strong>useEffect 接收一个函数，该函数会在组件渲染到屏幕之后才执行，该函数有要求：要么返回一个能清除副作用的函数，要么就不返回任何内容</strong></li>\n<li>与  <code>componentDidMount</code>  或  <code>componentDidUpdate</code>  不同，使用 useEffect 调度的 effect 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，effect 不需要同步地执行。在个别情况下（例如测量布局），有单独的 useLayoutEffect Hook 供你使用，其 API 与 useEffect 相同。</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hook1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []不监听任何状态</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>useEffect<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Hook1<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>清除 effect</strong></p>\n<p>通常，组件卸载时需要清除 effect 创建的诸如订阅或计时器 ID 等资源。要实现这一点， <code>useEffect</code>  函数需返回一个清除函数。以下就是一个创建订阅的例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 清除订阅</span>\n    subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"usecontext\"><a class=\"markdownIt-Anchor\" href=\"#usecontext\">#</a> useContext</h3>\n<blockquote>\n<p>useContext &amp; createContext. 一起使用</p>\n<ol>\n<li>\n<p>先使用  <code>createContext</code>  创建父容器</p>\n</li>\n<li>\n<p>暴露给子组建</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>MyContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Comson <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>子组件使用  <code>useContext</code>  接受父容器后使用  <code>const value = useContext(MyContext);</code></p>\n</li>\n</ol>\n<p>全局变量，跨级传值</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MyContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接收一个 context 对象（ <code>React.createContext</code>  的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的  <code>&lt;MyContext.Provider&gt;</code>  的  <code>value</code>  prop 决定。</p>\n<p>当组件上层最近的  <code>&lt;MyContext.Provider&gt;</code>  更新时，该 Hook 会触发重渲染，并使用最新传递给  <code>MyContext</code>  provider 的 context  <code>value</code>  值。即使祖先使用 <a href=\"https://reactjs.bootcss.com/docs/react-api.html#reactmemo\"> <code>React.memo</code> </a> 或 <a href=\"https://reactjs.bootcss.com/docs/react-component.html#shouldcomponentupdate\"> <code>shouldComponentUpdate</code> </a>，也会在组件本身使用  <code>useContext</code>  时重新渲染。</p>\n<p>别忘记  <code>useContext</code>  的参数必须是 <em>context 对象本身</em>：</p>\n<ul>\n<li><strong>正确：</strong>  <code>useContext(MyContext)</code></li>\n<li><strong>错误：</strong>  <code>useContext(MyContext.Consumer)</code></li>\n<li><strong>错误：</strong>  <code>useContext(MyContext.Provider)</code></li>\n</ul>\n<p>调用了  <code>useContext</code>  的组件总会在 context 值变化时重新渲染。如果重渲染组件的开销较大，你可以 <a href=\"https://github.com/facebook/react/issues/15156#issuecomment-474590693\">通过使用 memoization 来优化</a>。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useContext<span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">,</span> createContext <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MyContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Comson</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MyContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>子组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>我是子组件 <span class=\"token operator\">--</span><span class=\"token operator\">--</span> <span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HookuseContext</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>MyContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Comson <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handle<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HookuseContext<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>提示</p>\n<p>如果你在接触 Hook 前已经对 context API 比较熟悉，那应该可以理解， <code>useContext(MyContext)</code>  相当于 class 组件中的  <code>static contextType = MyContext</code>  或者  <code>&lt;MyContext.Consumer&gt;</code> 。</p>\n<p><code>useContext(MyContext)</code>  只是让你能够<em>读取</em> context 的值以及订阅 context 的变化。你仍然需要在上层组件树中使用  <code>&lt;MyContext.Provider&gt;</code>  来为下层组件<em>提供</em> context。</p>\n</blockquote>\n<h2 id=\"额外的-hook\"><a class=\"markdownIt-Anchor\" href=\"#额外的-hook\">#</a> 额外的 Hook</h2>\n<p>以下介绍的 Hook，有些是上一节中基础 Hook 的变体，有些则仅在特殊情况下会用到。不用特意预先学习它们。</p>\n<h3 id=\"useref\"><a class=\"markdownIt-Anchor\" href=\"#useref\">#</a> useRef</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> refContainer <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>useRef</code>  返回一个可变的 ref 对象，其  <code>.current</code>  属性被初始化为传入的参数（ <code>initialValue</code> ）。返回的 ref 对象在组件的整个生命周期内保持不变。</p>\n<p>一个常见的用例便是命令式地访问子组件：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">TextInputWithFocusButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> inputEl <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// `current` 指向已挂载到 DOM 上的文本输入元素</span>\n    inputEl<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>inputEl<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>onButtonClick<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Focus the input<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>本质上， <code>useRef</code>  就像是可以在其  <code>.current</code>  属性中保存一个可变值的 “盒子”。</p>\n<p>你应该熟悉 ref 这一种<a href=\"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\">访问 DOM</a> 的主要方式。如果你将 ref 对象以  <code>&lt;div ref=&#123;myRef&#125; /&gt;</code>  形式传入组件，则无论该节点如何改变，React 都会将 ref 对象的  <code>.current</code>  属性设置为相应的 DOM 节点。</p>\n<p>然而， <code>useRef()</code>  比  <code>ref</code>  属性更有用。它可以<a href=\"https://zh-hans.reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\">很方便地保存任何可变值</a>，其类似于在 class 中使用实例字段的方式。</p>\n<p>这是因为它创建的是一个普通 Javascript 对象。而  <code>useRef()</code>  和自建一个  <code>&#123;current: ...&#125;</code>  对象的唯一区别是， <code>useRef</code>  会在每次渲染时返回同一个 ref 对象。</p>\n<p>请记住，当 ref 对象内容发生变化时， <code>useRef</code>  并<em>不会</em>通知你。变更  <code>.current</code>  属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用<a href=\"https://zh-hans.reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node\">回调 ref</a> 来实现</p>\n<h3 id=\"usememo\"><a class=\"markdownIt-Anchor\" href=\"#usememo\">#</a> useMemo</h3>\n<blockquote>\n<p>执行时机不同，**useEffect ** 是在 <strong>componentDidMount</strong> 以后执行的，而 useMemo 是在组件渲染过程中执行的。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>返回一个 <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoized</a> 值。</p>\n<p>把 “创建” 函数和依赖项数组作为参数传入  <code>useMemo</code> ，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。</p>\n<p>记住，传入  <code>useMemo</code>  的函数会在渲染期间执行。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于  <code>useEffect</code>  的适用范畴，而不是  <code>useMemo</code> 。</p>\n<p>如果没有提供依赖项数组， <code>useMemo</code>  在每次渲染时都会计算新的值。</p>\n<p>** 你可以把  <code>useMemo</code>  作为性能优化的手段，但不要把它当成语义上的保证。** 将来，React 可能会选择 “遗忘” 以前的一些 memoized 值，并在下次渲染时重新计算它们，比如为离屏组件释放内存。先编写在没有  <code>useMemo</code>  的情况下也可以执行的代码 —— 之后再在你的代码中添加  <code>useMemo</code> ，以达到优化性能的目的。</p>\n<blockquote>\n<p>注意</p>\n<p>依赖项数组不会作为参数传给 “创建” 函数。虽然从概念上来说它表现为：所有 “创建” 函数中引用的值都应该出现在依赖项数组中。未来编译器会更加智能，届时自动创建数组将成为可能。</p>\n<p>我们推荐启用 <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"> <code>eslint-plugin-react-hooks</code> </a> 中的 <a href=\"https://github.com/facebook/react/issues/14920\"> <code>exhaustive-deps</code> </a> 规则。此规则会在添加错误依赖时发出警告并给出修复建议。</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useMemo<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hook2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>res<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handle<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Hook2<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"usecallback\"><a class=\"markdownIt-Anchor\" href=\"#usecallback\">#</a> useCallback</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>返回一个 <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoized</a> 回调函数。</p>\n<p>把内联回调函数及依赖项数组作为参数传入  <code>useCallback</code> ，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如  <code>shouldComponentUpdate</code> ）的子组件时，它将非常有用。</p>\n<p><code>useCallback(fn, deps)</code>  相当于  <code>useMemo(() =&gt; fn, deps)</code> 。</p>\n<blockquote>\n<p>注意</p>\n<p>依赖项数组不会作为参数传给回调函数。虽然从概念上来说它表现为：所有回调函数中引用的值都应该出现在依赖项数组中。未来编译器会更加智能，届时自动创建数组将成为可能。</p>\n<p>我们推荐启用 <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"> <code>eslint-plugin-react-hooks</code> </a> 中的 <a href=\"https://github.com/facebook/react/issues/14920\"> <code>exhaustive-deps</code> </a> 规则。此规则会在添加错误依赖时发出警告并给出修复建议。</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useCallback <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HookUseCallbak</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> callback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HookUseCallbak<span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"forwardref\"><a class=\"markdownIt-Anchor\" href=\"#forwardref\">#</a> forwardRef</h3>\n<blockquote>\n<p>配合 useRef 获取子组件的 ref 引用</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useRef<span class=\"token punctuation\">,</span> forwardRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Com <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>ref<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span> 我是子组建<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HookUseCallbak</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> refdemo <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">213</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Com ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>refdemo<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>refdemo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HookUseCallbak<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"useimperativehandle\"><a class=\"markdownIt-Anchor\" href=\"#useimperativehandle\">#</a> useImperativeHandle</h3>\n<blockquote>\n<p>自定义 暴露～</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> createHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>deps<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>useImperativeHandle</code>  可以让你在使用  <code>ref</code>  时 <strong><u>自定义暴露给父组件的实例值</u></strong> 。在大多数情况下，应当避免使用 ref 这样的命令式代码。 <code>useImperativeHandle</code>  应当与 <a href=\"https://reactjs.bootcss.com/docs/react-api.html#reactforwardref\"> <code>forwardRef</code> </a> 一起使用：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">focus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>inputRef<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nFancyInput <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>FancyInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在本例中，渲染  <code>&lt;FancyInput ref=&#123;inputRef&#125; /&gt;</code>  的父组件可以调用  <code>inputRef.current.focus()</code> 。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useRef<span class=\"token punctuation\">,</span> forwardRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useImperativeHandle <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Com <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"zc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'111'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span> 我是子组建<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HookUseCallbak</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> refdemo <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">213</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Com ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>refdemo<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>refdemo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HookUseCallbak<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"uselayouteffect\"><a class=\"markdownIt-Anchor\" href=\"#uselayouteffect\">#</a> useLayoutEffect</h3>\n<p>其函数签名与  <code>useEffect</code>  相同，但它会在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染。在浏览器执行绘制之前， <code>useLayoutEffect</code>  内部的更新计划将被同步刷新。</p>\n<p>尽可能使用标准的  <code>useEffect</code>  以避免阻塞视觉更新。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useLayoutEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HookuseLayoutEffect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useEffect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useEffect-return\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// useEffect 是在 componentDidMount 以后执行的，useLayoutEffect在浏览器执行绘制之前执行（会阻塞组件挂载，慎用）</span>\n  <span class=\"token comment\">// 慎用 -- 会阻塞组件的挂载</span>\n  <span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useLayoutEffect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useLayoutEffect-return\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HookuseLayoutEffect<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/MLNOuG.png\" alt=\"MLNOuG\"></p>\n<h3 id=\"自定义hook\"><a class=\"markdownIt-Anchor\" href=\"#自定义hook\">#</a> 自定义 Hook（*）</h3>\n<blockquote>\n<p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<p>通过自定义 Hook，可以将组件逻辑提取到可重用的函数中。</p>\n<ol>\n<li>自定义的 hook，必须以 use 开头</li>\n<li>自定义的 hook，可以使用这些 hook（useSate,useEffect…）来封装</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useCus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    count<span class=\"token punctuation\">,</span>\n    add<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hook3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> count<span class=\"token punctuation\">,</span> add <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useCus</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Hook3<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>useInstance.ts</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRef<span class=\"token punctuation\">,</span> useCallback<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> useInstance<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> custom<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">C</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> instanceRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    props<span class=\"token punctuation\">,</span>\n    state<span class=\"token punctuation\">,</span>\n    custom<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    instanceRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    instanceRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n    instanceRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>custom <span class=\"token operator\">=</span> custom<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> getProps <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token parameter\"><span class=\"token constant\">P</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> instanceRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>instanceRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> getState <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token parameter\"><span class=\"token constant\">S</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> instanceRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>instanceRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> getCustom <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> instanceRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>custom<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>instanceRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> getProps<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">,</span> getCustom <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>useTimeout.ts</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRef<span class=\"token punctuation\">,</span> useCallback<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> timeoutRef <span class=\"token operator\">=</span> useRef<span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> number<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeoutRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeoutRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>timeoutRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> setTimeout <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeoutRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeoutRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    timeoutRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      timeoutRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>timeoutRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> clearTimeout <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeoutRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeoutRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>timeoutRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>setTimeout<span class=\"token punctuation\">,</span> clearTimeout<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>useCacheBind.js</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRef<span class=\"token punctuation\">,</span> useCallback <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useCachebind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> cacheBindRef <span class=\"token operator\">=</span> useRef<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> getCacheBind <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> fn<span class=\"token operator\">:</span> Function<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>aArgs<span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> cachedBind <span class=\"token operator\">=</span> cacheBindRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> cacheKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>aArgs<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> cache <span class=\"token operator\">=</span> cachedBind<span class=\"token punctuation\">[</span>cacheKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> argsEqual <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>oriFn <span class=\"token operator\">===</span> fn<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cache<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> aArgs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          argsEqual <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argsEqual<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      fn<span class=\"token operator\">:</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>aArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      oriFn<span class=\"token operator\">:</span> fn<span class=\"token punctuation\">,</span>\n      args<span class=\"token operator\">:</span> aArgs\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    cachedBind<span class=\"token punctuation\">[</span>cacheKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>cacheBindRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> getCacheBind <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "React",
                "React-Hooks"
            ]
        },
        {
            "id": "http://example.com/2020/10/15/Create-react-app%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2020/10/15/Create-react-app%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "title": "Create-react-app基本使用",
            "date_published": "2020-10-15T05:07:08.000Z",
            "content_html": "<h3 id=\"create-react-app-安装方法\"><a class=\"markdownIt-Anchor\" href=\"#create-react-app-安装方法\">#</a> Create-react-app 安装方法</h3>\n<blockquote>\n<p>Create React App 是一个官方支持的创建 React 单页应用程序的方法。它提供了一个零配置的现代构建设置。</p>\n<p>你 <strong>无需</strong> 安装或配置 Webpack 或 Babel 等工具。 它们是预先配置好并且隐藏的，因此你可以专注于代码。</p>\n</blockquote>\n<h2 id=\"快速开始\"><a class=\"markdownIt-Anchor\" href=\"#快速开始\">#</a> 快速开始</h2>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">npx create-react-app my-app\ncd my-app\nnpm start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"创建应用程序\"><a class=\"markdownIt-Anchor\" href=\"#创建应用程序\">#</a> 创建应用程序</h2>\n<p><strong>你需要在本地开发计算机上使用 Node &gt;= 6</strong>（但在服务器上不需要）。 你可以使用 <a href=\"https://github.com/creationix/nvm#installation\">nvm</a> (macOS/Linux) 或 <a href=\"https://github.com/coreybutler/nvm-windows#node-version-manager-nvm-for-windows\">nvm-windows</a> 轻松地在不同项目之间切换 Node 版本。</p>\n<p>要创建新应用，你可以选择以下方法之一：</p>\n<h3 id=\"npx\"><a class=\"markdownIt-Anchor\" href=\"#npx\">#</a> npx</h3>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">npx create-react-app my-app<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><em>(<a href=\"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b\">npx</a> 来自 npm 5.2+ 或更高版本，查看 <a href=\"https://gist.github.com/gaearon/4064d3c23a77c74a3614c498a8bb1c5f\">npm 旧版本的说明</a>)</em></p>\n<h3 id=\"npm\"><a class=\"markdownIt-Anchor\" href=\"#npm\">#</a> npm</h3>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">npm init react-app my-app<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><em> <code>npm init &lt;initializer&gt;</code>  在 npm 6+ 中可用</em></p>\n<h3 id=\"yarn\"><a class=\"markdownIt-Anchor\" href=\"#yarn\">#</a> Yarn</h3>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">yarn create react-app my-app<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><em> <code>yarn create</code>  在 Yarn 0.25+ 中可用</em></p>\n<h3 id=\"图片加载\"><a class=\"markdownIt-Anchor\" href=\"#图片加载\">#</a> 图片加载</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> img1 <span class=\"token keyword\">from</span> <span class=\"token string\">'../src/assets/1.jpg'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>img1<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../src/assets/1.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"父子间传值\"><a class=\"markdownIt-Anchor\" href=\"#父子间传值\">#</a> 父子间传值</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> img1 <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/assets/1.jpg\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Home\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      num<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function-variable function\">onClickHandle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      num<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>img1<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../src/assets/1.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Home msg<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">&#125;</span> onClickHandle<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandle<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Home</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                \n                <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onClickHandle</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Home<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"同级组件传值\"><a class=\"markdownIt-Anchor\" href=\"#同级组件传值\">#</a> 同级组件传值</h3>\n<blockquote>\n<p>pubsub  – -  发布 / 订阅库</p>\n</blockquote>\n<h3 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h3>\n<ol>\n<li>Pubsubjs 是一个用 JavaScript 编写的基于主题的发布 / 订阅库。</li>\n<li>Pubsubjs 具有同步解耦功能，因此主题是异步发布的。 这有助于保持程序的可预测性，因为在使用者处理主题时，主题的发起者不会被阻塞。</li>\n<li>Pubsubjs 被设计为在单个进程中使用，并不适合多进程应用程序 (比如具有许多子进程的 Node.js-Cluster)。 如果你的 Node.js 应用程序是一个单进程应用程序，你很好。 如果它是 (或将是) 一个多进程应用程序，你最好使用 redis pub /sub 或类似的应用程序</li>\n</ol>\n<h3 id=\"pubsub使用方式\"><a class=\"markdownIt-Anchor\" href=\"#pubsub使用方式\">#</a> PubSub 使用方式</h3>\n<ol>\n<li>react 导入库:   <code>npm install pubsub-js --save</code></li>\n<li>react 页面引入 PubSub : <code> import PubSub from 'pubsub-js'</code></li>\n<li>pubsubjs 使用 发送消息：PubSub.publish (名称，参数) 订阅消息：PubSub.subscrib (名称，函数) 取消订阅：PubSub.unsubscrib (名称)</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// home.jsx  --  传递数据</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> PubSub <span class=\"token keyword\">from</span> <span class=\"token string\">\"pubsub-js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Home</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">pubsub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    PubSub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"evt\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pubsub</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>进行同级数据传递<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Home<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// Hello.jsx   --- 监听数据</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> PubSub <span class=\"token keyword\">from</span> <span class=\"token string\">\"pubsub-js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    PubSub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"evt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Hello<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数据请求-axios-和-模拟数据-json-server\"><a class=\"markdownIt-Anchor\" href=\"#数据请求-axios-和-模拟数据-json-server\">#</a> 数据请求 axios 和 模拟数据 json-server</h3>\n<ul>\n<li>json-server ：  <code>npm install json-server -g</code></li>\n<li>axios :  <code> npm install --save axios</code></li>\n</ul>\n<h4 id=\"json-server的使用\"><a class=\"markdownIt-Anchor\" href=\"#json-server的使用\">#</a> json-server 的使用</h4>\n<ol>\n<li>\n<p>首先准备一个 json 文件</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"data1\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"001\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sherry\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"friends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"100\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"friend1\"</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"200\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"friend2\"</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"002\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Addy\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"data2\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"003\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"data3\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"004\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Rebeca\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">27</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>使用全局 json-server 命令，启动 mock 服务。这个 mock 服务，管理的数据，就是 db.json。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">json-server --watch --port 3001 db.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>使用 json-server 支持的功能，尝试进行数据访问</p>\n</li>\n</ol>\n<h4 id=\"请求mock模拟数据demo\"><a class=\"markdownIt-Anchor\" href=\"#请求mock模拟数据demo\">#</a> 请求 mock 模拟数据 Demo</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ajaxFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function-variable function\">ajaxFun</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:4000/data1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Test<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/1BiO40.png\" alt=\"1BiO40\"></p>\n<h3 id=\"跨域\"><a class=\"markdownIt-Anchor\" href=\"#跨域\">#</a> 跨域</h3>\n<blockquote>\n<p>正向代理 — 开发环境</p>\n<p>反向代理 – 上线环境</p>\n<h2 id=\"反向代理和正向代理\"><a class=\"markdownIt-Anchor\" href=\"#反向代理和正向代理\">#</a> 反向代理和正向代理</h2>\n<p>[编辑](javascript:😉</p>\n<p>(1) 正向代理和代理服务器</p>\n<p>正向代理即通常所说的代理，用于代表内部网络用户向 Internet 上的服务器 (或称外部服务器，通常为 Web 服务器) 发出连接请求，并接收响应结果，执行该代理功能的服务器称为代理服务器。使用代理服务器访问外部网络时，客户端必须在局域网设置中指明代理服务器的地址以及要代理的服务的端口号。 [5]</p>\n<p>(2) 反向代理和代理服务器</p>\n<p>反向代理的方向与正向代理相反，指代表外部网络用户向内部服务器发出请求，即接收来自 Internet 上用户的连接请求，并将这些请求转发给内部网络上的服务器，然后将从内部服务器上得到的响应返回给 Internet 上请求连接的客户：执行反向代理服务的服务器称为反向代理服务器，反向代理服务器对外部用户表现为一个服务器</p>\n</blockquote>\n<h4 id=\"正向代理\"><a class=\"markdownIt-Anchor\" href=\"#正向代理\">#</a> <strong>正向代理</strong></h4>\n<p>正向代理，意思是一个位于客户端和原始服务器 (origin server) 之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标 (原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。</p>\n<p>正向代理：是一个位于客户端和原始服务器 (origin server) 之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标 (原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。</p>\n<p>正向代理的典型用途是为在防火墙内的局域网客户端提供访问 Internet 的途径。正向代理还可以使用缓冲特性 (由 mod_cache 提供) 减少网络使用率。</p>\n<p>使用 ProxyRequests 指令即可激活正向代理。因为正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。</p>\n<p>和<a href=\"https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\">反向代理</a>不同之处在于，典型的正向代理是一种最终用户知道并主动使用的代理方式。例如 Chrome 浏览器中安装了 switchysharp 以后，通过 switchysharp 方便地进行代理转发服务。而为此用户必须要提前在 switchysharp 中做好设置才能达到相应的效果。</p>\n<h4 id=\"反向代理\"><a class=\"markdownIt-Anchor\" href=\"#反向代理\">#</a> <strong>反向代理</strong></h4>\n<p>反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源。同时，用户不需要知道目标服务器的地址，也无须在用户端作任何设定。反向代理服务器通常可用来作为 Web 加速，即使用反向代理作为 Web 服务器的前置机来降低网络和服务器的负载，提高访问效率。 [1]</p>\n<p><strong>优点</strong></p>\n<ol>\n<li>提高了内部服务器的安全</li>\n</ol>\n<p>外部网络用户通过反向代理访向内部服务器，只能看到反向代理服务器的 IP 地址和端口号，内部服务器对于外部网络来说是完全不可见。而且反向代理服务器上没有保存任何的信息资源，所有的网页程序都保存在内部服务器上，对反向代理服务器的攻击并不能使真的网页信息系统受到破坏，这样就提高了内部服务器的安全性。</p>\n<ol start=\"2\">\n<li>加快了对内部服务器的访问速度</li>\n</ol>\n<p>在内部服务器前放置两台反向代理服务器，分别连接到教育网和公网，这样公网用户就可以直接通过公网线路访问学校服务器，从而避开了公网和教育网之间拥挤的链路。同时反向代理服务器的缓存功能也加快了用户的访问速度。 [4]</p>\n<ol start=\"3\">\n<li>节约了有限的 IP 资源</li>\n</ol>\n<p>校园网内部服务器除使用教育网地址外，也会采用公网的 IP 地址对外提供服务，公网分配的 IP 地址数目是有限的，如果每个服务器有分配 - 个公网地址，那是不可能的，通过反向代理技术很好的解决了 IP 地址不足的问题。</p>\n<h3 id=\"模拟请求真实的数据接口-中国天气网中的数据\"><a class=\"markdownIt-Anchor\" href=\"#模拟请求真实的数据接口-中国天气网中的数据\">#</a> 模拟请求真实的数据接口 中国天气网中的数据</h3>\n<ol>\n<li>\n<p>找到配置文件  <code>react-demo/node_modules/react-scripts</code></p>\n</li>\n<li>\n<p>找到中国天气网的接口。：  <a href=\"http://www.weather.com.cn/data/cityinfo/101320101.html\">http://www.weather.com.cn/data/cityinfo/101320101.html</a></p>\n</li>\n<li>\n<p>更改 react 项目的配置文件： <code>react-demo/node_modules/react-scripts/config/webpackDevServer.config.js</code></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 112行proxy</span>\nproxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"/api\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    target<span class=\"token operator\">:</span> <span class=\"token string\">\"http://www.weather.com.cn/data/cityinfo/\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//对应自己的接口</span>\n      changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"pathRewrite\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token string\">\"^/api\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span>\n        <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>react 组件：Test.jsx</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ajaxFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function-variable function\">ajaxFun</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/101320101.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Test<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/DsGJME.png\" alt=\"DsGJME\"></p>\n</li>\n</ol>\n<h3 id=\"react路由\"><a class=\"markdownIt-Anchor\" href=\"#react路由\">#</a> react 路由</h3>\n<blockquote>\n<p>路由  —  根据 url 的不同来切换对应的组件。 实现 SPA 切换时不会刷新页面</p>\n<p>自从 React 16 发布后， React Router 也发布了第五个版本，更好的支持 React 16。</p>\n<p>官方文档链接：<a href=\"https://reacttraining.com/react-router/web/guides/quick-start\">reacttraining.com/react-route…</a></p>\n</blockquote>\n<p>React Router 是一个基于 <a href=\"http://facebook.github.io/react/\">React</a> 之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，同时保持页面与 URL 间的同步。</p>\n<h3 id=\"react-router与react-router-dom区别\"><a class=\"markdownIt-Anchor\" href=\"#react-router与react-router-dom区别\">#</a> react-router 与 react-router-dom 区别</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Switch<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Router <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Swtich<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> BrowserRouter<span class=\"token punctuation\">,</span> HashHistory<span class=\"token punctuation\">,</span> Link <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>\n<h4 id=\"api方面\"><a class=\"markdownIt-Anchor\" href=\"#api方面\">#</a> api 方面</h4>\n<p><strong>React-router：</strong></p>\n<p>提供了路由的核心 api。如 Router、Route、Switch 等，但没有提供有关 dom 操作进行路由跳转的 api；</p>\n<p><strong>React-router-dom：</strong></p>\n<p>提供了 BrowserRouter、Route、Link 等 api，可以通过 dom 操作触发事件控制路由。</p>\n<p>Link 组件，会渲染一个 a 标签；BrowserRouter 和 HashRouter 组件，前者使用 pushState 和 popState 事件构建路由，后者使用 hash 和 hashchange 事件构建路由。</p>\n</li>\n<li>\n<h4 id=\"动态路由跳转\"><a class=\"markdownIt-Anchor\" href=\"#动态路由跳转\">#</a> 动态路由跳转</h4>\n<p><strong>React-router</strong></p>\n<p>router4.0 以上 this.props.history.push (’/path’) 实现跳转；</p>\n<p>router3.0 以上 this.props.router.push (’/path’) 实现跳转；</p>\n<p><strong>React-router-dom</strong></p>\n<p>直接用 this.props.history.push (’/path’) 实现跳转</p>\n</li>\n<li>\n<h4 id=\"使用区别\"><a class=\"markdownIt-Anchor\" href=\"#使用区别\">#</a> 使用区别</h4>\n<p>react-router-dom 在 react-router 的基础上扩展了可操作 dom 的 api。</p>\n<p>Swtich 和 Route 都是从 react-router 中导入了相应的组件并重新导出，没做什么特殊处理。</p>\n<p>react-router-dom 中 package.json 依赖中存在对 react-router 的依赖，故此，不需要 npm 安装 react-router。</p>\n</li>\n</ol>\n<h3 id=\"路由器\"><a class=\"markdownIt-Anchor\" href=\"#路由器\">#</a> 路由器</h3>\n<p>每个 React Router 应用程序的核心应该是路由器组件。对于 web 项目，react-router-dom 提供 BrowserRouter 和 HashRouter 路由器。两者之间的主要区别是它们存储 URL 和与 Web 服务器通信的方式。</p>\n<ul>\n<li>BrowserRouter 使用常规 URL 路径，<a href=\"http://xn--example-4t3kgmu9tj0dzq7c.com/some/path%E8%BF%99%E6%A0%B7%E7%9C%9F%E5%AE%9E%E7%9A%84\">创建一个像 example.com/some/path 这样真实的</a> URL ，但是他们要求正确的配置服务器。具体来说，您的 web 服务器需要在所有由 React Router 客户端管理的 URL 上处理相同的页面。<a href=\"https://github.com/facebook/create-react-app\">Create React App</a> 在开发中即开即用地支持此功能，并附带有关如何配置生产服务器的说明。</li>\n<li>HashRouter 将当前位置存储在 URL 的哈希部分中，因此 URL 看起来类似于 http://example.com/#/your/page。由于哈希从不发送到服务器，因此这意味着不需要特殊的服务器配置。</li>\n</ul>\n<h4 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h4>\n<ul>\n<li>你可以用 npm 或者 yarn 安装 React Router，由于我们在构建一个 web app，所以我们在这个文档中使用  <code>react-router-dom</code></li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">npm install react<span class=\"token operator\">-</span>router<span class=\"token operator\">-</span>dom <span class=\"token operator\">--</span>save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"根目录indexjs包裹\"><a class=\"markdownIt-Anchor\" href=\"#根目录indexjs包裹\">#</a> 根目录 index.js 包裹</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> BrowserRouter <span class=\"token keyword\">as</span> Router<span class=\"token punctuation\">,</span> Switch<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Link <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> serviceWorker <span class=\"token keyword\">from</span> <span class=\"token string\">'./serviceWorker'</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"route使用\"><a class=\"markdownIt-Anchor\" href=\"#route使用\">#</a> Route 使用</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/home'</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Home<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/hello'</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Hello<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/test'</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Test<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/I0RT40.png\" alt=\"I0RT40\"></p>\n<h4 id=\"路由导航link\"><a class=\"markdownIt-Anchor\" href=\"#路由导航link\">#</a> 路由导航 Link</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">'/home'</span><span class=\"token operator\">></span>点我去home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span> \n<span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">'/hello'</span><span class=\"token operator\">></span>点我去hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span> \n<span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">'/test'</span><span class=\"token operator\">></span>点我去test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span> \n\n\n<span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/home'</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Home<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/hello'</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Hello<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/test'</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Test<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"navlink\"><a class=\"markdownIt-Anchor\" href=\"#navlink\">#</a> NavLink</h4>\n<blockquote>\n<p>可以动态给选中的导航增加 active 的类名</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>NavLink to<span class=\"token operator\">=</span><span class=\"token string\">'/home'</span><span class=\"token operator\">></span>点我去home  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NavLink<span class=\"token operator\">></span> \n<span class=\"token operator\">&lt;</span>NavLink to<span class=\"token operator\">=</span><span class=\"token string\">'/hello'</span><span class=\"token operator\">></span>点我去hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NavLink<span class=\"token operator\">></span> \n<span class=\"token operator\">&lt;</span>NavLink to<span class=\"token operator\">=</span><span class=\"token string\">'/test'</span><span class=\"token operator\">></span>点我去test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NavLink<span class=\"token operator\">></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"route精准匹配\"><a class=\"markdownIt-Anchor\" href=\"#route精准匹配\">#</a> Route 精准匹配</h4>\n<blockquote>\n<p>exact</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/'</span> exact component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Home<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/home'</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Home<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"switch-防止多次渲染\"><a class=\"markdownIt-Anchor\" href=\"#switch-防止多次渲染\">#</a> Switch 防止多次渲染</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> exact component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Home<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/home\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Home<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/hello\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Hello<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/test\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Test<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/test\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Test<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"重定向\"><a class=\"markdownIt-Anchor\" href=\"#重定向\">#</a> 重定向</h4>\n<blockquote>\n<p>Redirect</p>\n</blockquote>\n <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Redirect <span class=\"token keyword\">from</span><span class=\"token operator\">=</span><span class=\"token string\">'/'</span> to<span class=\"token operator\">=</span><span class=\"token string\">'/hello'</span> exact<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Redirect<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"路由进阶\"><a class=\"markdownIt-Anchor\" href=\"#路由进阶\">#</a> 路由进阶</h3>\n<h4 id=\"高阶组件\"><a class=\"markdownIt-Anchor\" href=\"#高阶组件\">#</a> 高阶组件</h4>\n<p>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。</p>\n<p>具体而言，<strong>高阶组件是参数为组件，返回值为新组件的函数。</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">higherOrderComponent</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>组件是将 props 转换为 UI，而高阶组件是将组件转换为另一个组件。</p>\n<p>HOC 在 React 的第三方库中很常见，例如 Redux 的 <a href=\"https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#connect\"> <code>connect</code> </a> 和 Relay 的 <a href=\"http://facebook.github.io/relay/docs/en/fragment-container.html\"> <code>createFragmentContainer</code> </a>。</p>\n<h4 id=\"withrouter\"><a class=\"markdownIt-Anchor\" href=\"#withrouter\">#</a> withRouter</h4>\n<blockquote>\n<p>高阶组件中的 withRouter, 作用是将一个组件包裹进 Route 里面，然后 react-router 的三个对象 history, location, match 就会被放进这个组件的 props 属性中.</p>\n</blockquote>\n<p>所以 withRouter 的作用就是，如果我们某个东西不是一个 Router, 但是我们要依靠它去跳转一个页面，比如点击页面的 logo, 返回首页，这时候就可以使用 withRouter 来做.</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Route<span class=\"token punctuation\">,</span> Link<span class=\"token punctuation\">,</span> NavLink <span class=\"token punctuation\">,</span>Switch<span class=\"token punctuation\">,</span>Redirect<span class=\"token punctuation\">,</span>withRouter<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印 props</span>\n<span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/LFAXmD.png\" alt=\"LFAXmD\"></p>\n<h4 id=\"监听路由变化-history\"><a class=\"markdownIt-Anchor\" href=\"#监听路由变化-history\">#</a> 监听路由变化 history</h4>\n<blockquote>\n<p>history.listen()</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">link</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/gWktwn.png\" alt=\"gWktwn\"></p>\n<h4 id=\"编程式导航\"><a class=\"markdownIt-Anchor\" href=\"#编程式导航\">#</a> 编程式导航</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点我去test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"路由传参\"><a class=\"markdownIt-Anchor\" href=\"#路由传参\">#</a> 路由传参</h4>\n<h5 id=\"1-params\"><a class=\"markdownIt-Anchor\" href=\"#1-params\">#</a> 1、params</h5>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/path/:name'</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Path<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>link to<span class=\"token operator\">=</span><span class=\"token string\">\"/path/2\"</span><span class=\"token operator\">></span>xxx<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>pathname<span class=\"token operator\">:</span><span class=\"token string\">\"/path/\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n读取参数用<span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>nam<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>优势 ： 刷新地址栏，参数依然存在<br>\n缺点：只能传字符串，并且，如果传的值太多的话，url 会变得长而丑陋。</p>\n</blockquote>\n<h5 id=\"2-query\"><a class=\"markdownIt-Anchor\" href=\"#2-query\">#</a> 2、query</h5>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/query'</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Query<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> path <span class=\"token operator\">:</span> <span class=\"token string\">' /query'</span> <span class=\"token punctuation\">,</span> query <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token operator\">:</span> <span class=\"token string\">'sunny'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>pathname<span class=\"token operator\">:</span><span class=\"token string\">\"/query\"</span><span class=\"token punctuation\">,</span>query<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token operator\">:</span> <span class=\"token string\">'sunny'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n读取参数用<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>优势：传参优雅，传递参数可传对象；<br>\n缺点：刷新地址栏，参数丢失</p>\n</blockquote>\n<h5 id=\"3-state\"><a class=\"markdownIt-Anchor\" href=\"#3-state\">#</a> 3、state</h5>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/sort '</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Sort<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> path <span class=\"token operator\">:</span> <span class=\"token string\">' /sort '</span> <span class=\"token punctuation\">,</span> state <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token operator\">:</span> <span class=\"token string\">'sunny'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span> \n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>pathname<span class=\"token operator\">:</span><span class=\"token string\">\"/sort \"</span><span class=\"token punctuation\">,</span>state <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token operator\">:</span> <span class=\"token string\">'sunny'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n读取参数用<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>state <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>优缺点同 query</p>\n</blockquote>\n<h5 id=\"4-search\"><a class=\"markdownIt-Anchor\" href=\"#4-search\">#</a> 4、search</h5>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'/web/departManange '</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>DepartManange<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>link to<span class=\"token operator\">=</span><span class=\"token string\">\"web/departManange?tenantId=12121212\"</span><span class=\"token operator\">></span>xxx<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>pathname<span class=\"token operator\">:</span><span class=\"token string\">\"/web/departManange?tenantId\"</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">.</span>tenantId<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n读取参数用<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>优缺点同 params</p>\n</blockquote>\n<h5 id=\"5-react-hooks中获取路由参数的方式\"><a class=\"markdownIt-Anchor\" href=\"#5-react-hooks中获取路由参数的方式\">#</a> 5、react Hooks 中获取路由参数的方式：</h5>\n<p>1. 通过 hooks 钩子函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useHistory<span class=\"token punctuation\">,</span>useLocation<span class=\"token punctuation\">,</span>useParams<span class=\"token punctuation\">,</span>useMatch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> history <span class=\"token operator\">=</span> <span class=\"token function\">useHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>2. 通过函数 props 参数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> location <span class=\"token operator\">=</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'home'</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Banner <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
            "tags": [
                "React",
                "React-Router"
            ]
        },
        {
            "id": "http://example.com/2020/10/12/React-%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/",
            "url": "http://example.com/2020/10/12/React-%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/",
            "title": "React 高级指引",
            "date_published": "2020-10-12T03:41:02.000Z",
            "content_html": "<h2 id=\"无障碍表单\"><a class=\"markdownIt-Anchor\" href=\"#无障碍表单\">#</a> 无障碍表单</h2>\n<h3 id=\"标记\"><a class=\"markdownIt-Anchor\" href=\"#标记\">#</a> 标记</h3>\n<p>所有的 HTML 表单控制，例如  <code>&lt;input&gt;</code>  和  <code>&lt;textarea&gt;</code>  ，都需要被标注来实现无障碍辅助功能。我们需要提供屏幕朗读器以解释性标注。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"namedInput\"</span><span class=\"token operator\">></span>Name<span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token string\">\"namedInput\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"refs-转发\"><a class=\"markdownIt-Anchor\" href=\"#refs-转发\">#</a> Refs 转发</h2>\n<blockquote>\n<p>Ref 转发是一项将 <a href=\"https://reactjs.bootcss.com/docs/refs-and-the-dom.html\">ref</a> 自动地通过组件传递到其一子组件的技巧。对于大多数应用中的组件来说，这通常不是必需的。但其对某些组件，尤其是可重用的组件库是很有用的。最常见的案例如下所述。</p>\n<p>简单来说 — 进行 DOM 操作  – 官方建议不要优先使用 Ref，而考虑使用 state</p>\n</blockquote>\n<h3 id=\"react-提供3种方式进行-ref使用\"><a class=\"markdownIt-Anchor\" href=\"#react-提供3种方式进行-ref使用\">#</a> react 提供 3 种方式进行 ref 使用</h3>\n<ol>\n<li>字符串的方式</li>\n<li>回调函数 (推荐)\n<ul>\n<li>就是在 dom 节点上或者组件上挂载函数，函数的形参 试 dom 节点，达到的效果和字符串是一样的，都是获取值的引用</li>\n</ul>\n</li>\n<li>React.createRef () —  react16.3 新提供的方式。</li>\n</ol>\n<h4 id=\"字符串的方式\"><a class=\"markdownIt-Anchor\" href=\"#字符串的方式\">#</a> 字符串的方式</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">hanle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refs<span class=\"token punctuation\">.</span>demoref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> \n      ref <span class=\"token operator\">=</span> <span class=\"token string\">'demoref'</span>\n      placeholder<span class=\"token operator\">=</span><span class=\"token string\">'请输入...'</span><span class=\"token operator\">/</span><span class=\"token operator\">></span> \n      <span class=\"token operator\">&lt;</span>button onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hanle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"回调函数\"><a class=\"markdownIt-Anchor\" href=\"#回调函数\">#</a> 回调函数</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">hanle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>demoref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>input\n              type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n              ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>demoref <span class=\"token operator\">=</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n              placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入...\"</span>\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n            <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hanle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>MyComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"reactcreateref\"><a class=\"markdownIt-Anchor\" href=\"#reactcreateref\">#</a> React.createRef</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>border <span class=\"token operator\">=</span> <span class=\"token string\">'1px solid red'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">123123</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>MyComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"fragments\"><a class=\"markdownIt-Anchor\" href=\"#fragments\">#</a> Fragments</h2>\n<blockquote>\n<p>React 中的一个常见模式是一个组件返回多个元素。Fragments 允许你将子列表分组，而无需向 DOM 添加额外节点。</p>\n</blockquote>\n<p>有时，语义化的 HTML 会被破坏。比如当在 JSX 中使用  <code>&lt;div&gt;</code>  元素来实现 React 代码功能的时候，又或是在使用列表（ <code>&lt;ol&gt;</code> ，  <code>&lt;ul&gt;</code>  和  <code>&lt;dl&gt;</code> ）和 HTML  <code>&lt;table&gt;</code>  时。 在这种情况下，我们应该使用 <a href=\"https://reactjs.bootcss.com/docs/fragments.html\">React Fragments</a> 来组合各个组件</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span>World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"短语法\"><a class=\"markdownIt-Anchor\" href=\"#短语法\">#</a> 短语法</h3>\n<p>你可以使用一种新的，且更简短的语法来声明 Fragments。它看起来像空标签：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span>World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"带-key-的-fragments\"><a class=\"markdownIt-Anchor\" href=\"#带-key-的-fragments\">#</a> 带 key 的 Fragments</h3>\n<p>使用显式  <code>&lt;React.Fragment&gt;</code>  语法声明的片段可能具有 key。一个使用场景是将一个集合映射到一个 Fragments 数组 - 举个例子，创建一个描述列表：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>dl<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// 没有`key`，React 会发出一个关键警告</span>\n        <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment key<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>dt<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dt<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>dd<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dd<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dl<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>key</code>  是唯一可以传递给  <code>Fragment</code>  的属性。未来我们可能会添加对其他属性的支持，例如事件。</p>\n<h2 id=\"refs-and-the-dom\"><a class=\"markdownIt-Anchor\" href=\"#refs-and-the-dom\">#</a> Refs and the DOM</h2>\n<blockquote>\n<p>Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素</p>\n</blockquote>\n<p>在典型的 React 数据流中，<a href=\"https://reactjs.bootcss.com/docs/components-and-props.html\">props</a> 是父组件与子组件交互的唯一方式。要修改一个子组件，你需要使用新的 props 来重新渲染它。但是，在某些情况下，你需要在典型数据流之外强制修改子组件。被修改的子组件可能是一个 React 组件的实例，也可能是一个 DOM 元素。对于这两种情况，React 都提供了解决办法。</p>\n<h3 id=\"何时使用-refs\"><a class=\"markdownIt-Anchor\" href=\"#何时使用-refs\">#</a> 何时使用 Refs</h3>\n<p>下面是几个适合使用 refs 的情况：</p>\n<ul>\n<li>管理焦点，文本选择或媒体播放。</li>\n<li>触发强制动画。</li>\n<li>集成第三方 DOM 库。</li>\n</ul>\n<p>避免使用 refs 来做任何可以通过声明式实现来完成的事情。</p>\n<p>举个例子，避免在  <code>Dialog</code>  组件里暴露  <code>open()</code>  和  <code>close()</code>  方法，最好传递  <code>isOpen</code>  属性。</p>\n<h3 id=\"勿过度使用-refs\"><a class=\"markdownIt-Anchor\" href=\"#勿过度使用-refs\">#</a> 勿过度使用 Refs</h3>\n<p>你可能首先会想到使用 refs 在你的 app 中 “让事情发生”。如果是这种情况，请花一点时间，认真再考虑一下 state 属性应该被安排在哪个组件层中。通常你会想明白，让更高的组件层级拥有这个 state，是更恰当的。查看 <a href=\"https://reactjs.bootcss.com/docs/lifting-state-up.html\">状态提升</a> 以获取更多有关示例。</p>\n<h3 id=\"创建-refs\"><a class=\"markdownIt-Anchor\" href=\"#创建-refs\">#</a> 创建 Refs</h3>\n<blockquote>\n<p>React.createRef</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"为-dom-元素添加-ref\"><a class=\"markdownIt-Anchor\" href=\"#为-dom-元素添加-ref\">#</a> 为 DOM 元素添加 ref</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>border <span class=\"token operator\">=</span> <span class=\"token string\">'1px solid red'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">123123</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>MyComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"为-class-组件添加-ref\"><a class=\"markdownIt-Anchor\" href=\"#为-class-组件添加-ref\">#</a> 为 class 组件添加 Ref</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoFocusTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>CustomTextInput ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"refs-与函数组件\"><a class=\"markdownIt-Anchor\" href=\"#refs-与函数组件\">#</a> Refs 与函数组件</h4>\n<blockquote>\n<p>默认情况下，<strong>你不能在函数组件上使用  <code>ref</code>  属性</strong>，因为它们没有实例</p>\n</blockquote>\n<p>如果要在函数组件中使用  <code>ref</code> ，你可以使用 <a href=\"https://reactjs.bootcss.com/docs/forwarding-refs.html\"> <code>forwardRef</code> </a>（可与 <a href=\"https://reactjs.bootcss.com/docs/hooks-reference.html#useimperativehandle\"> <code>useImperativeHandle</code> </a> 结合使用），或者可以将该组件转化为 class 组件。</p>\n<p>不管怎样，你可以<strong>在函数组件内部使用  <code>ref</code>  属性</strong>，只要它指向一个 DOM 元素或 class 组件：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 这里必须声明 textInput，这样 ref 才可以引用它</span>\n  <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>textInput<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span>\n        value<span class=\"token operator\">=</span><span class=\"token string\">\"Focus the text input\"</span>\n        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleClick<span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "React"
            ]
        },
        {
            "id": "http://example.com/2020/10/10/react%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/",
            "url": "http://example.com/2020/10/10/react%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/",
            "title": "React基本认识与环境搭建&JSX&相关语法知识点",
            "date_published": "2020-10-10T03:50:24.000Z",
            "content_html": "<h2 id=\"资料速览\"><a class=\"markdownIt-Anchor\" href=\"#资料速览\">#</a> 资料速览</h2>\n<p>React 官网：<a href=\"https://reactjs.bootcss.com/docs/hello-world.html\">https://reactjs.bootcss.com/docs/hello-world.html</a></p>\n<p><a href=\"https://www.html.cn/create-react-app/\">Create React App 中文文档</a></p>\n<p><a href=\"https://www.html.cn/create-react-app/docs/getting-started\">快速入门</a><a href=\"https://react.css88.com/community/support.html\">帮助</a><a href=\"https://www.github.com/facebook/create-react-app\"> GitHub</a></p>\n<p>TypeScript 中文手册：[这篇快速上手指南会教你如何将 TypeScript 与<a href=\"http://facebook.github.io/react/\"> React</a> 结合起来使用](<a href=\"https://typescript.bootcss.com/tutorials/react.html\">https://typescript.bootcss.com/tutorials/react.html</a>)</p>\n<p>React Router 和 @ reach /router 的未来：<u>文档</u>：<a href=\"https://reactrouter.com/web/api/NavLink/activeclassname-string\">https://reactrouter.com/web/api/NavLink/activeclassname-string</a></p>\n<h2 id=\"react-开发环境的搭建\"><a class=\"markdownIt-Anchor\" href=\"#react-开发环境的搭建\">#</a> react 开发环境的搭建</h2>\n<ol>\n<li>react.js            //  react 核心文件</li>\n<li>react-dom.js    // 渲染页面中的 DOM，必须依赖 react 核心文件</li>\n<li>babel.js          // ES6 =&gt; ES5</li>\n</ol>\n<p><strong>下载</strong></p>\n<ul>\n<li>\n<p>react 核心包   ：  <code>npm i react --save</code></p>\n</li>\n<li>\n<p>React-dom :  <code>npm i react-dom --save</code></p>\n</li>\n<li>\n<p>Babel:  <code>npm install --save @babel/standalone</code>  : 多用于开发环境测试简单 demo：<a href=\"https://babeljs.io/docs/en/babel-standalone\">详细介绍</a> ；如果您在生产中使用 Babel，通常不应使用 @ babel /standalone。相反，您应该使用在 Node.js 上运行的构建系统（例如 Webpack，Rollup 或 Parcel）来提前转换 JS。 <a href=\"https://www.babeljs.cn/docs/#jsx-%E4%B8%8E-react\">提前转换 js 的用法</a></p>\n</li>\n</ul>\n<p>但是，@ babel /standalone 有一些有效的用例：</p>\n<ul>\n<li>它提供了使用 Babel 进行原型制作的简便方法。使用 @ babel /standalone，您可以在 HTML 中仅使用一个简单的脚本标签就开始使用 Babel。</li>\n<li>实时编译用户提供的 JavaScript 的站点，例如<a href=\"https://jsfiddle.net/\"> JSFiddle</a>，<a href=\"https://jsbin.com/\">JS Bin</a>，<a href=\"http://babeljs.io/repl/\">Babel 站点上的 REPL</a>，<a href=\"https://jsitor.com/\">JSitor</a> 等。</li>\n<li>直接嵌入 JavaScript 引擎（例如 V8）并希望使用 Babel 进行编译的应用</li>\n<li>想要使用 JavaScript 作为脚本语言来扩展应用程序本身的应用程序，包括 ES2015 提供的所有功能。</li>\n<li>其他非 Node.js 环境（<a href=\"http://reactjs.net/\">ReactJS.NET</a>，<a href=\"https://github.com/babel/ruby-babel-transpiler\">ruby-babel-transpiler</a>，<a href=\"https://github.com/talyssonoc/php-babel-transpiler\">php-babel-transpiler</a> 等）。</li>\n</ul>\n<p>基本结构：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1.0\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Document<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"node_modules/react/umd/react.development.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"node_modules/react-dom/umd/react-dom.development.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"node_modules/@babel/standalone/babel.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>  创建dom根结点 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/babel\"</span><span class=\"token operator\">></span>\n        ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>hello React<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/NpCnFx.png\" alt=\"NpCnFx\"></p>\n<h3 id=\"jsx注释\"><a class=\"markdownIt-Anchor\" href=\"#jsx注释\">#</a> jsx 注释</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> word <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>\n           <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 这是注释 */</span><span class=\"token punctuation\">&#125;</span> \n            hello world\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"jsx多行标签需要一个父元素包裹\"><a class=\"markdownIt-Anchor\" href=\"#jsx多行标签需要一个父元素包裹\">#</a> JSX 多行标签需要一个父元素包裹</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> word <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">12313</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span> \n            <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token number\">123132</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"jsx-变量\"><a class=\"markdownIt-Anchor\" href=\"#jsx-变量\">#</a> JSX 变量</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/babel\"</span><span class=\"token operator\">></span>\n        <span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n        <span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span>\n        <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            name<span class=\"token operator\">:</span><span class=\"token string\">'zc'</span><span class=\"token punctuation\">,</span>\n            age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">你的名字是 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,年龄是 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>obj<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">let</span> word <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>first<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>last<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n           <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n        ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/q28oVY.png\" alt=\"q28oVY\"></p>\n<h3 id=\"渲染数组\"><a class=\"markdownIt-Anchor\" href=\"#渲染数组\">#</a> 渲染数组</h3>\n  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'哈哈哈哈哈1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'哈哈哈哈哈2'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'哈哈哈哈哈3'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'哈哈哈哈哈4'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'哈哈哈哈哈5'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'哈哈哈哈哈6'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'哈哈哈哈哈7'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> word <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">&#123;</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span> \n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>   \n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>   \nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"属性设置\"><a class=\"markdownIt-Anchor\" href=\"#属性设置\">#</a> 属性设置</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'点我去百度'</span>\n<span class=\"token keyword\">let</span> linkUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://baidu.com'</span>\n<span class=\"token keyword\">let</span> myDom <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>a className<span class=\"token operator\">=</span><span class=\"token string\">'demo'</span> href<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>linkUrl<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意</strong>： 在 JSX 中 不能使用 class，这个属性，因为 class 是 js 的关键字。  –  代替使用 className</p>\n<h3 id=\"无状态组件-函数组件\"><a class=\"markdownIt-Anchor\" href=\"#无状态组件-函数组件\">#</a> 无状态组件 (函数组件)</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>  创建dom根结点 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/babel\"</span><span class=\"token operator\">></span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">Com</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>zhou chen<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n                \n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Com<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"无状态组件传递参数\"><a class=\"markdownIt-Anchor\" href=\"#无状态组件传递参数\">#</a> 无状态组件传递参数</h3>\n<blockquote>\n<p>Props</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Father</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n               <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                   <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>我是一个无状态函数组件 <span class=\"token operator\">--</span> 父亲<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n                   <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>   \n                   <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>   \n                   <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>   \n               <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n           <span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">&#125;</span>\n\n       <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'我是一个变量'</span>\n       <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n           name<span class=\"token operator\">:</span><span class=\"token string\">'zc'</span><span class=\"token punctuation\">,</span>\n           age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n           sex <span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n       <span class=\"token punctuation\">&#125;</span>\n       ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Father <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>obj<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"类组件传递参数\"><a class=\"markdownIt-Anchor\" href=\"#类组件传递参数\">#</a> 类组件传递参数</h3>\n<blockquote>\n<p><a href=\"http://this.props.xxx\">this.props.xxx</a></p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCom</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>MySon<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>   \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'我是一个变量'</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span><span class=\"token string\">'zc'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n  sex <span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>MyCom <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>obj<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/hThktC.png\" alt=\"hThktC\"></p>\n<h3 id=\"无状态组件的props验证-和默认值\"><a class=\"markdownIt-Anchor\" href=\"#无状态组件的props验证-和默认值\">#</a> 无状态组件的 props 验证 和默认值</h3>\n<blockquote>\n<p>随着你的应用程序不断增长，你可以通过类型检查捕获大量错误。对于某些应用程序来说，你可以使用 <a href=\"https://flow.org/\">Flow</a> 或 <a href=\"https://www.typescriptlang.org/\">TypeScript</a> 等 JavaScript 扩展来对整个应用程序做类型检查。但即使你不使用这些扩展，React 也内置了一些类型检查的功能。要在组件的 props 上进行类型检查，你只需配置特定的  <code>propTypes</code>  属性：</p>\n<p>默认值：您可以通过配置特定的  <code>defaultProps</code>  属性来定义  <code>props</code>  的默认值：  ：react 版本要求 16 以后；</p>\n<p>props 验证： <code>propTypes </code>  验证类型</p>\n<p>官网用法：<a href=\"https://zh-hans.reactjs.org/docs/typechecking-with-proptypes.html\">官网</a></p>\n</blockquote>\n<p><strong>默认值：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Com</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nCom<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  msg <span class=\"token operator\">:</span><span class=\"token string\">'默认值'</span>\n<span class=\"token punctuation\">&#125;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Com <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>props 类型验证</strong>：</p>\n<ul>\n<li>引用 prop-types 库。 —  <code>npm i prop-types --save</code></li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/babel\"</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Com</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 默认值</span>\nCom<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  msg <span class=\"token operator\">:</span><span class=\"token string\">'默认值'</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// props 类型验证</span>\nCom<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  msg <span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span>PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">&#125;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Com msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'1111'</span><span class=\"token punctuation\">&#125;</span> age <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/VJA0vp.png\" alt=\"VJA0vp\"></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nGreeting<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"类组件的props验证-和默认值\"><a class=\"markdownIt-Anchor\" href=\"#类组件的props验证-和默认值\">#</a> 类组件的 props 验证 和默认值</h3>\n<blockquote>\n<p>默认值：您可以通过配置特定的  <code>defaultProps</code>  属性来定义  <code>props</code>  的默认值：  ：react 版本要求 16 以后；</p>\n<p>props 验证： <code>propTypes </code>  验证类型</p>\n</blockquote>\n<p><strong>默认值</strong> ：( <strong>传统写法</strong> )</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCom</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>   \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 传统写法 -- 默认值</span>\nMyCom<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span><span class=\"token string\">'zc'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'我是一个变量'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>MyCom <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>类型验证：</strong>(<strong>传统写法</strong>)</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCom</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>   \n<span class=\"token punctuation\">&#125;</span>\n\nMyCom<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span><span class=\"token string\">'zc'</span>\n<span class=\"token punctuation\">&#125;</span>  \n\nMyCom<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">&#125;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>MyCom name<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>利用 static</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCom</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n              name<span class=\"token operator\">:</span><span class=\"token string\">'zc'</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token keyword\">static</span> propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n              name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n                      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>   \n      <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"类组件state状态\"><a class=\"markdownIt-Anchor\" href=\"#类组件state状态\">#</a> 类组件 state 状态</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// state状态</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                msg <span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n                <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>    \n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n\n   ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Father<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"setstate是异步的\"><a class=\"markdownIt-Anchor\" href=\"#setstate是异步的\">#</a> setState 是异步的</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                   msg <span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span>\n               <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token punctuation\">&#125;</span>\n\n           <span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n                   msg<span class=\"token operator\">:</span><span class=\"token string\">'zczczczc'</span>\n               <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n                   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>    \n\n           <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n                   <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                       <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>    \n                       <span class=\"token operator\">&lt;</span>button onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n                   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n               <span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">&#125;</span>\n\n     <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"字符串标签插入字符串-html\"><a class=\"markdownIt-Anchor\" href=\"#字符串标签插入字符串-html\">#</a> 字符串标签插入（字符串 =&gt; HTML）</h3>\n<blockquote>\n<p>官网说明：<a href=\"https://reactjs.org/docs/dom-elements.html\">https://reactjs.org/docs/dom-elements.html</a></p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>__html<span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>newHtml<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"事件绑定-和-this\"><a class=\"markdownIt-Anchor\" href=\"#事件绑定-和-this\">#</a> 事件绑定 和 this</h3>\n<blockquote>\n<p>React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同：</p>\n<ul>\n<li>React 事件的命名采用小驼峰式（camelCase），而不是纯小写。</li>\n<li>使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。</li>\n</ul>\n</blockquote>\n<h4 id=\"修改-this指向\"><a class=\"markdownIt-Anchor\" href=\"#修改-this指向\">#</a> 修改 this 指向</h4>\n<ol>\n<li>bind 方式显示绑定</li>\n<li>函数通过箭头函数进行创建</li>\n<li>constructor 中提前进行绑定</li>\n<li>把事件的调用写成箭头函数的调用方式</li>\n</ol>\n<h4 id=\"bind-方式显示绑定\"><a class=\"markdownIt-Anchor\" href=\"#bind-方式显示绑定\">#</a> bind 方式显示绑定</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Com</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n           <span class=\"token punctuation\">&#125;</span>\n\n           <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n\n           <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n                   <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">121131</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n                        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n               <span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"函数通过箭头函数进行创建\"><a class=\"markdownIt-Anchor\" href=\"#函数通过箭头函数进行创建\">#</a> 函数通过箭头函数进行创建</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Com</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token function-variable function\">handle</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n                  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                       <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">121131</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n                       <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n                   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n              <span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"constructor-中提前进行绑定\"><a class=\"markdownIt-Anchor\" href=\"#constructor-中提前进行绑定\">#</a> constructor 中提前进行绑定</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Com</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n                  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                       <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">121131</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n                       <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n                   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n              <span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"把事件的调用写成箭头函数的调用方式\"><a class=\"markdownIt-Anchor\" href=\"#把事件的调用写成箭头函数的调用方式\">#</a> 把事件的调用写成箭头函数的调用方式</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Com</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n                  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                       <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">121131</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n                       <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n                   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n              <span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"传递参数\"><a class=\"markdownIt-Anchor\" href=\"#传递参数\">#</a> 传递参数</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"event事件对象\"><a class=\"markdownIt-Anchor\" href=\"#event事件对象\">#</a> <strong>Event 事件对象</strong></h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Com</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">&#125;</span>\n\n           <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n\n           <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n                   <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">121131</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n                        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n               <span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"条件渲染\"><a class=\"markdownIt-Anchor\" href=\"#条件渲染\">#</a> 条件渲染</h3>\n<blockquote>\n<p>在 React 中，你可以创建不同的组件来封装各种你需要的行为。然后，依据应用的不同状态，你可以只渲染对应状态下的部分内容。</p>\n<p>React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"> <code>if</code> </a> 或者<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">条件运算符</a>去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI。</p>\n</blockquote>\n<h3 id=\"状态提升\"><a class=\"markdownIt-Anchor\" href=\"#状态提升\">#</a> 状态提升</h3>\n<blockquote>\n<p>通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demoa</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n       <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n         <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>我的demoa <span class=\"token operator\">--</span><span class=\"token operator\">--</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n       <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demob</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n       <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n         <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>我的demob  <span class=\"token operator\">--</span><span class=\"token operator\">--</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n       <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">class</span> <span class=\"token class-name\">Com1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n         msg<span class=\"token operator\">:</span> <span class=\"token string\">'我是2个组件都用的数据'</span>\n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n\n   <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n           msg<span class=\"token operator\">:</span><span class=\"token string\">'我被修改了'</span>\n       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n       <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n         <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>我是组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n         <span class=\"token operator\">&lt;</span>Demoa msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n         <span class=\"token operator\">&lt;</span>Demob msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n         <span class=\"token operator\">&lt;</span>button onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>修改<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n       <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Com1 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/uPic/AiYlXZ.png\" alt=\"AiYlXZ\"></p>\n<h2 id=\"相关error\"><a class=\"markdownIt-Anchor\" href=\"#相关error\">#</a> 相关 Error</h2>\n<p><img src=\"http://static.zxinc520.com/uPic/jDVqvD.png\" alt=\"jDVqvD\"></p>\n<p><strong>错误原因：组件名字首写字母要大写字母。</strong></p>\n<p><img src=\"http://static.zxinc520.com/uPic/6dGfpO.png\" alt=\"6dGfpO\"></p>\n<p>错误原因：<strong>React.component</strong>  =&gt;  **React.Component.    拼写错误。</p>\n<p><img src=\"http://static.zxinc520.com/uPic/20ng4N.png\" alt=\"20ng4N\"></p>\n<p><strong>错误原因：class 类组件、super () 没有被调用。</strong></p>\n<p><img src=\"http://static.zxinc520.com/uPic/Tb902w.png\" alt=\"Tb902w\"></p>\n<p>错误原因：父组件传递过来的参数 为调用某一项～</p>\n",
            "tags": [
                "React"
            ]
        },
        {
            "id": "http://example.com/2020/09/24/Vue3%20%E7%BB%84%E5%90%88%E5%BC%8F%20API/",
            "url": "http://example.com/2020/09/24/Vue3%20%E7%BB%84%E5%90%88%E5%BC%8F%20API/",
            "title": "Vue3 组合式 API",
            "date_published": "2020-09-24T13:44:38.000Z",
            "content_html": "<h1 id=\"基本范例\"><a class=\"markdownIt-Anchor\" href=\"#基本范例\">#</a> 基本范例</h1>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"increment\"</span><span class=\"token operator\">></span>\n    Count is<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> state<span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> double is<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> state<span class=\"token punctuation\">.</span>double <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive<span class=\"token punctuation\">,</span> computed <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        double<span class=\"token operator\">:</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        state<span class=\"token punctuation\">,</span>\n        increment<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"vue-组合式-api\"><a class=\"markdownIt-Anchor\" href=\"#vue-组合式-api\">#</a> <a href=\"https://vue3js.cn/vue-composition-api/\">Vue 组合式 API</a></h1>\n<h2 id=\"setup\"><a class=\"markdownIt-Anchor\" href=\"#setup\">#</a>  <code>setup</code></h2>\n",
            "tags": [
                "Vue3"
            ]
        },
        {
            "id": "http://example.com/2020/09/23/vue3-%E7%9A%84%E4%BC%98%E5%8A%BF/",
            "url": "http://example.com/2020/09/23/vue3-%E7%9A%84%E4%BC%98%E5%8A%BF/",
            "title": "vue3 比 vue2.x 版本的优势",
            "date_published": "2020-09-23T14:29:51.000Z",
            "content_html": "<blockquote>\n<p>—— 先学习 Vue2.x</p>\n<ul>\n<li>Vue3.0 并不是推倒从来，很多 2.x 内容依然被保存</li>\n</ul>\n<p>—— 先学习 Typescript</p>\n<ul>\n<li>Vue3.0 采用 TS 重写，必须学 TS</li>\n</ul>\n</blockquote>\n<h3 id=\"一-vue30-的六大亮点\"><a class=\"markdownIt-Anchor\" href=\"#一-vue30-的六大亮点\">#</a> 一、Vue3.0 的六大亮点</h3>\n<ol>\n<li>Performance：<strong>性能比 Vue2.x 快 1.2 ～ 2 倍</strong></li>\n<li>Tree shaking support：<strong>按需编译，体积比 Vue2.x 更小</strong></li>\n<li>Composition API <strong>*</strong>：<strong>组合式 API（类似 React Hooks）</strong></li>\n<li>Better Typescript support：<strong>更好的 TS 支持</strong></li>\n<li>Custom Renderer API：<strong>暴露了自定义渲染 API</strong></li>\n<li>Fragment，Teleport（Protal），Suspense：<strong>更先进的组件</strong></li>\n</ol>\n<h3 id=\"二-vue30-是如何变快的\"><a class=\"markdownIt-Anchor\" href=\"#二-vue30-是如何变快的\">#</a> 二、Vue3.0 是如何变快的</h3>\n<blockquote>\n<p>Vue3 源码编译工具：<a href=\"https://vue-next-template-explorer.netlify.app/#%7B%22src%22%3A%22%3Cdiv%20id%3D%5C%22app%5C%22%3E%5Cn%20%20%20%20%3Ch1%3E%E6%8A%80%E6%9C%AF%E6%91%B8%E9%B1%BC%3C%2Fh1%3E%5Cn%20%20%20%20%3Cp%3E%E4%BB%8A%E5%A4%A9%E5%A4%A9%E6%B0%94%E7%9C%9F%E4%B8%8D%E9%94%99%3C%2Fp%3E%5Cn%5Cn%20%20%20%20%3Cdiv%3E%7B%7Bname%7D%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20%3Aclass%3D%5C%22%7Bred%3AisRed%7D%5C%22%3E%E6%91%B8%E9%B1%BC%E7%AC%A6%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cbutton%20%40click%3D%5C%22handleClick%5C%22%3E%E6%88%B3%E6%88%91%3C%2Fbutton%3E%5Cn%20%20%20%20%5Cn%20%20%20%20%5Cn%3C%2Fdiv%3E%22%2C%22ssr%22%3Afalse%2C%22options%22%3A%7B%22mode%22%3A%22module%22%2C%22prefixIdentifiers%22%3Afalse%2C%22optimizeImports%22%3Afalse%2C%22hoistStatic%22%3Afalse%2C%22cacheHandlers%22%3Afalse%2C%22scopeId%22%3Anull%2C%22ssrCssVars%22%3A%22%7B%20color%20%7D%22%2C%22bindingMetadata%22%3A%7B%22TestComponent%22%3A%22setup%22%2C%22foo%22%3A%22setup%22%2C%22bar%22%3A%22props%22%7D%2C%22optimizeBindings%22%3Afalse%7D%7D\">Vue3 模版编译工具</a></p>\n<p>Vue2.x 模版编译工具：<a href=\"https://template-explorer.vuejs.org/#%3Cdiv%20id%3D%22app%22%3E%7B%7B%20msg%20%7D%7D%3C%2Fdiv%3E\">Vue2.x 模版编译工具</a></p>\n</blockquote>\n<h3 id=\"1-diff-方法优化\"><a class=\"markdownIt-Anchor\" href=\"#1-diff-方法优化\">#</a> 1、diff 方法优化</h3>\n<ul>\n<li>Vue2 中的虚拟 DOM 是进行全亮的对比</li>\n<li>Vue3 新增了静态标记（PatchFlag）\n<ul>\n<li>在与上次虚拟节点进行对比的时候，只对比带有 patch flag 的节点</li>\n<li>并且可以通过 flag 的信息得知当前节点要对比的具体内容</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>技术摸鱼<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>今天天气真不错<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createVNode <span class=\"token keyword\">as</span> _createVNode<span class=\"token punctuation\">,</span> toDisplayString <span class=\"token keyword\">as</span> _toDisplayString<span class=\"token punctuation\">,</span> openBlock <span class=\"token keyword\">as</span> _openBlock<span class=\"token punctuation\">,</span> createBlock <span class=\"token keyword\">as</span> _createBlock <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_ctx<span class=\"token punctuation\">,</span> _cache<span class=\"token punctuation\">,</span> $props<span class=\"token punctuation\">,</span> $setup<span class=\"token punctuation\">,</span> $data<span class=\"token punctuation\">,</span> $options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">_openBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_createBlock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"app\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"技术摸鱼\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"今天天气真不错\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_toDisplayString</span><span class=\"token punctuation\">(</span>_ctx<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token comment\">/* TEXT */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>red<span class=\"token operator\">:</span>_ctx<span class=\"token punctuation\">.</span>isRed<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"摸鱼符\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token comment\">/* CLASS */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> onClick<span class=\"token operator\">:</span> _ctx<span class=\"token punctuation\">.</span>handleClick <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"戳我\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token comment\">/* PROPS */</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"onClick\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-hoiststatic-静态提升\"><a class=\"markdownIt-Anchor\" href=\"#2-hoiststatic-静态提升\">#</a> 2、hoistStatic 静态提升</h3>\n<ul>\n<li>Vue2 中无论元素是否参与更新，每次都会重新创建</li>\n<li>Vue3 中对于不参与更新的元素，只会被创建一次，之后会在每次渲染时被不停的复用</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>技术摸鱼<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>今天天气真不错<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token operator\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"&#123;red:isRed&#125;\"</span><span class=\"token operator\">></span>摸鱼符<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"handleClick\"</span><span class=\"token operator\">></span>戳我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createVNode <span class=\"token keyword\">as</span> _createVNode<span class=\"token punctuation\">,</span> toDisplayString <span class=\"token keyword\">as</span> _toDisplayString<span class=\"token punctuation\">,</span> openBlock <span class=\"token keyword\">as</span> _openBlock<span class=\"token punctuation\">,</span> createBlock <span class=\"token keyword\">as</span> _createBlock <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span>\n\n<span class=\"token keyword\">const</span> _hoisted_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"app\"</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> _hoisted_2 <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span><span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"技术摸鱼\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token comment\">/* HOISTED */</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> _hoisted_3 <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span><span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"今天天气真不错\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token comment\">/* HOISTED */</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_ctx<span class=\"token punctuation\">,</span> _cache<span class=\"token punctuation\">,</span> $props<span class=\"token punctuation\">,</span> $setup<span class=\"token punctuation\">,</span> $data<span class=\"token punctuation\">,</span> $options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">_openBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_createBlock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> _hoisted_1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    _hoisted_2<span class=\"token punctuation\">,</span>\n    _hoisted_3<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_toDisplayString</span><span class=\"token punctuation\">(</span>_ctx<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token comment\">/* TEXT */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>red<span class=\"token operator\">:</span>_ctx<span class=\"token punctuation\">.</span>isRed<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"摸鱼符\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token comment\">/* CLASS */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> onClick<span class=\"token operator\">:</span> _ctx<span class=\"token punctuation\">.</span>handleClick <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"戳我\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token comment\">/* PROPS */</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"onClick\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Check the console for the AST</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-cachehandlers-事件侦听器缓存\"><a class=\"markdownIt-Anchor\" href=\"#3-cachehandlers-事件侦听器缓存\">#</a> 3、cacheHandlers 事件侦听器缓存</h3>\n<ul>\n<li>默认情况下 onClick 会被视为动态绑定，所以每次都会去追踪它的变化</li>\n<li>但是因为是同一个函数，所以没有追踪变化，直接缓存起来复用即可</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"handleClick\"</span><span class=\"token operator\">></span>戳我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createVNode <span class=\"token keyword\">as</span> _createVNode<span class=\"token punctuation\">,</span> openBlock <span class=\"token keyword\">as</span> _openBlock<span class=\"token punctuation\">,</span> createBlock <span class=\"token keyword\">as</span> _createBlock <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_ctx<span class=\"token punctuation\">,</span> _cache<span class=\"token punctuation\">,</span> $props<span class=\"token punctuation\">,</span> $setup<span class=\"token punctuation\">,</span> $data<span class=\"token punctuation\">,</span> $options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">_openBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_createBlock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"app\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n      onClick<span class=\"token operator\">:</span> _cache<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>_cache<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>_ctx<span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"戳我\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Check the console for the AST</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"4-ssr-渲染\"><a class=\"markdownIt-Anchor\" href=\"#4-ssr-渲染\">#</a> 4、SSR 渲染</h3>\n<ul>\n<li>当有大量静态的内容的时候，这些内容会被当作纯字符串推进一个 buffer 里面；即使存在动态绑定，会通过模版值嵌入进去，这样会比通过虚拟 dom 来渲染快上很多很多</li>\n<li>当静态内容大到一定的量级时候，会用_createStaticVNode 方法在客户端去生成一个 static node，这些静态 node，会被直接 innerHtml，就不需要创建对象，然后根据对象渲染</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>\n  createVNode <span class=\"token keyword\">as</span> _createVNode<span class=\"token punctuation\">,</span>\n  openBlock <span class=\"token keyword\">as</span> _openBlock<span class=\"token punctuation\">,</span>\n  createBlock <span class=\"token keyword\">as</span> _createBlock<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_ctx<span class=\"token punctuation\">,</span> _cache<span class=\"token punctuation\">,</span> $props<span class=\"token punctuation\">,</span> $setup<span class=\"token punctuation\">,</span> $data<span class=\"token punctuation\">,</span> $options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token function\">_openBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">_createBlock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"app\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"技术摸鱼\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"今天天气真不错\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token constant\">SSR</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span> <span class=\"token operator\">-</span> <span class=\"token constant\">SSR</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mergeProps <span class=\"token keyword\">as</span> _mergeProps <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>\n  ssrResolveCssVars <span class=\"token keyword\">as</span> _ssrResolveCssVars<span class=\"token punctuation\">,</span>\n  ssrRenderAttrs <span class=\"token keyword\">as</span> _ssrRenderAttrs<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vue/server-renderer\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ssrRender</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">_ctx<span class=\"token punctuation\">,</span>\n  _push<span class=\"token punctuation\">,</span>\n  _parent<span class=\"token punctuation\">,</span>\n  _attrs<span class=\"token punctuation\">,</span>\n  $props<span class=\"token punctuation\">,</span>\n  $setup<span class=\"token punctuation\">,</span>\n  $data<span class=\"token punctuation\">,</span>\n  $options</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> _cssVars <span class=\"token operator\">=</span> <span class=\"token function\">_ssrResolveCssVars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> color<span class=\"token operator\">:</span> _ctx<span class=\"token punctuation\">.</span>color <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">_push</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">_ssrRenderAttrs</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">_mergeProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"app\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> _attrs<span class=\"token punctuation\">,</span> _cssVars<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">>&lt;h1>技术摸鱼&lt;/h1>&lt;p>今天天气真不错&lt;/p>&lt;/div></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Check the console for the AST</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Vue3"
            ]
        },
        {
            "id": "http://example.com/2020/09/22/Vue3+%20&%20Vue-CLI3+%20%E5%BC%80%E5%8F%91%E7%94%9F%E6%80%81%E5%9C%88%E8%B5%84%E8%AE%AF/",
            "url": "http://example.com/2020/09/22/Vue3+%20&%20Vue-CLI3+%20%E5%BC%80%E5%8F%91%E7%94%9F%E6%80%81%E5%9C%88%E8%B5%84%E8%AE%AF/",
            "title": "Vue3+ Vue-CLI3+ 开发生态圈资讯",
            "date_published": "2020-09-22T14:14:58.000Z",
            "content_html": "<p>🚀 欢迎 <code>Star</code> ，后续会不断更新。<br>\n🇨🇳 最后更新日期：2️⃣0️⃣2️⃣0️⃣ <code>/</code> 0️⃣9️⃣ <code>/</code> 1️⃣9️⃣</p>\n<p>【2020】 ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡--------------- 【2021】</p>\n<p>Twitter vue3: <strong>vue 3 will be available by the end of Q2.</strong></p>\n<p>9 月 18 日星期五，Vue 的作者尤雨溪发表主题演讲，正式发布 Vue3.0 并回应一些大家关切的问题。表示不建议大家立刻升级到 Vue3.0 版本，之前项目中某些依赖项可能还不支持新版，等社区完善后再进行迁移也不迟。</p>\n<p>Vue3.0 正式发布，尤雨溪在线全球发布会：【<a href=\"https://mp.weixin.qq.com/s/ZECNJYe1_zNwdX9tUWnMFA?content_source_url=https://github.com/vue3/vue3-News\">戳这里</a>】</p>\n<p>想了解更多有关 Vue 3.0 的信息，请大胆访问：<a href=\"https://v3.vuejs.org/?content_source_url=https://github.com/vue3/vue3-News\">v3.vuejs.org</a></p>\n<p>除了单独 Vue3 资讯，欢迎查看更多 vue.js 资讯：【<a href=\"https://github.com/itemsets/vue2\">【🔥Vue.js 资讯 📚】目前 web 前端开发非常火爆的框架；定时更新，欢迎 Star 一下。</a>】</p>\n<h2 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\">#</a> 目录</h2>\n<ul>\n<li><a href=\"https://github.com/vue3/vue3-News#-%E4%B8%8B%E5%8D%8A%E5%B9%B4%E6%92%B8-vue3-%E7%9A%84%E5%A7%BF%E5%8A%BF-\">下半年撸 vue3 的霸气姿势</a></li>\n<li><a href=\"https://github.com/vue3/vue3-News#Vue3-CheatSheet\">Vue 3 Cheat Sheet</a></li>\n<li><a href=\"https://github.com/vue3/vue3-News#%E5%86%8D%E8%B0%88vue3\">再谈 vue3</a></li>\n<li><a href=\"https://github.com/vue3/vue3-News#%E5%B0%A4%E5%A4%A7%E6%8E%A8%E5%87%BAvue3-beta%E4%B9%8B%E5%90%8E\">尤大推出 <code>vue3 beta</code>  之后</a></li>\n<li><a href=\"https://github.com/vue3/vue3-News#%E8%BF%8E%E6%8E%A5Vue3.0%E7%B3%BB%E5%88%97\">迎接 Vue3.0 系列</a></li>\n<li><a href=\"https://github.com/vue3/vue3-News#%E6%9C%80%E6%96%B0%E8%B5%84%E8%AE%AF-%E7%BB%A7%E7%BB%AD%E5%89%8D%E8%BF%9B\">最新资讯 - 继续前进 ╰(<em>°▽°</em>)╯</a></li>\n<li><a href=\"https://github.com/vue3/vue3-News#%E8%8B%B1%E6%96%87%E8%B5%84%E6%96%99\">英文资料</a></li>\n<li><a href=\"https://github.com/vue3/vue3-News#2019%E5%B9%B4%E4%B8%AD%E6%97%AC\">2019 年中旬</a></li>\n<li><a href=\"https://github.com/vue3/vue3-News#2019%E5%B9%B4%E4%B8%8A%E6%97%AC\">2019 年上旬</a></li>\n<li><a href=\"https://github.com/vue3/vue3-News#2018%E5%B9%B4%E9%A2%84%E5%91%8A\">2018 年预告</a></li>\n</ul>\n<p><strong>🐣 关于旧版本</strong></p>\n<p>Vue CLI 的包名称由 vue-cli 改成了 @vue/cli。 如果你已经全局安装了旧版本的 vue-cli (1.x 或 2.x)，你需要先通过 npm uninstall vue-cli -g 或 yarn global remove vue-cli 卸载它。</p>\n<p><strong>🐥Node 版本要求</strong></p>\n<p>Vue CLI 需要 Node.js 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 nvm 或 nvm-windows 在同一台电脑中管理多个 Node 版本。</p>\n<p><strong>🐓Vue 3.0 源代码</strong></p>\n<p>当大多数国人还在庆祝国庆节的时候，尤雨溪大大在昨天凌晨发布了 Vue 3.0 源代码，源码地址：<a href=\"https://github.com/vuejs/vue-next\">https://github.com/vuejs/vue-next</a> 。虽然目前还 处于 Pre-Alpha 版本，但是可以预见后面的 Alpha、Beta 等版本应该不会太遥远。<br>\n之前，就有预言，除了性能优化、脚手架和新功能外，TypeScript 绝对是一个重点，因此，在 Vue 3.0 源代码版本中，98% 代码由 Typescript 编写，相信后面会是 100%。<br>\n通过本次发布的源代码可以了解到针对 Vue 3 计划并已实现的主要架构改进和新功能。<br>\nVue 3 中最主要的新特性：组合式 API，已经可以借助 <a href=\"https://github.com/vuejs/composition-api\">https://github.com/vuejs/composition-api</a> （在 Vue 2 项目中作为插件使用）体验到。</p>\n<p><a href=\"https://avatars2.githubusercontent.com/u/499550?s=40&amp;v=4\"><img src=\"https://avatars2.githubusercontent.com/u/499550?s=40&amp;v=4\" alt=\"yyx990803\"></a> yyx990803</p>\n<p><strong>v3.0.0 One Piece</strong></p>\n<p><a href=\"https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png\"><img src=\"https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png\" alt=\"v3.0.0 One Piece\"></a></p>\n<p>Today we are proud to announce the official release of Vue.js 3.0 “One Piece”. This new major version of the framework provides improved performance, smaller bundle sizes, better TypeScript integration, new APIs for tackling large scale use cases, and a solid foundation for long-term future iterations of the framework.</p>\n<p><a href=\"https://github.com/vue3/vue3-News/issues/21\">One Piece. Vuejs 3.0 正式版发布！代号：海贼王</a></p>\n<hr>\n<p>进入了 rc 版本阶段：</p>\n<p><strong>3.0.0-rc.12 (2020-09-16)</strong><br>\n…<br>\n<strong>3.0.0-rc.1 (2020-07-17)</strong></p>\n<p>– Alpha (α)：预览版，或者叫内部测试版；一般不向外部发布，会有很多 Bug；一般只有测试人员使用。<br>\n– Beta (β)：测试版，或者叫公开测试版；这个阶段的版本会一直加入新的功能；在 Alpha 版之后推出。<br>\n– RC (Release Candidate)：最终测试版本；可能成为最终产品的候选版本，如果未出现问题则可发布成为正式版本。</p>\n<p>多数开源软件会推出两个 RC 版本，最后的 RC2 则成为正式版本。<br>\n我们的 vue3 就不一样，慢慢来，好东西，就要慢慢品！</p>\n<p><strong>3.0.0-beta.20 (2020-07-08)</strong><br>\n@ github-actions released this 5 days ago · 37 commits to master since this release Please refer to <a href=\"https://github.com/vuejs/vue-next/blob/master/CHANGELOG.md\">CHANGELOG.md</a> for details.</p>\n<p>…</p>\n<p><strong>v3.0.0-beta.2</strong><br>\nreleased this 6 days ago · 29 commits to master since this release<br>\nrelease: v3.0.0-beta.2</p>\n<p><strong>v3.0.0-beta.1</strong><br>\nreleased this 7 days ago · 40 commits to master since this release<br>\nrelease: v3.0.0-beta.1</p>\n<p><strong>🔥🐔2020 前端面试秘籍</strong></p>\n<p><a href=\"https://github.com/vue3/vue3-News/issues/9?content_source_url=https://github.com/vue3/vue3-News\">【吐血整理清单一】前端面试全攻略，为您保驾护航，金三银四</a><br>\n<a href=\"https://github.com/vue3/vue3-News/issues/10?content_source_url=https://github.com/vue3/vue3-News\">【吐血整理清单二】前端面试全攻略，为您保驾护航，金三银四</a><br>\n<a href=\"https://github.com/vue3/vue3-News/issues/11?content_source_url=https://github.com/vue3/vue3-News\">【吐血整理清单三】前端面试全攻略，为您保驾护航，金三银四</a></p>\n<p>秘籍在手，天下我有； 只要你想进，那么世界就是你的。</p>\n<p><strong>🐔 前端整理之道</strong></p>\n<p><a href=\"https://github.com/vue3/vue3-News/issues/8?content_source_url=https://github.com/vue3/vue3-News\">【整理】前端优化得有个好手段，比如看这个清单 🍑🍒🍓🍆🌽</a><br>\n<a href=\"https://github.com/vue3/vue3-News/issues/7?content_source_url=https://github.com/vue3/vue3-News\">【整理】前端学习笔记总结清单，应有尽有 🍇🍈🍉🍊🍋</a></p>\n<p><strong>🦃 关于 TypeScript</strong></p>\n<p><a href=\"https://github.com/vue3/vue3-News/issues/6?content_source_url=https://github.com/vue3/vue3-News\">【2020-Q1-News】TypeScript 新鲜一波流，自己品尝？</a><br>\n<a href=\"https://github.com/vue3/vue3-News/issues/4?content_source_url=https://github.com/vue3/vue3-News\">【最新】TypeScript 梳理知识点列表，可否一战？</a><br>\n<a href=\"https://github.com/vue3/vue3-News/issues/3?content_source_url=https://github.com/vue3/vue3-News\">【必会】都已经 9102 年底了，你必须会 TypeScript。</a></p>\n<p>为什么要学习它？<br>\n因为：</p>\n<ul>\n<li>按需输出 JavaScript 版本</li>\n<li>代码标准化利于团队开发</li>\n<li>主流框架及最新特性的支持</li>\n<li>便于重构和主流 IDE 支持</li>\n<li>更多友好特性和检测<br>\n…</li>\n</ul>\n<p>哈哈哈，并不是，是因为都已经 2020 了，大公司和你们都在用。</p>\n<h2 id=\"vue3-cheatsheet\"><a class=\"markdownIt-Anchor\" href=\"#vue3-cheatsheet\">#</a> Vue3-CheatSheet</h2>\n<p>由 Vue Mastery 网站归纳的 Vue 3 Cheat Sheet， 直观地概况了其主要特性。</p>\n<table>\n<thead>\n<tr>\n<th>Vue3 Cheat Sheet</th>\n<th>Vue3 Cheat Sheet</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/vue3/vue3-News/blob/master/asset/Vue3-CheatSheet02.jpeg\"><img src=\"https://github.com/vue3/vue3-News/raw/master/asset/Vue3-CheatSheet02.jpeg\" alt=\"img\"></a></td>\n<td><a href=\"https://github.com/vue3/vue3-News/blob/master/asset/Vue3-CheatSheet01.jpeg\"><img src=\"https://github.com/vue3/vue3-News/raw/master/asset/Vue3-CheatSheet01.jpeg\" alt=\"img\"></a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"vueuse\"><a class=\"markdownIt-Anchor\" href=\"#vueuse\">#</a> vueuse</h2>\n<p><a href=\"https://github.com/antfu/vueuse?content_source_url=https://github.com/vue3/vue3-News\">antfu/vueuse</a></p>\n<p>like React hooks.<br>\nCollection of essential Vue Composition API utils works for Vue 2.x and 3.x <a href=\"https://vueuse.js.org/\">https://vueuse.js.org/</a></p>\n<p>Collection of essential Vue Composition API (inspired by react-use)</p>\n<p><strong>🚀 Features</strong></p>\n<ul>\n<li>⚡ 0 dependencies: No worry about your bundle size</li>\n<li>🌴 Fully tree shakable: Only take what you want</li>\n<li>🦋 Type Strong: Written in Typescript</li>\n<li>🕶 Seamless migration: Works for both Vue 3 and 2</li>\n<li>🌎 Browser compatible: Use it though CDN</li>\n<li>🎪 Interactive docs &amp; demos: Check out the Storybook!</li>\n<li>🔌 Optional Add-ons: Firebase, vue-i18n, etc</li>\n</ul>\n<p><a href=\"https://github.com/vue3/vue3-News/raw/master/asset/pretty-cat.png\"><img src=\"https://github.com/vue3/vue3-News/raw/master/asset/pretty-cat.png\" alt=\"img\"></a></p>\n<h2 id=\"下半年撸-vue3-的姿势\"><a class=\"markdownIt-Anchor\" href=\"#下半年撸-vue3-的姿势\">#</a> 💃🏻 下半年撸 vue3 的姿势 💃🏻</h2>\n<p>🐯 🦁 🐮 🐷 🐹 🦊</p>\n<p>霸气姿势观望  <code>vue3</code>  核心技术 ing</p>\n<ul>\n<li>Proxy：不只是解决了 defineProperty 的局限性。</li>\n<li>Performance：性能更比 Vue 2.0 强。</li>\n<li>Tree shaking support：可以将无用模块 “剪辑”，仅打包需要的。</li>\n<li>Composition API：组合 API。</li>\n<li>Fragment, Teleport, Suspense：“碎片”，Teleport 即 Protal 传送门，“悬念”。</li>\n<li>Better TypeScript support：更优秀的 Ts 支持。</li>\n<li>Custom Renderer API：暴露了自定义渲染 API。</li>\n</ul>\n<p>TODOLIST：</p>\n<ul>\n<li>1 Docs &amp; Migration Guides</li>\n<li>2 Router</li>\n<li>3 Vuex</li>\n<li>4 CLI</li>\n<li>5 新工具：vite（法语 “快”）</li>\n<li>6 vue-test-utils</li>\n<li>7 DevTools</li>\n<li>8 IDE Support (Vetur)</li>\n<li>9 Nuxt</li>\n</ul>\n<p>介绍 Vue.js 以及 Vue-next 源码分析文章，希望通过学习 Vue.js 源码获得更好的知识和收获。<br>\n<a href=\"https://github.com/vue3/vue3-News/issues/16?content_source_url=https://github.com/vue3/vue3-News\">【这是入口】你要找的 vue 源码 全宇宙的都在这！</a></p>\n<p><a href=\"https://raw.githubusercontent.com/vue3/vue3-News/master/asset/one-piece.png?sanitize=true\"><img src=\"https://raw.githubusercontent.com/vue3/vue3-News/master/asset/one-piece.png?sanitize=true\" alt=\"v3.0.0 One Piece\"></a></p>\n<p><strong>「我是要成为海贼王的男人」</strong></p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV14k4y117LL/?content_source_url=https://github.com/vue3/vue3-News\">【李南江】Vue3.0 正式版教程 2020 年 9 月 19 号全网首发 - Vue3 One Piece 持续更新中…</a></li>\n<li><a href=\"https://blog.csdn.net/qq_30640671/article/details/108679708?content_source_url=https://github.com/vue3/vue3-News\">Vuejs 3 Release：One Piece. Vuejs 3.0 正式版发布！代号：海贼王</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_36065510/article/details/108679867?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 正式发布，本次发布所有总结，一起看看！</a></li>\n</ul>\n<p><strong>vue =&gt; Q3 2020</strong></p>\n<p>3.0: Release Management</p>\n<ul>\n<li>\n<p>Regression testing for 3.0</p>\n</li>\n<li>\n<p>Automated nightly release</p>\n</li>\n<li>\n<p>Formalize release lifecycle</p>\n</li>\n<li>\n<p>setup CLA process</p>\n<p>3.0: IE11 compat build<br>\n3.0 Official Release</p>\n<p>2.7</p>\n</li>\n<li>\n<p>Backport compatible 3.x features to 2.x</p>\n</li>\n<li>\n<p>Deprecation warnings for 3.x changes</p>\n</li>\n<li>\n<p>This will be the last minor release for 2.x and be offered as LTS (long-term support) for 18 months. It will continue to receive critical security updates even after the LTS period.</p>\n</li>\n</ul>\n<p><a href=\"https://www.bilibili.com/video/BV1rC4y187Vw?content_source_url=https://github.com/vue3/vue3-News\">Vue 3 Deep Dive with Evan You 【中英字幕】- Vue Mastery</a><br>\n 课程中提到的预备课程是<a href=\"https://www.bilibili.com/video/BV1SZ4y1x7a9?content_source_url=https://github.com/vue3/vue3-News\">《Vue3 响应式原理》</a></p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1qC4y18721?content_source_url=https://github.com/vue3/vue3-News\">Vue 之父尤雨溪深度解读 Vue3.0 的开发思路（上）</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1yK4y1s7Xh?content_source_url=https://github.com/vue3/vue3-News\">Vue 之父尤雨溪深度解读 Vue3.0 的开发思路（中）</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1ai4y137pg?content_source_url=https://github.com/vue3/vue3-News\">Vue 之父尤雨溪深度解读 Vue3.0 的开发思路（下）</a></li>\n</ul>\n<p>里面评论区和弹幕有在调侃尤大大的：</p>\n<p>=》尤雨溪就是个写前端的，懂什么 vue！<br>\n=》你一点都不懂 vue<br>\n=》他懂个锤子的 vue<br>\n=》他根本不懂 vue</p>\n<p>=&gt; 兄弟姐妹们，你们的饿了么升级为 vue3 了，在紧急构建中，很多大佬都在。<br>\n【<a href=\"https://github.com/element-plus/element-plus/?content_source_url=https://github.com/vue3/vue3-News\">🎉 A Vue.js 3.0 UI Library element-plus.org/</a>】</p>\n<ul>\n<li><a href=\"https://github.com/kkbjs/element3?content_source_url=https://github.com/vue3/vue3-News\">A Vue.js 3.0 UI Toolkit for Web.（WIP）</a></li>\n<li><a href=\"https://my.oschina.net/u/4326664/blog/4557649?content_source_url=https://github.com/vue3/vue3-News\">vue 3 组件库（基于 element-ui 修改）</a></li>\n<li><a href=\"https://github.com/blacksonic/awesome-vue-3?content_source_url=https://github.com/vue3/vue3-News\">blacksonic/awesome-vue-3</a></li>\n<li><a href=\"https://github.com/komavideo/LearnVue3?content_source_url=https://github.com/vue3/vue3-News\">Vue 3.0 初学入门使用</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000024479742?content_source_url=https://github.com/vue3/vue3-News\">Vue3 源码入门，实现简易版 reactivity</a></li>\n<li><a href=\"https://blog.csdn.net/guoqiankunmiss/article/details/108537593?content_source_url=https://github.com/vue3/vue3-News\">Vue3.x API config</a></li>\n<li><a href=\"https://www.bilibili.com/video/av499614417?content_source_url=https://github.com/vue3/vue3-News\">vue3 最美餐厅点餐系统 APP</a></li>\n<li><a href=\"https://juejin.im/post/6870627817009184776?content_source_url=https://github.com/vue3/vue3-News\">Vue3 设计背后的思考</a></li>\n<li><a href=\"https://juejin.im/post/6871669209445695495?content_source_url=https://github.com/vue3/vue3-News\">用 Vue3 写一个 swipe-cell</a></li>\n<li><a href=\"https://juejin.im/post/6872235455824265229?content_source_url=https://github.com/vue3/vue3-News\">尝鲜 vue3.0-tyepscript 开发组件 (3)</a></li>\n<li><a href=\"https://juejin.im/post/6867515263672123399?content_source_url=https://github.com/vue3/vue3-News\">首个 Vue 3 组件库发布</a></li>\n<li><a href=\"https://www.vuemastery.com/courses-path/vue3?content_source_url=https://github.com/vue3/vue3-News\">Learn the fundamentals of Vue 3 in this course that starts with the very basics.</a></li>\n<li><a href=\"https://github.com/antfu/vue-demi?content_source_url=https://github.com/vue3/vue3-News\">Creates Universal Library for Vue 2 &amp; 3</a></li>\n<li><a href=\"https://github.com/blacksonic/vue-3-playground?content_source_url=https://github.com/vue3/vue3-News\">Vue 3 Playground packed with all the new features</a></li>\n<li><a href=\"https://github.com/blacksonic/awesome-vue-3?content_source_url=https://github.com/vue3/vue3-News\">A curated list of awesome things related to Vue 3</a></li>\n<li><a href=\"https://juejin.im/post/6865842981618843656?content_source_url=https://github.com/vue3/vue3-News\">vue3 项目–让我们更快开发 vue（一）</a></li>\n<li><a href=\"https://juejin.im/post/6867125503007375373?content_source_url=https://github.com/vue3/vue3-News\">vue3 项目–让我们更快开发 vue（二）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/212210282?content_source_url=https://github.com/vue3/vue3-News\">Vue3 面向对象编程</a></li>\n<li><a href=\"https://www.zhihu.com/question/418076382?content_source_url=https://github.com/vue3/vue3-News\">Vue3 reactivity 这个地方是不是循环引用了？</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/150732926?content_source_url=https://github.com/vue3/vue3-News\">Vue3 Compiler 优化细节，如何手写高性能渲染函数</a></li>\n<li><a href=\"https://www.jianshu.com/p/781e5c49bf23?content_source_url=https://github.com/vue3/vue3-News\">vue3 列表渲染</a></li>\n<li><a href=\"https://www.jianshu.com/p/054c4d2e699b?content_source_url=https://github.com/vue3/vue3-News\">vue3 Event 事件处理</a></li>\n<li><a href=\"https://www.jianshu.com/p/c68d65a8f973?content_source_url=https://github.com/vue3/vue3-News\">vite+vue3.x</a></li>\n<li><a href=\"https://www.jianshu.com/p/2ee1ae40cc1b?content_source_url=https://github.com/vue3/vue3-News\">期待已久的鹅厂面试题来咯，Vue3 实现递归菜单组件</a></li>\n<li><a href=\"https://www.cnblogs.com/angel648/p/13582226.html?content_source_url=https://github.com/vue3/vue3-News\">快速了解 vue 3.x</a></li>\n<li><a href=\"https://www.cnblogs.com/origin-zy/p/13584519.html?content_source_url=https://github.com/vue3/vue3-News\">基于 Vue3+ElementUI-BootStrap4_前端实战</a></li>\n<li><a href=\"https://www.cnblogs.com/dudududadada/p/13608208.html?content_source_url=https://github.com/vue3/vue3-News\">vue3 项目打包 app</a></li>\n<li><a href=\"https://www.cnblogs.com/lxz-blogs/p/13595094.html?content_source_url=https://github.com/vue3/vue3-News\">vue3-reactive (响应式对象) 和 toRefs</a></li>\n<li>[<a href=\"https://juejin.im/post/6865863765863677960?content_source_url=https://github.com/vue3/vue3-News\">译] Vue 3 迁移策略 —— 过滤器（移除）</a></li>\n<li><a href=\"https://juejin.im/post/6867114456762679309?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 全家桶最全入门指南 - 快速搭建 (1/4)</a></li>\n<li><a href=\"https://juejin.im/post/6867123074148335624?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 全家桶最全入门指南 - vue3.0 新特性 (2/4)</a></li>\n<li><a href=\"https://juejin.im/post/6867114456762679309?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 全家桶最全入门指南 - vue-router@4.x 和 vuex@4.x (3/4)</a></li>\n<li><a href=\"https://juejin.im/post/6867123749565497358?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 全家桶最全入门指南 - 3.x 跟 2.x 的其他差异 (4/4)</a></li>\n</ul>\n<p><strong>从 Vue 2 到 Vue 3 的迁移指南</strong></p>\n<ul>\n<li>\n<p><a href=\"https://juejin.im/post/6859427370080665613?content_source_url=https://github.com/vue3/vue3-News\">从 Vue 2 到 Vue 3 的迁移指南之破坏性特性（一、全局 API）</a></p>\n</li>\n<li>\n<p><a href=\"https://juejin.im/post/6860178370928312328?content_source_url=https://github.com/vue3/vue3-News\">从 Vue 2 到 Vue 3 的迁移指南之破坏性特性（二、全局 API 的 tree-shaking）</a></p>\n</li>\n<li>\n<p><a href=\"https://juejin.im/post/6860522009881739271?content_source_url=https://github.com/vue3/vue3-News\">从 Vue 2 到 Vue 3 的迁移指南之破坏性特性（三、v-model）</a></p>\n</li>\n<li>\n<p><a href=\"https://juejin.im/post/6861104265419571207?content_source_url=https://github.com/vue3/vue3-News\">从 Vue 2 到 Vue 3 的迁移指南之破坏性特性（四、渲染函数 API）</a><br>\n🐬🐘🦒🐏🦥🦍<br>\n<a href=\"https://juejin.im/user/1195873128420968?content_source_url=https://github.com/vue3/vue3-News\">翻译官网文档列表如下:</a></p>\n</li>\n<li>\n<p>vue3 指南 —01 安装</p>\n</li>\n<li>\n<p>vue3 指南 —02 介绍</p>\n</li>\n<li>\n<p>vue3 指南 - 03 应用实例</p>\n</li>\n<li>\n<p>vue3 指南 - 04 Template Syntax template 语法</p>\n</li>\n<li>\n<p>vue3 指南 —05 Computed 属性 (property) 和侦听器</p>\n</li>\n<li>\n<p>vue3 指南 - 06 Class and Style Bindings 类名和样式值绑定</p>\n</li>\n<li>\n<p>vue3 指南 - 07 Conditional Rendering 条件渲染</p>\n</li>\n<li>\n<p>vue3 指南 - 08 List Rendering 列表渲染</p>\n</li>\n</ul>\n<p><a href=\"https://vue3js.cn/vue-composition/\">Vue 组合式 API</a></p>\n<ul>\n<li><a href=\"https://dev.to/chenxeed/be-prepared-to-migrate-your-vue-app-to-vue-3-eom?content_source_url=https://github.com/vue3/vue3-News\">Be prepared to migrate your Vue app to Vue 3</a></li>\n<li><a href=\"https://dev.to/pikax/how-to-test-your-library-for-vue-2-and-vue-next-42ao?content_source_url=https://github.com/vue3/vue3-News\">How to test your library for Vue 2.x and Vue 3.0</a></li>\n<li><a href=\"https://github.com/blacksonic/awesome-vue-3?content_source_url=https://github.com/vue3/vue3-News\">GitHub - blacksonic/awesome-vue-3</a></li>\n<li><a href=\"https://github.com/nkoehring/vue3-typescript-app-starter?content_source_url=https://github.com/vue3/vue3-News\">GitHub - nkoehring/vue3-typescript-app-starter</a></li>\n<li><a href=\"https://vuejsdevelopers.com/2020/07/13/vue-async-components-suspense/?content_source_url=https://github.com/vue3/vue3-News\">Vue 3 UX Wins with Async Components &amp; Suspense</a></li>\n<li><a href=\"https://medium.com/@martinmalinda/handling-asynchrony-in-vue-3-composition-api-part-1-managing-async-state-e993842ebf8f?content_source_url=https://github.com/vue3/vue3-News\">Handling Asynchrony in Vue 3 / Composition API — Part 1: Managing Async state</a></li>\n<li><a href=\"https://blog.logrocket.com/build-better-higher-order-components-with-vue-3/?content_source_url=https://github.com/vue3/vue3-News\">Build better higher-order components with Vue 3</a></li>\n<li><a href=\"https://blog.csdn.net/summer_zhh/article/details/108080930?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 中的性能优化</a></li>\n<li><a href=\"https://www.cnblogs.com/maqingyuan/p/13523757.html?content_source_url=https://github.com/vue3/vue3-News\">Vue3 + Element ui 后台管理系统</a></li>\n<li><a href=\"https://www.yisu.com/zixun/159186.html?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 数据响应式原理详解</a></li>\n<li><a href=\"https://www.w3cschool.cn/article/87ff96bda80956?content_source_url=https://github.com/vue3/vue3-News\">学习 Vue3.0，你需要先了解一下 Proxy</a></li>\n<li><a href=\"https://www.w3cschool.cn/article/9bcaca84c6ee7f?content_source_url=https://github.com/vue3/vue3-News\">学习 Vue3.0，先从搭建环境开始</a></li>\n<li><a href=\"https://github.com/hkc452/slamdunk-the-vue3?content_source_url=https://github.com/vue3/vue3-News\">vue3 源码全面解读</a></li>\n<li><a href=\"https://www.codenong.com/s1190000023669309/?content_source_url=https://github.com/vue3/vue3-News\">浅谈 Vue3 的 watchEffect 用途</a></li>\n<li><a href=\"https://github.com/vuetifyjs/vuetify/tree/next?content_source_url=https://github.com/vue3/vue3-News\">vuetify 正在开发的 v3 分支，ts + vue3</a></li>\n<li><a href=\"https://blog.csdn.net/qq_31126175/article/details/108106717?content_source_url=https://github.com/vue3/vue3-News\">vue3 源码学习 ——computed</a></li>\n<li><a href=\"https://blog.csdn.net/qq_31126175/article/details/108007446?content_source_url=https://github.com/vue3/vue3-News\">vue3 源码学习 —— 响应式 reactive</a></li>\n<li><a href=\"https://github.com/one-pupil/study/tree/master/vue_3.x?content_source_url=https://github.com/vue3/vue3-News\">Vue 3.x 组件式 API</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000023586788?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 + Vite 使用 Bootstrap</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000023594560?content_source_url=https://github.com/vue3/vue3-News\">Vue3 模板编译原理</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000023589518?content_source_url=https://github.com/vue3/vue3-News\">VUE3 来了，你用了 NestJS 了吗？（一）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000023699377?content_source_url=https://github.com/vue3/vue3-News\">程序员为什么要学习源码 | Vue3 源码系列开篇词</a></li>\n<li>[Vue3 + TS + Egg 重构自己的小项目<a href=\"https://juejin.im/post/6862582779419459598?content_source_url=https://github.com/vue3/vue3-News\">总结]</a></li>\n<li><a href=\"https://juejin.im/post/6860290630435012621?content_source_url=https://github.com/vue3/vue3-News\">vue3+Ts 可视化开发的研究，实战拖拽基础，组件动态生成，远程加载组件</a></li>\n<li><a href=\"https://juejin.im/post/6859541760797442062?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 变动简介</a></li>\n<li>[使用 Vue3 构建更好的高阶组件<a href=\"https://juejin.im/post/6859571758362525704?content_source_url=https://github.com/vue3/vue3-News\">译]</a></li>\n<li><a href=\"https://juejin.im/post/6864396298394189832?content_source_url=https://github.com/vue3/vue3-News\">Vue3 响应式原理剖析</a></li>\n<li><a href=\"https://juejin.im/post/6862560722531352583?content_source_url=https://github.com/vue3/vue3-News\">进阶高级前端，这 9 种 Vue 技术你掌握了吗？</a></li>\n<li><a href=\"https://www.e-learn.cn/topic/3777376?content_source_url=https://github.com/vue3/vue3-News\">Vue3 教程，抢先学习</a></li>\n<li><a href=\"https://www.zhihu.com/question/416652570?content_source_url=https://github.com/vue3/vue3-News\">Vue3 composition-api 有哪些劣势？</a></li>\n<li><a href=\"https://juejin.im/post/6858558735695937544?content_source_url=https://github.com/vue3/vue3-News\">Vue3 文档【Vue2 迁移 Vue3】</a></li>\n<li><a href=\"https://juejin.im/post/6859271079764951047?content_source_url=https://github.com/vue3/vue3-News\">vue3.x reactive、effect、computed、watch 依赖关系及实现原理</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/168589606?content_source_url=https://github.com/vue3/vue3-News\">Vue 最全知识点（基础到进阶，覆盖 vue3.0，欢迎补充讨论）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/170573874?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 浪潮下，没有一个平庸的程序员是无辜的，此刻，你需要把握这些？</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/170623237?content_source_url=https://github.com/vue3/vue3-News\">vue3 + router + tsx + vite 试用报告</a></li>\n<li><a href=\"https://wuqiang.blog.csdn.net/article/details/107871795?content_source_url=https://github.com/vue3/vue3-News\">学习 vue3 系列 watch</a></li>\n<li><a href=\"https://blog.csdn.net/gufudhn/article/details/107938423?content_source_url=https://github.com/vue3/vue3-News\">使用 Vue3 构建更好的高阶组件译</a></li>\n<li><a href=\"https://blog.csdn.net/l_ppp/article/details/107820234?content_source_url=https://github.com/vue3/vue3-News\">紧跟尤大的脚步提前体验 Vue3 新特性，你不会还没了解过 Vue3 吧</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/NES_8rV5DM5eqHROxJUmpA?content_source_url=https://github.com/vue3/vue3-News\">使用 Vue 3.0，你可能不再需要 Vuex 了</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_42281031/article/details/107824088?content_source_url=https://github.com/vue3/vue3-News\">使用 vite 搭建 Vue3 项目</a></li>\n<li><a href=\"https://blog.csdn.net/wangjikuen/article/details/107789109?content_source_url=https://github.com/vue3/vue3-News\">Vue3 相对于 2 系列的升级（一）</a></li>\n<li><a href=\"https://blog.csdn.net/qq_40340478/article/details/107902452?content_source_url=https://github.com/vue3/vue3-News\">vue3 为何放弃 defineProperty，使用 Proxy</a></li>\n<li><a href=\"https://dev.to/viniciuskneves/go-async-in-vue-3-with-suspense-4860?content_source_url=https://github.com/vue3/vue3-News\">Go async in Vue 3 with Suspense</a></li>\n<li><a href=\"https://dev.to/pikax/how-to-test-your-library-for-vue-2-and-vue-next-42ao?content_source_url=https://github.com/vue3/vue3-News\">How to test your library for vue 2 and vue-next</a></li>\n<li><a href=\"https://dev.to/shawnwildermuth/a-month-with-vue-3-51p6?content_source_url=https://github.com/vue3/vue3-News\">A Month with Vue 3</a></li>\n<li><a href=\"https://dev.to/nonso/shared-state-management-with-vue-composition-api-2938?content_source_url=https://github.com/vue3/vue3-News\">Shared State Management with Vue Composition Api</a></li>\n<li><a href=\"https://dev.to/koehr/a-store-implementation-from-scratch-using-vue3-s-composition-api-3p16?content_source_url=https://github.com/vue3/vue3-News\">A store implementation from scratch using Vue3’s composition API</a></li>\n<li><a href=\"https://dev.to/aelbore/headless-testing-with-vite-vue-test-utils-3jd1?content_source_url=https://github.com/vue3/vue3-News\">Headless Testing with Vite + Vue-Test-Utils</a></li>\n<li><a href=\"https://dev.to/vuetraining/vuejs-quick-tip-vue-router-next-in-the-composition-api-1i0l?content_source_url=https://github.com/vue3/vue3-News\">VueJS Quick Tip: Vue-router-next in the Composition API</a></li>\n<li><a href=\"https://dev.to/chenxeed/be-prepared-to-migrate-your-vue-app-to-vue-3-eom?content_source_url=https://github.com/vue3/vue3-News\">Be prepared to migrate your Vue app to Vue 3</a></li>\n<li><a href=\"https://dev.to/jfet97/do-vue-3-refs-admit-a-monad-instance-5fan?content_source_url=https://github.com/vue3/vue3-News\">Do Vue 3 refs admit a monad instance?</a></li>\n<li><a href=\"https://dev.to/vuelancer/vite-no-bundle-setup-for-vuejs-react-and-preact-3bo3?content_source_url=https://github.com/vue3/vue3-News\">Vite - No Bundle Setup for Vuejs, React and Preact</a></li>\n<li><a href=\"https://www.cnblogs.com/wangwei0514/articles/vue_create.html?content_source_url=https://github.com/vue3/vue3-News\">vue3.0 搭建教程 (ui 界面创建项目，帮你快速搭建所需模块，非常 nice)</a></li>\n<li><a href=\"https://www.cnblogs.com/sorrowrain/p/13443641.html?content_source_url=https://github.com/vue3/vue3-News\">大前端：前端全栈加强版！前端全栈 + 全周期 + 多端 (升级 Vue3.0) 完整版</a></li>\n<li><a href=\"https://www.ershicimi.com/p/a0f8308d8b0fb2783dbdceea9e9a46d4?content_source_url=https://github.com/vue3/vue3-News\">官方给出的 Vue3 性能优化数据，其实很保守？</a></li>\n<li><a href=\"https://github.com/HcySunYang/vue-next-jsx?content_source_url=https://github.com/vue3/vue3-News\">A babel plugin that provides jsx syntax for vue3</a></li>\n<li><a href=\"https://github.com/hugheschoi/web-/blob/f4a1afbde36b94937b4871309e903b7f7b857abc/%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97.md?content_source_url=https://github.com/vue3/vue3-News\">高级前端开发成长路线总结 - 进阶指南</a></li>\n<li><a href=\"https://github.com/sl1673495/blogs?content_source_url=https://github.com/vue3/vue3-News\">sl1673495 前端技术博客，不定时更新</a></li>\n<li><a href=\"https://github.com/NervJS/taro-rfcs/blob/35b0709660f08000fd18083ab44bc0c947e412f0/rfcs/0001-vue-3-support.md?content_source_url=https://github.com/vue3/vue3-News\">Taro 中实现 Vue 3 的支持</a></li>\n<li><a href=\"https://github.com/cuixiaorui/vue3-think?content_source_url=https://github.com/vue3/vue3-News\">vue3-think 记录学习思考 vue3 的所有</a></li>\n<li><a href=\"https://github.com/roberto-butti/vue3-demo-rollthedice?content_source_url=https://github.com/vue3/vue3-News\">Vue3 Demo: Roll the dice</a></li>\n<li><a href=\"https://github.com/gangking/PersonalBlog/tree/b03cfe85cf034068074e3ccb0cce590f1b091b71/docs/vue?content_source_url=https://github.com/vue3/vue3-News\">vue3.0 实战喵喵电影</a></li>\n<li><a href=\"http://hcysun.me/vue-design/zh/?content_source_url=https://github.com/vue3/vue3-News\">vue-design 渲染器 - 江山父老能容我 不使人间造孽钱</a></li>\n<li><a href=\"https://github.com/vuejs/vue/projects/6?content_source_url=https://github.com/vue3/vue3-News\">vue3 Roadmap</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000023465134?content_source_url=https://github.com/vue3/vue3-News\">Vue3 响应式原理 + 手写 reactive</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000023462922?content_source_url=https://github.com/vue3/vue3-News\">Vue 3 到底有什么不同：v-model 升级了</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000023462887?content_source_url=https://github.com/vue3/vue3-News\">Vue 3 到底有什么不同：全局 API</a></li>\n<li><a href=\"https://juejin.im/post/6855129007412346888?content_source_url=https://github.com/vue3/vue3-News\">Vue2.x 与 Vue3 响应式实现核心代码对比</a></li>\n<li><a href=\"https://juejin.im/post/6855517117778198542?content_source_url=https://github.com/vue3/vue3-News\">深入 TypeScript 中的子类型、逆变、协变，进阶 Vue3 源码前必须搞懂的。</a></li>\n<li><a href=\"https://juejin.im/post/6856718746694713352?content_source_url=https://github.com/vue3/vue3-News\">【译】为什么不需要在 Vue3 中使用 Vuex</a></li>\n<li><a href=\"https://juejin.im/post/6856950924502532104?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 源码解析之组件渲染，vnode 到真实 DOM</a></li>\n<li><a href=\"https://juejin.im/post/6856011196224126989?content_source_url=https://github.com/vue3/vue3-News\">一文看懂 Vue 3 到底有什么不同</a></li>\n<li><a href=\"https://juejin.im/post/6856661502053744654?content_source_url=https://github.com/vue3/vue3-News\">Vue3 响应式原理</a></li>\n</ul>\n<p>🚴🏻 🚴🏻‍♂️ 🚴🏻‍♀️ 🚵🏻 🚵🏻‍♂️ 🚵🏻‍♀️</p>\n<p><strong><a href=\"https://github.com/RBL3/vue3-demo\">vue3.0 Composition API 入门教程</a></strong></p>\n<p>vue3.0 Composition API 上手初体验 构建基本项目开发环境<br>\n vue3.0 Composition API 上手初体验 构建 vue 基础代码<br>\n vue3.0 Composition API 上手初体验 使用 vue-router 构建多页面应用<br>\n vue3.0 Composition API 上手初体验 神奇的 setup 函数 (一) 响应数据的绑定<br>\n vue3.0 Composition API 上手初体验 神奇的 setup 函数 (二) 响应对象数据的绑定<br>\n vue3.0 Composition API 上手初体验 神奇的 setup 函数 (三) 生命周期函数<br>\n vue3.0 Composition API 上手初体验 神奇的 setup 函数 (四) 计算属性 computed<br>\nvue3.0 Composition API 上手初体验 普通组件的开发与使用<br>\n vue3.0 Composition API 上手初体验 vue 组件的具名插槽 slot 的变化<br>\n vue3.0 Composition API 上手初体验 函数组件的开发与使用<br>\n vue3.0 Composition API 上手初体验 用路由循环，做个导航菜单</p>\n<p><strong><a href=\"https://gitee.com/kennana/vue_next_learning/tree/master?content_source_url=https://github.com/vue3/vue3-News\">李金文 /vue-next 学习</a></strong></p>\n<p>vue-next 贡献指南（谷歌翻译版）<br>\n《Vue3.0 抢先学》系列之：网友们都惊呆了！<br>\n《Vue3.0 抢先学》系列之：一个简单的例子<br>\n《Vue3.0 抢先学》系列之：使用 Composition API<br>\n《Vue3.0 抢先学》系列之：响应式之 Ref vs. Reactive<br>\n《Vue3.0 抢先学》系列之：使用 render 函数<br>\n《Vue3.0 抢先学》vue-next 学习总结<br>\n《Vue3.0 抢先学》系列之：组件属性 Props<br>\n《Vue3.0 抢先学》系列之：组件生命周期<br>\n《Vue3.0 抢先学》系列之：更多响应式 API 示例（watch,computed 的变种）</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/407326156/answer/1342974146?content_source_url=https://github.com/vue3/vue3-News\">如果 ElementUI 不维护了，也不再支持 Vue 3 了我们该怎么办呢？</a></li>\n<li><a href=\"https://juejin.im/post/5f18f5ebf265da22e27a9a87?content_source_url=https://github.com/vue3/vue3-News\">Vue3.x 深入浅出系列（连载三）</a></li>\n<li><a href=\"https://juejin.im/post/5f1941cb5188252e685d492f?content_source_url=https://github.com/vue3/vue3-News\">基于 Vue3.0 开发知乎日报实战</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/161308974?content_source_url=https://github.com/vue3/vue3-News\">Vue3 全家桶 + Vite + TS + TSX 尝鲜，先人一步！</a></li>\n<li><a href=\"https://juejin.im/post/5f1969705188257109551d8a?content_source_url=https://github.com/vue3/vue3-News\">也许是最清楚的 Vue3.x Reactive 响应式原理讲解</a></li>\n<li><a href=\"https://juejin.im/post/5f1805e55188252e974f0be9?content_source_url=https://github.com/vue3/vue3-News\">Vue 3.0 初步使用和原理</a></li>\n<li><a href=\"https://juejin.im/post/5f16d75de51d4534c14dc768?content_source_url=https://github.com/vue3/vue3-News\">千字文看 Vue3.0 变化</a></li>\n<li><a href=\"https://juejin.im/post/5f166297f265da23020a9ca5?content_source_url=https://github.com/vue3/vue3-News\">vue3 响应式数据最全最细致解析，vue3 源码解析持续更新中</a></li>\n<li><a href=\"https://juejin.im/post/5f16540de51d4534c6543c35?content_source_url=https://github.com/vue3/vue3-News\">除了 composition API，vue3.0 文档又带来了什么新东西？</a></li>\n<li><a href=\"https://juejin.im/post/5f1650ae5188252e884e8ed0?content_source_url=https://github.com/vue3/vue3-News\">从 Vue 源码中学到的 28 个编程好习惯</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1603056?content_source_url=https://github.com/vue3/vue3-News\">Vue3 Composition API 教程及示例</a></li>\n<li><a href=\"https://www.javascriptcn.com/read-e-commerce-mall-project-imitating-jingdong-taobao-based-on-vue3-0.1-beta.html?content_source_url=https://github.com/vue3/vue3-News\">基于 vue3.0.1 beta 搭建仿京东淘宝的电商商城项目！</a></li>\n<li><a href=\"https://www.javascriptcn.com/read-detailed-analysis-of-optimization-details-of-vue3-diff-algorithm-in-live-broadcast.html?content_source_url=https://github.com/vue3/vue3-News\">细致分析，尤雨溪直播中提到 vue3.0 diff 算法优化细节</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/e1IVKZ5FF80yGTN8yecfBg?content_source_url=https://github.com/vue3/vue3-News\">顺藤摸瓜：用单元测试读懂 Vue 3 watch 函数</a></li>\n<li><a href=\"https://juejin.im/post/5ef8acb4f265da23004b0a8e?content_source_url=https://github.com/vue3/vue3-News\">electron-vue 开发笔记（3）多窗口多页面入口配置</a></li>\n<li><a href=\"https://juejin.im/post/5efc419af265da22fa615dff?content_source_url=https://github.com/vue3/vue3-News\">基于项目实战阐述 vue3.0 新型状态管理和逻辑复用方式</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000023074260?content_source_url=https://github.com/vue3/vue3-News\">Vue3 源码逐行解析</a></li>\n<li><a href=\"https://www.yuque.com/woniuppp/vue3/reactivity?content_source_url=https://github.com/vue3/vue3-News\">Vue3 生态技术内幕</a></li>\n<li><a href=\"https://www.yuque.com/wuhaosky/vue3/vue-reactivity#galNADP9?content_source_url=https://github.com/vue3/vue3-News\">Vue 响应式系统技术原理和 Vue3 响应式系统的优点</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000023009604?content_source_url=https://github.com/vue3/vue3-News\">Vue3 之 —— 和 Vite 不得不说的事</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/148937064?content_source_url=https://github.com/vue3/vue3-News\">Vue3 的 Proxy 能做到哪些精确的拦截操作？原理揭秘</a></li>\n<li><a href=\"https://juejin.im/post/5ee9847ce51d45789f23fdb0?content_source_url=https://github.com/vue3/vue3-News\">顺藤摸瓜：用单元测试读懂 vue3 watch 函数</a></li>\n<li><a href=\"https://juejin.im/post/5ef6ed175188252e8272bbbf?content_source_url=https://github.com/vue3/vue3-News\">学习一波 Vue3 新特性</a></li>\n<li><a href=\"https://juejin.im/post/5ef6c527e51d45347c1b66c3?content_source_url=https://github.com/vue3/vue3-News\">用 Vue.js 3 Composition API 创建 i18n 插件</a></li>\n<li><a href=\"https://juejin.im/post/5ee7705cf265da771169beba?content_source_url=https://github.com/vue3/vue3-News\">Vue 3.0 初探 – 组合式 API</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;mid=2676493889&amp;idx=1&amp;sn=bf85d210efffb7952d0753bd9cd4d6e8?content_source_url=https://github.com/vue3/vue3-News\">Vue 技巧 | 在 Vue3 中使元素在滚动视图时淡入</a></li>\n<li><a href=\"https://juejin.im/post/5eec7f416fb9a0585663f9a5?content_source_url=https://github.com/vue3/vue3-News\">Vue1.x 2.x 3.x 的响应式实现</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/146097763?content_source_url=https://github.com/vue3/vue3-News\">深入理解 Vue3 Reactivity</a></li>\n<li><a href=\"https://juejin.im/post/5eecdd8a6fb9a058b51e63d4?content_source_url=https://github.com/vue3/vue3-News\">Vue 3.x 项目环境搭建</a></li>\n<li><a href=\"https://juejin.im/post/5eedd9776fb9a058b10aa8af?content_source_url=https://github.com/vue3/vue3-News\">好消息，Vue3 官方文档出中文版的啦</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/mnsI8MxBmhomttV0UXWSyg?content_source_url=https://github.com/vue3/vue3-News\">深入理解 Vue3 Reactivity API</a></li>\n<li><a href=\"https://www.maiyewang.com/archives/97732?content_source_url=https://github.com/vue3/vue3-News\">vue 3.x 如何高效学成？本文详解</a></li>\n<li>[<a href=\"https://juejin.im/post/5ee11db86fb9a047f338cf48?content_source_url=https://github.com/vue3/vue3-News\">vue 源码 03] watch 侦听属性 – 初始化和更新</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;mid=2676493889&amp;idx=1&amp;sn=bf85d210efffb7952d0753bd9cd4d6e8?content_source_url=https://github.com/vue3/vue3-News\">Vue 技巧 | 在 Vue3 中使元素在滚动视图时淡入</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/146097763?content_source_url=https://github.com/vue3/vue3-News\">Vue3 Reactivity API 基础</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022871354?content_source_url=https://github.com/vue3/vue3-News\">Vue 3 响应式原理及实现</a></li>\n<li><a href=\"https://juejin.im/post/5edb93caf265da771526eeda?content_source_url=https://github.com/vue3/vue3-News\">vue3 响应式系统流程分析与实现</a></li>\n<li><a href=\"https://increment.com/frontend/making-vue-3/?content_source_url=https://github.com/vue3/vue3-News\">The process: Making Vue 3</a></li>\n<li><a href=\"https://www.maiyewang.com/archives/96583?content_source_url=https://github.com/vue3/vue3-News\">vue3.0 beta 已出，来快速实践一下吧</a></li>\n<li><a href=\"https://blog.csdn.net/csdnsevenn/article/details/106512677?content_source_url=https://github.com/vue3/vue3-News\">尤雨溪：重头来过的 Vue 3 带来了什么？</a></li>\n<li><a href=\"https://juejin.im/post/5ecce0f96fb9a047d1126978?content_source_url=https://github.com/vue3/vue3-News\">vue3.0 创建项目及 API 讲解（一）</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;mid=2676493487&amp;idx=1&amp;sn=039828f234eca95a689a12d03e0f4777?content_source_url=https://github.com/vue3/vue3-News\">Vue 3 教程（适用于 Vue 2 用户）</a></li>\n<li><a href=\"https://www.cnblogs.com/wuhuacong/p/12986166.html?content_source_url=https://github.com/vue3/vue3-News\">循序渐进 VUE+Element 前端应用开发 (4）— 获取后端数据及产品信息页面的处理</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022781069?content_source_url=https://github.com/vue3/vue3-News\">「中文翻译」Vue3 的诞生之路</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2NTk2NzUxNg==&amp;mid=2247486033&amp;idx=1&amp;sn=383bb32d6162a7f794950dfc95c0b83e?content_source_url=https://github.com/vue3/vue3-News\">1.1 万字从零解读 Vue3.0 源码响应式系统</a></li>\n<li><a href=\"https://www.eventbrite.com/e/vue-global-meetup-tickets-101090117262?content_source_url=https://github.com/vue3/vue3-News\">Vue Global Meetup, Tue, Apr 14, 2020 at 5:00 PM</a></li>\n<li><a href=\"https://github.com/vuejs/rfcs/pull/148?content_source_url=https://github.com/vue3/vue3-News\">New Async Component API by yyx990803 · vuejs/rfcs · Vue 3.0</a></li>\n<li><a href=\"https://css-tricks.com/how-the-vue-composition-api-replaces-vue-mixins/?content_source_url=https://github.com/vue3/vue3-News\">How the Vue Composition API Replaces Vue Mixins – Anthony Gore – CSS-Tricks</a></li>\n<li><a href=\"https://github.com/vuejs/vue-class-component/issues/406?content_source_url=https://github.com/vue3/vue3-News\">Vue 3.0 Changes for @Component decorator and Vue base class · vuejs/vue-class-component</a></li>\n<li><a href=\"https://github.com/vuejs/composition-api/releases/tag/v0.5.0?content_source_url=https://github.com/vue3/vue3-News\">Release v0.5.0 · vuejs/composition-api · GitHub</a></li>\n<li><a href=\"https://www.vuemastery.com/conferences/vueconf-us-2020/?content_source_url=https://github.com/vue3/vue3-News\">VueConf US 2020 – Vue Mastery</a></li>\n<li><a href=\"https://www.youtube.com/playlist?content_source_url=https://github.com/vue3/vue3-News\">Vue.js Amsterdam 2020 - YouTube</a></li>\n<li><a href=\"https://dev.to/fdietz/vue-js-headless-component-10ag?content_source_url=https://github.com/vue3/vue3-News\">Vue.js Headless Component - Frederik Dietz</a></li>\n<li><a href=\"https://dev.to/fdietz/vue-js-functional-components-2495?content_source_url=https://github.com/vue3/vue3-News\">Vue.js Functional Components - Frederik Dietz</a></li>\n</ul>\n<p><a href=\"https://vueschool.io/articles/news/what-you-will-love-in-vue-3-video/?content_source_url=https://github.com/vue3/vue3-News\">What you will love in Vue 3</a><br>\nPrepare yourself for what to expect in Vue 3 with Alex Kyriakidis’ presentation from the Vue.js Amsterdam conference.</p>\n<p><a href=\"https://github.com/vitejs/vite?content_source_url=https://github.com/vue3/vue3-News\">GitHub - vuejs/vite: Make Web Dev Fast Again</a><br>\nVite is an opinionated web dev build tool that serves your code via native ES Module imports during dev and bundles it with Rollup for production.</p>\n<p><a href=\"https://vuejs-course.com/screencasts/vue-3-async-components-and-bundle-splitting?content_source_url=https://github.com/vue3/vue3-News\">Vue.js 3 Course - Composition API, TypeScript, Testing</a><br>\nVue.js 3 introduces some changes to the Async Component API - find out the changes, and how you can use Async Components with Webpack 5’s bundle splitting to make your apps load faster than ever.</p>\n<p><a href=\"https://logaretm.com/blog/the-case-for-hoc-vs-composition-api/?content_source_url=https://github.com/vue3/vue3-News\">The case for HOC vs The Composition API</a><br>\nIn this article Abdelrahman compares Higher-Order Components (using scoped-slots?content_source_url=https://github.com/vue3/vue3-News) with the upcoming Composition API. I especially enjoyed the Vee-Validate v4 comparison. Check it out!</p>\n<p><a href=\"https://stegosource.com/vuetensils-0-6-simpler-forms-better-accessibility-useful-filters/?content_source_url=https://github.com/vue3/vue3-News\">Vuetensils 0.6: Simpler Forms, Better Accessibility, &amp; Useful Filters!</a><br>\nThe latest version of Vuetensils has some really cool features: improvements to form authoring, accessibility updates, and new filters to make life easier.</p>\n<p><a href=\"https://github.com/vuejs/vitepress?content_source_url=https://github.com/vue3/vue3-News\">GitHub - vuejs/vitepress</a><br>\n<a href=\"https://github.com/Akryum/vue-mention?content_source_url=https://github.com/vue3/vue3-News\">GitHub - Akryum/vue-mention</a><br>\n<a href=\"https://github.com/alvarosaburido/vue-dynamic-forms?content_source_url=https://github.com/vue3/vue3-News\">GitHub - alvarosaburido/vue-dynamic-forms</a></p>\n<h2 id=\"再谈-vue3\"><a class=\"markdownIt-Anchor\" href=\"#再谈-vue3\">#</a> 再谈 vue3</h2>\n<ul>\n<li><a href=\"https://juejin.im/post/5ebe92cee51d454dc6176ec7?content_source_url=https://github.com/vue3/vue3-News\">Vue 源码学习 3.9：深入 Props</a></li>\n<li><a href=\"https://juejin.im/post/5ebfcc275188256d95626d22?content_source_url=https://github.com/vue3/vue3-News\">真・vue3.0 全家桶 + ts 尝鲜、过坑</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022684511?content_source_url=https://github.com/vue3/vue3-News\">超级详细的 Vue-cli3 使用教程</a></li>\n<li><a href=\"https://juejin.im/post/5ec3675ee51d454dcf457d22?content_source_url=https://github.com/vue3/vue3-News\">15 分钟上手 vue3.0</a></li>\n<li><a href=\"https://www.maiyewang.com/archives/95339?content_source_url=https://github.com/vue3/vue3-News\">Vue-cli3.0 读取外部化配置文件来修改公共路径</a></li>\n<li><a href=\"https://juejin.im/post/5ec78ec451882543345e7fb9?content_source_url=https://github.com/vue3/vue3-News\">vue3.x 结合 typescript 初体验</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI1NDU3NzM5Mg==&amp;mid=2247484668&amp;idx=1&amp;sn=29958c55e0df19d7920dae100f91697c?content_source_url=https://github.com/vue3/vue3-News\">几道我今年跳槽遇到的 Vue3.0 面试题</a></li>\n<li><a href=\"https://juejin.im/post/5ec68bc8518825434980044e?content_source_url=https://github.com/vue3/vue3-News\">Vue3 源码分析 —— 数据侦测</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022719461?content_source_url=https://github.com/vue3/vue3-News\">记一次 vue3.0 技术分享会</a></li>\n<li><a href=\"https://juejin.im/post/5ec68c426fb9a047a96a684e?content_source_url=https://github.com/vue3/vue3-News\">Vue3 源码解析 —— 整体流程和组合式 API</a></li>\n<li><a href=\"https://juejin.im/post/5e9d81b851882573866ba89c?content_source_url=https://github.com/vue3/vue3-News\">Vue2.x To Vue3.0</a></li>\n<li><a href=\"https://juejin.im/post/5eb766296fb9a0432f0ff8c7?content_source_url=https://github.com/vue3/vue3-News\">搭建一个 vue-cli4+webpack 移动端框架（开箱即用）</a></li>\n<li><a href=\"https://juejin.im/post/5eb0d6dde51d454de20d7a80?content_source_url=https://github.com/vue3/vue3-News\">vue3.0 实战从 0 到 1 实战电商管理系统（第三天）</a></li>\n<li><a href=\"https://juejin.im/post/5eb17a0fe51d454dd60cfe0f?content_source_url=https://github.com/vue3/vue3-News\">简明扼要聊聊 Vue3.0 的 Composition API 是啥东东</a></li>\n<li><a href=\"https://juejin.im/post/5eb28bfa5188256d83468092?content_source_url=https://github.com/vue3/vue3-News\">Vue (2.x 和 3.0?content_source_url=https://github.com/vue3/vue3-News) 双向绑定原理及实现（Object.defineProperty 和 Proxy）以及常见错误区分</a></li>\n<li><a href=\"https://juejin.im/post/5eb2d7bdf265da7bb708be3d?content_source_url=https://github.com/vue3/vue3-News\">vue3.0 实战电商系统：高解耦式 mock 订单列表查询（第四天）</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/QHYOtxlpRkBJyzNQCXTiBA?content_source_url=https://github.com/vue3/vue3-News\">如何在 Vue 3 中使用生命周期函数</a></li>\n<li><a href=\"https://juejin.im/post/5eb433175188256d976dfed4?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 中 Object.defineProperty 的代替方案 Proxy</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/rWgo9elB0dAIKFfINj04RA?content_source_url=https://github.com/vue3/vue3-News\">Vue 3 中的 Vue Router 初探</a></li>\n<li><a href=\"https://juejin.im/post/5eb766296fb9a0432f0ff8c7?content_source_url=https://github.com/vue3/vue3-News\">搭建一个 vue-cli4+webpack 移动端框架（开箱即用）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022612964?content_source_url=https://github.com/vue3/vue3-News\">通过 10 个实例小练习，快速入门熟练 Vue3.0 核心新特性</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022616689?content_source_url=https://github.com/vue3/vue3-News\">Vue3 究竟好在哪里？（和 React Hook 的详细对比）</a></li>\n<li><a href=\"https://juejin.im/post/5eb6619c6fb9a043890a2e8f?content_source_url=https://github.com/vue3/vue3-News\">使用 Vue3 composition-api 重写一个抽象可复用的增删改查页面</a></li>\n<li><a href=\"https://juejin.im/post/5eba7388f265da7bb21b4698?content_source_url=https://github.com/vue3/vue3-News\">Vue 源码学习 3.8：组件更新 &amp; diff 算法</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022512358?content_source_url=https://github.com/vue3/vue3-News\">一份关于 vue-cli3 项目常用项配置</a></li>\n<li><a href=\"https://juejin.im/post/5eaa878d5188256d473f3209?content_source_url=https://github.com/vue3/vue3-News\">vue-cli4 从零开始搭建 Vue 项目</a></li>\n<li><a href=\"https://juejin.im/post/5ea97600f265da7b983b9e76?content_source_url=https://github.com/vue3/vue3-News\">手拉手带你开启 Vue3 世界的鬼斧神工</a></li>\n<li><a href=\"https://juejin.im/post/5eae5d92e51d451b2e03255c?content_source_url=https://github.com/vue3/vue3-News\">vue3.0 从 0 到 1 实战电商管理系统（第一天）</a></li>\n<li><a href=\"https://juejin.im/post/5eb0d6dde51d454de20d7a80?content_source_url=https://github.com/vue3/vue3-News\">vue3.0 实战从 0 到 1 实战电商管理系统（第三天）</a></li>\n<li><a href=\"https://juejin.im/post/5ea550e66fb9a03c692042f4?content_source_url=https://github.com/vue3/vue3-News\">Vue CLI3 移动端适配 【px2rem 或 postcss-plugin-px2rem】</a></li>\n<li><a href=\"https://juejin.im/post/5ea7d10ff265da7bfa190262?content_source_url=https://github.com/vue3/vue3-News\">告别无聊的 undefined 判断，让老 vue-cli3 支持 🚀&quot;可选链&quot; 等 &quot;ES2020&quot; 特性</a></li>\n<li><a href=\"https://juejin.im/post/5ea63864f265da47bf17d94f?content_source_url=https://github.com/vue3/vue3-News\">Vue 的’奇技淫巧’</a></li>\n<li><a href=\"https://juejin.im/post/5ea8399c5188256d3f2b7eac?content_source_url=https://github.com/vue3/vue3-News\">基于 vue3.0+TypeScript 的简易日历</a></li>\n<li><a href=\"https://juejin.im/post/5ea99e135188256d9b085784?content_source_url=https://github.com/vue3/vue3-News\">vue3.0 尝鲜，写一个 win10 日历</a></li>\n<li><a href=\"https://juejin.im/post/5ea97600f265da7b983b9e76?content_source_url=https://github.com/vue3/vue3-News\">手拉手带你开启 Vue3 世界的鬼斧神工</a></li>\n<li><a href=\"https://juejin.im/post/5e9faa8fe51d4546fe263eda?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 直播虚拟 Dom 总结 (和 React 对比？content_source_url=https://github.com/vue3/vue3-News)</a></li>\n<li><a href=\"https://juejin.im/post/5e9fb4ece51d4547170aafe4?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 Beta 笔记（侧重 Performance 提升原因和 Composition API）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022434893?content_source_url=https://github.com/vue3/vue3-News\">Vue Cli 3 打包配置–自动忽略 console.log 语句</a></li>\n<li><a href=\"https://juejin.im/post/5e9fc11051882573b436203f?content_source_url=https://github.com/vue3/vue3-News\">尤雨溪在 vue3.0 bate 上推荐的 no webpack 小工具 vite</a></li>\n<li><a href=\"https://juejin.im/post/5e9ffe6fe51d4528521588d3?content_source_url=https://github.com/vue3/vue3-News\">尤雨溪谈 Vue3.0 新特性直播后的个人理解</a></li>\n<li><a href=\"https://iiong.com/vue3-use-notes/?content_source_url=https://github.com/vue3/vue3-News\">Vue3 使用学习</a></li>\n<li><a href=\"https://juejin.im/post/5ea1c1cae51d4546ff700c80?content_source_url=https://github.com/vue3/vue3-News\">Vue3.0 Beta–有牛优刘尤老师上课笔记</a></li>\n<li><a href=\"https://juejin.im/post/5ea10905e51d4546e716ee7c?content_source_url=https://github.com/vue3/vue3-News\">Vue 3.0 bate 版尝鲜</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022442171?content_source_url=https://github.com/vue3/vue3-News\">Vue3 中对 VDOM 的改进</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022451034?content_source_url=https://github.com/vue3/vue3-News\">一份 vue3-beta.3 相关文集前来报告，请您收下</a></li>\n<li><a href=\"https://juejin.im/post/5ea27779e51d4546f940d77d?content_source_url=https://github.com/vue3/vue3-News\">如何在 Vue2 与 Vue3 中构建相同的组件</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022451034?content_source_url=https://github.com/vue3/vue3-News\">Vue 3-beta 相关文集</a></li>\n<li><a href=\"https://juejin.im/post/5ea550e66fb9a03c692042f4?content_source_url=https://github.com/vue3/vue3-News\">Vue CLI3 移动端适配 【px2rem 或 postcss-plugin-px2rem】</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/KEnDabcOFaEh3Foasxncbw?content_source_url=https://github.com/vue3/vue3-News\">迎接 Vue 3.0：在 Vue 2 与 Vue 3 中构建相同的组件</a></li>\n</ul>\n<h2 id=\"尤大推出vue3-beta之后\"><a class=\"markdownIt-Anchor\" href=\"#尤大推出vue3-beta之后\">#</a> 尤大推出 <code>vue3 beta</code>  之后</h2>\n<p>🍁 🍄 🌾 💐 🌷 🌹 🥀 🌺 🌸 🌼 🌻<br>\n各位亲 (づ￣ 3 ￣) づ ╭❤ ～，悠着点、悠着点。<br>\n🍁 🍄 🌾 💐 🌷 🌹 🥀 🌺 🌸 🌼 🌻</p>\n<p>vue 官方提供的尝鲜库：<a href=\"https://github.com/vuejs/composition-api\">https://github.com/vuejs/composition-api</a></p>\n<ul>\n<li><a href=\"https://juejin.im/post/5e9f6b3251882573a855cd52\">抄笔记：尤雨溪在 Vue3.0 Beta 直播里聊到了这些…</a></li>\n<li><a href=\"https://juejin.im/post/5e9faa8fe51d4546fe263eda\">尤大 Vue3.0 直播虚拟 Dom 总结 (和 React 对比)</a></li>\n<li><a href=\"https://juejin.im/post/5e9ce011f265da47b8450c11\">Vue 3.0 这个迷人的小妖精，到底好在哪里？（更新原理对比）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/134177889\">技术周刊 2020-04-21：Vue 3.0 Beta 来啦！</a></li>\n<li><a href=\"https://juejin.im/post/5e9f6b3251882573a855cd52\">抄笔记：尤雨溪在 Vue3.0 Beta 直播里聊到了这些…</a></li>\n<li><a href=\"https://juejin.im/post/5e9c2508e51d4546cd2ff33b\">vue3.0 Beta 发布了</a></li>\n<li><a href=\"https://juejin.im/post/5e99681f6fb9a03c69203278\">好消息，vue 3 进入 beta 阶段！</a></li>\n<li><a href=\"https://juejin.im/post/5e99206c6fb9a03c576cbe57\">今日凌晨 Vue3 beta 版震撼发布，竟然公开支持脚手架项目！</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022345673\">vue cli3 适配所有端方案</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022402496\">Vue 3.0 Beta 版本发布，你还学的动么？</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022409256\">Vue 3.0-beta.1 发布</a></li>\n<li><a href=\"https://juejin.im/post/5e99681f6fb9a03c69203278\">好消息，vue 3 进入 beta 阶段</a></li>\n<li><a href=\"https://juejin.im/post/5e9b1d056fb9a03c8966e908\">vue3 reactive 思路引导</a></li>\n<li><a href=\"https://juejin.im/post/5e92d863f265da47e57fe065\">Vue3 的响应式和以前有什么区别，Proxy 无敌？</a></li>\n<li><a href=\"https://juejin.im/post/5e94595c6fb9a03c341daa75\">Vue3 跟着尤雨溪学 TypeScript 之 Ref 类型从零实现</a></li>\n<li><a href=\"https://juejin.im/post/5e9ab44bf265da47b27d9ceb\">vue2.0 与 3.0 对比以及 vue3.0 API 入门</a></li>\n<li><a href=\"https://juejin.im/post/5e99c21b6fb9a03c590dfea8\">Vue 3.0 全家桶抢先体验</a></li>\n<li><a href=\"https://juejin.im/post/5e80c1f0e51d4546d961e575\">解析 Vue2.0 和 3.0 的响应式原理和异同 (带源码)</a></li>\n<li><a href=\"https://juejin.im/post/5e8010e26fb9a03c947cb98d\">VUE 3.0 学习探索入门系列 - Vue3.x 生命周期 和 Composition API 核心语法理解（6）</a></li>\n<li><a href=\"https://juejin.im/post/5e8842aa5188257367220f6f\">VUE 3.0 学习探索入门系列 - Vue3.x 令人期待的新特性（7）</a></li>\n<li><a href=\"https://juejin.im/post/5e54aeb76fb9a07ce31ee70b\">Vue3.0 (Vue-cli4) 项目打包性能优化实践</a></li>\n<li><a href=\"https://juejin.im/post/5e944010f265da47aa3f68db\">Vue.js CLI4 Vue.config.js 标准配置 （最全注释）</a></li>\n</ul>\n<h2 id=\"迎接-vue30-系列\"><a class=\"markdownIt-Anchor\" href=\"#迎接-vue30-系列\">#</a> 迎接 Vue3.0 系列</h2>\n<p>👹 👺 💀 👻 👽 🤖</p>\n<ul>\n<li><a href=\"https://www.toutiao.com/a6817358466407989772/\">迎接 Vue3.0 系列 | Vue3 Composition API 中的提取和重用逻辑</a></li>\n<li><a href=\"https://www.toutiao.com/i6817269208544444936\">迎接 Vue3.0 系列 | Vue Composition API 如何替换 Vue Mixins</a></li>\n<li><a href=\"https://www.toutiao.com/i6810618652442755592\">准备迎接 Vue3，使用 Vue Composition API 生成干净可扩展的表单</a></li>\n<li><a href=\"https://www.toutiao.com/i6817006554387055112\">迎接 Vue3.0 系列 | 如何在 Vue3 中使用生命周期钩子函数</a></li>\n<li><a href=\"https://www.toutiao.com/i6816710905481396748\">迎接 Vue3.0 系列 | 如何在 Vue2 与 Vue3 中构建相同的组件</a></li>\n<li><a href=\"https://www.toutiao.com/i6817067452875145731\">迎接 Vue3.0 系列 | Vue3 中的 Vue 路由器初探</a></li>\n</ul>\n<h2 id=\"最新资讯-继续前进\"><a class=\"markdownIt-Anchor\" href=\"#最新资讯-继续前进\">#</a> 最新资讯 - 继续前进 ╰(<em>°▽°</em>)╯</h2>\n<ul>\n<li><a href=\"https://juejin.im/post/5e32502ae51d450268661152\">重拳出击：打造 Vue3.0 + Typescript + TSX 开 (乞) 发 (丐) 模式</a></li>\n<li><a href=\"https://juejin.im/post/5e8a9b1ae51d45470720bdfa\">10 个 Vue 开发技巧助力成为更好的工程师</a></li>\n<li><a href=\"https://juejin.im/post/5e9024f46fb9a03c64230a74\">2020 年的 12 个 Vue.js 开发技巧和窍门</a></li>\n<li><a href=\"https://juejin.im/post/5e8064c551882573a13777e2\">高级前端开发者必会的 34 道 Vue 面试题解析（三）</a></li>\n<li><a href=\"https://juejin.im/post/5e7577816fb9a07c83350011\">（4.2 万字 🔥🔥🔥 重启 2020）“从零到部署” Vue 全栈电商应用系列教程 — 正式完结</a></li>\n<li><a href=\"https://juejin.im/post/5e8b5fa6f265da47ff7cc139\">Vue 进阶必学之高阶组件 HOC（保姆式教学，冲击 20k 必备）</a></li>\n<li><a href=\"https://juejin.im/post/5e81b7e5e51d4546bf26fb87\">VUE CLI3 结合 cross-env 配置环境变量（含环境变量源码解析）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022198316\">4k+ 字分析 Vue 3.0 响应式原理（依赖收集和派发更新）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022229159\">解析 Vue2.0 和 3.0 的响应式原理和异同 (带源码)</a></li>\n<li><a href=\"https://juejin.im/post/5e83caab6fb9a03c6675b367\">vue 刷新页面出现 404 错误</a></li>\n<li><a href=\"https://juejin.im/post/5e8593d26fb9a03c37302dc1\">【你不知道的 React】当 React Hooks 遇见 Vue3 Composition API</a></li>\n<li><a href=\"https://juejin.im/post/5e8842aa5188257367220f6f\">VUE 3.0 学习探索入门系列 – Vue3.x 令人期待的新特性（7）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022271723\">Vue3.0 的 reactive API 定义和源码实现</a></li>\n<li><a href=\"https://juejin.im/post/5e8fdba06fb9a03c48577620\">基于 vue-cli3 搭建一个后台管理系统框架</a></li>\n<li><a href=\"https://juejin.im/post/5e7de415e51d4546ca3098c1\">Vue 3.0 diff 算法及原理</a></li>\n<li><a href=\"https://juejin.im/post/5e69ed1af265da573d61baaf\">基于 vue-cli3/cli4 解决前端使用 axios 跨域问题</a></li>\n<li><a href=\"https://juejin.im/post/5e69de93f265da570c75453e\">使用 vue-cli3 搭建 Vue+TypeScript 项目</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000021991591\">简单通俗的理解 Vue3.0 中的 Proxy</a></li>\n<li><a href=\"https://juejin.im/post/5e6c96a0f265da5716712164\">vue 源码分析 - 14-dom 异步更新机制 (nextTick)</a></li>\n<li><a href=\"https://juejin.im/post/5e71d5f751882549003d3900\">谈谈 vue3.0 要更新的内容相关笔记</a></li>\n<li><a href=\"https://juejin.im/post/5e1bc92bf265da3e0640b6b7\">Vue3.0 尝试</a></li>\n<li><a href=\"https://juejin.im/post/5e4eb264f265da575c16bc14\">vue3.0 源码速读</a></li>\n<li><a href=\"https://juejin.im/post/5e54c9d06fb9a07cd614d2a0\">记一次 vue-cli3 webpack 简单性能优化</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000021709647\">手摸手带你使用 Vue-Cli3 搭建前端开发环境</a></li>\n<li><a href=\"https://juejin.im/post/5e3f722ee51d4527223e4550\">vue2.x+vue-cli3.0 地图 demo 踩过的坑</a></li>\n<li><a href=\"https://juejin.im/post/5e427febe51d45270d530227\">用 Vue3 (Vue-Composition API) 写一个疫情查询小工具</a></li>\n<li><a href=\"https://juejin.im/post/5e21196fe51d454d523be084\">TypeScript 从零实现基于 Proxy 的响应式库，带你彻底搞懂 Vue3 的响应式原理</a></li>\n<li><a href=\"https://juejin.im/post/5e23b20f51882510073eb571\">带你彻底搞懂 Vue3 的 Proxy 响应式原理基于函数劫持实现 Map 和 Set 的响应式</a></li>\n<li><a href=\"https://juejin.im/post/5e2fdf29e51d45026866107d\">深度解析：Vue3 如何巧妙的实现强大的 computed</a></li>\n<li><a href=\"https://juejin.im/post/5e32502ae51d450268661152\">重拳出击：打造 Vue3.0 + Typescript + TSX 开 (乞) 发 (丐) 模式</a></li>\n<li><a href=\"https://juejin.im/post/5e2d0d016fb9a02fc05da472\">在 React 中引入 Vue3 的 reactivity 分包来实现最强大的状态管理</a></li>\n<li><a href=\"https://github.com/zce/dashboard\">A dashboard scaffolding based on vue.js created by vuejs/vue-cli 4.x.</a></li>\n<li><a href=\"https://github.com/staven630/vue-cli4-config\">vue-cli4 全面配置 (持续更新)</a></li>\n<li><a href=\"https://juejin.im/post/5dea0423f265da33c24fe18a\">基于 vue-cli4 脚手架搭建的 cesium 所踩的坑</a></li>\n<li><a href=\"https://juejin.im/post/5e13ecbe6fb9a04846508ab2\">Vue3 尝鲜</a></li>\n<li><a href=\"https://juejin.im/post/5e1451385188253ab54142e9\">Vue3 体验卡～</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000021531553\">【思否编程公开课】限时免费 迎接 Vue 3.0</a></li>\n<li><a href=\"https://juejin.im/post/5e16e800f265da3e1824b72c\">Vue3 之 Composition API 对比 Vue2.x 用法</a></li>\n<li><a href=\"https://juejin.im/post/5e1d28d1f265da3e4412b052\">带你了解 vue-next（Vue 3.0）之 炉火纯青</a></li>\n<li><a href=\"https://github.com/hujiulong/blog/issues/11\">Vue 3.0 实践：使用 Vue 3.0 做 JSX (TSX) 风格的组件开发</a></li>\n<li><a href=\"https://juejin.im/post/5e1d28b96fb9a02fbf37a7cc\">带你了解 vue-next（Vue 3.0）之 小试牛刀</a></li>\n<li><a href=\"https://juejin.im/post/5e1d289c5188254dfd43d0c8\">带你了解 vue-next（Vue 3.0）之 初入茅庐</a></li>\n<li><a href=\"https://juejin.im/post/5e0da5606fb9a048483ecf64\">Vue3 Composition-Api + TypeScript + 新型状态管理模式探索</a></li>\n<li><a href=\"https://juejin.im/post/5e0af74be51d4541035450c7\">Vue3 源码之响应系统 Reactive 模块解读 (干货满满，不容错过～)</a></li>\n<li><a href=\"https://www.daozhao.com/8809.html\">从 vuecli3 学习 webpack 记录（零）整体流程</a></li>\n<li><a href=\"https://juejin.im/post/5e12a2e95188253ab321aa8d\">Vue3 中不止 composition-api，其他的提案 (RFC) 也很精彩</a></li>\n<li><a href=\"http://www.fullstackradio.com/129\">Evan You - What’s Coming in Vue.js 3.0 | Full Stack Radio</a></li>\n<li><a href=\"https://www.vuemastery.com/blog/top-ways-to-learn-Vue-3/\">Top ways to learn Vue 3 – Dan Vega</a></li>\n<li><a href=\"https://vueschool.io/articles/vuejs-tutorials/portal-a-new-feature-in-vue-3/\">Portal - a new feature in Vue 3 - Filip Rakowski</a></li>\n<li><a href=\"https://vuedose.tips/tips/access-template-refs-in-composition-api-in-vuejs-3/\">Access template refs in Composition API in Vue.js 3</a></li>\n<li><a href=\"https://vuedose.tips/tips/\">Use old instance properties in Composition API in Vue.js 3</a></li>\n<li><a href=\"https://vuetoronto.com/videos/design-principles-of-vue-3-evan-you/\">Design Principles of Vue 3.0 – Evan You @VueConfTO 2019</a></li>\n<li><a href=\"https://juejin.im/post/5dfcc030f265da33d039dda5\">VUE 3.0 API 尝鲜体验</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/95010735\">Vue 3.x 响应式原理 ——ref 源码分析</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/95012874\">Vue 3.x 响应式原理 ——effect 源码分析</a></li>\n<li><a href=\"https://juejin.im/post/5de75a476fb9a01658358720\">Vue3 源码学习 (问题总结)</a></li>\n<li><a href=\"https://juejin.im/post/5dd234635188254a1f44646a\">Vue CLI3 搭建组件库并实现按需引入实战操作</a></li>\n<li><a href=\"https://juejin.im/post/5dca71f8f265da4cef191581\">vue 3.0 pre-alpha</a></li>\n<li>[为 Vue3 学点 TypeScript, 什么是声明文件 (declare)? <a href=\"https://juejin.im/post/5dcbc9e2e51d451bcb39f123\">全局声明篇]</a></li>\n<li><a href=\"https://juejin.im/post/5dccf61a51882510cc093207\">Vue 3.0 响应式方法解析</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000021003414\">从 Object.defineProperty 到 Proxy 深入理解 Vue 3.0 响应系统</a></li>\n<li><a href=\"http://www.tuicool.com/articles/hit/RVruAbU\">Vue3.0 响应式系统二三事</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/89940326\">Vue 3.x 源码初探 ——reactive 原理</a></li>\n<li><a href=\"https://juejin.im/post/5dc27287e51d4561f259811b\">Vue2.X 和 Vue3.0 数据响应原理变化</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000020922487\">Vue 3 对 Web 应用性能的改进</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000020933028\">Vue 3 中令人兴奋的新功能</a></li>\n<li><a href=\"https://juejin.im/post/5dafe42451882576534d3858\">Vue.js 3.x 源码解析先导</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/yExhLfBAivNbTbI5oX0h-A\">Vue 3 Cheat Sheet 下载（中文版）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/88385908\">vue3 响应式源码解析 - Effect 篇</a></li>\n<li><a href=\"https://juejin.im/post/5db551ed51882564477b1817\">Vue 3.0 —— Watch 与 Reactivity 代码走读</a></li>\n<li><a href=\"https://juejin.im/post/5db64128f265da4d23758b3c\">Vue3.0 数据响应系统分析 (主要针对于 reactive)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/88996118\">vue3 源码解读之 time slicing</a></li>\n<li><a href=\"https://www.zoo.team/article/vue3\">茶余饭后聊聊 Vue3.0 响应式数据那些事儿</a></li>\n<li><a href=\"https://juejin.im/post/5dbd5fe36fb9a0208b12058f\">Vue3 都要上的 TypeScript 之工程实践</a></li>\n<li><a href=\"https://learnku.com/articles/28813\">vue_cli3.x 跨域访问</a></li>\n<li><a href=\"https://juejin.im/post/5d4faef0e51d45621479acba\">【译】Vue.js 3: 面向未来编程</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/46269528\">全面改革：解读 Vue 3.0 的变化</a></li>\n<li><a href=\"https://github.com/xjh22222228/vue-cnode\">基于 vue3 function-based 构建 cnode 社区</a></li>\n<li><a href=\"https://github.com/calvin008/weimumu-admin-web\">vue3.0 后台管理框架基于 typescript（支持 pc\\ 手机，抖音 rank 数据分析、Tiktok 数据)</a></li>\n<li><a href=\"https://juejin.im/post/5dab320851882565f7660c5e\">从 WebPack 4.X 到 Vue-Cli 3.X 一篇就够</a></li>\n<li><a href=\"https://juejin.im/post/5dac69bf5188252b51183982\">从 vue2.0 响应数据到 vue3.0 响应数据</a></li>\n<li><a href=\"https://juejin.im/post/5da91fcff265da5b852928e1\">Vue 3.0 源码逐行解析（一）：响应式模块（1）</a></li>\n<li><a href=\"https://juejin.im/post/5da9049c518825502a445a53\">Vue3 数据驱动源码解读</a></li>\n<li><a href=\"https://juejin.im/post/5dab12996fb9a04e247c9e8a\">看 vue3 源码可以学到什么：一 、README</a></li>\n<li><a href=\"https://juejin.im/post/5daa195de51d4524a131b359\">你为什么看不懂源码之 Vue 3.0 囊中取物</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000020598857\">Vue 3 源码开放，今天你学习了吗？</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/85343099\">Vue 3.0 源码开放，看看都有哪些新特性</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/_9XaMyAv0NjJRvwKEEleuw\">Vue 3.0 公开代码之后……</a></li>\n<li><a href=\"https://juejin.im/post/5da2f98c6fb9a04e127152f1\">Vue3.0 响应式系统完全讲解 (逐行)</a></li>\n<li><a href=\"https://juejin.im/post/5d996e3e6fb9a04e3043cc5b\">Vue 3 原理剖析：数据响应系统</a></li>\n<li><a href=\"https://juejin.im/post/5d99d9a0f265da5b8601264c\">Vue3.x 源码调试</a></li>\n<li><a href=\"https://juejin.im/post/5da29a87518825094e37301c\">为什么 Vue3.0 使用 Proxy 实现数据监听？defineProperty 表示不背这个锅</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/85678790\">Vue 3 响应式系统源码解析（单测篇）</a></li>\n<li><a href=\"https://juejin.im/post/5da442bb6fb9a04de42f76cf\">浏览器中如何断点调试 Vue3 源码</a></li>\n<li><a href=\"https://juejin.im/post/5da2e6ad518825200b2d4d59\">简析 vue 3 的数据响应系统</a></li>\n<li><a href=\"https://juejin.im/post/5da43211518825646c50f315\">代理模式 Proxy 和 Vue3 数据响应系统</a></li>\n<li><a href=\"https://juejin.im/post/5d9c9891f265da5b6b630151\">Vue3.0 数据响应式原理</a></li>\n<li><a href=\"https://juejin.im/post/5d9c9a135188252e097569bd\">Vue3 响应式系统源码解析 (上)</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000020629159\">一张图理清 Vue 3.0 的响应式系统</a></li>\n<li><a href=\"https://juejin.im/post/5d9eff686fb9a04de04d8367\">Vue3 响应式系统源码解析 - Ref 篇</a></li>\n<li><a href=\"https://juejin.im/post/5d9dc63451882571e202cd58\">五分钟看懂 Vue3 - 数据绑定</a></li>\n<li><a href=\"https://juejin.im/post/5d9ecf17f265da5bb065dba5\">浅析 Vue3 中的响应式原理</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000020636103\">vue3 的数据响应原理和实现</a></li>\n<li><a href=\"https://juejin.im/post/5d9c41436fb9a04def4e5b1c\">给 vue3 源码添加注释：数据响应式部分</a></li>\n<li><a href=\"http://jungahuang.com/2019/10/11/about-vue3-proxy/\">浅析 Vue3 数据响应系统</a></li>\n<li><a href=\"https://juejin.im/post/5d9f5090e51d4578502c24b1\">vue3 中 effect 与 computed 的亲密关系</a></li>\n<li><a href=\"https://juejin.im/post/5d9edb225188253e3377537c\">Vue3.0 中的 monorepo 管理模式</a></li>\n<li><a href=\"https://juejin.im/post/5d99b5fb5188257377312c82\">Vue3 watch 函数执行过程</a></li>\n<li><a href=\"https://juejin.im/post/5d99be7c6fb9a04e1e7baa34\">Vue3.0 中的数据侦测</a></li>\n<li><a href=\"https://juejin.im/post/5d9ae2415188256eee1639e3\">使用 Proxy 实现 Vue.js 3 中的响应式思想</a></li>\n<li><a href=\"https://juejin.im/post/5d836458f265da03d871f6e9\">Vue 3.0 最新进展：Composition API</a></li>\n<li><a href=\"https://www.oschina.net/news/110356/vuejs-v3-pre-alpha-released\">公布了尚处于 Pre-Alpha 状态的 Vue 3 源码</a></li>\n</ul>\n<h2 id=\"英文资料\"><a class=\"markdownIt-Anchor\" href=\"#英文资料\">#</a> 英文资料</h2>\n<ul>\n<li><a href=\"https://alligator.io/vuejs/vue-styleguidist-3/\">What’s New in vue-styleguidist 3.0</a></li>\n<li><a href=\"https://blog.logrocket.com/hooks-are-coming-to-vue/\">Hooks are coming to Vue.js version 3.0</a></li>\n<li><a href=\"https://medium.com/@mattmaribojoc/what-does-vue-3-0-mean-for-web-development-851052fc0138\">what does vue 3 0 mean for web development</a></li>\n<li><a href=\"https://github.com/LinusBorg/composition-api-demos\">A Vue.js app demonstarting various use cases for the new composition API</a></li>\n<li><a href=\"https://www.vuemastery.com/courses/vue-3-essentials/why-the-composition-api/\">Why the Composition API - Vue 3 Essentials – Vue Mastery</a></li>\n<li><a href=\"https://madewithvuejs.com/blog/vue-3-roundup\">Vue 3 – A roundup of infos about the new version of Vue.js - Made with Vue.js</a></li>\n<li><a href=\"https://github.com/LinusBorg/composition-api-demos\">GitHub - LinusBorg/composition-api-demos: A Vue.js app demonstarting various use cases for the new composition API</a></li>\n<li><a href=\"https://dev.to/ycmjason/thought-on-vue-3-composition-api-reactive-considered-harmful-j8c\">Thought on Vue 3 Composition API -  <code>reactive()</code>  considered harmful</a></li>\n<li><a href=\"https://dev.to/localeai/architecting-http-clients-in-vue-js-applications-for-effective-network-communication-1eec\">Architecting HTTP clients in Vue.js applications for efficient network communication</a></li>\n<li><a href=\"https://dev.to/simonholdorf/10-free-resources-to-kickoff-your-career-as-a-vue-developer-4mg2\">10 Free resources to kickoff your career as a Vue Developer</a></li>\n<li><a href=\"https://dev.to/simonholdorf/10-vue-directives-that-make-your-dev-lives-easier-5dm7\">10 Vue Directives that make your dev lives easier!</a></li>\n<li><a href=\"https://dev.to/simonholdorf/10-tips-tricks-to-make-you-a-better-vuejs-developer-4n4d\">10 Tips &amp; Tricks to make you a better VueJS Developer</a></li>\n<li><a href=\"https://dev.to/simonholdorf/9-projects-you-can-do-to-become-a-frontend-master-in-2020-n2h\">9 Projects you can do to become a Frontend Master in 2020</a></li>\n</ul>\n<h2 id=\"2019-年中旬\"><a class=\"markdownIt-Anchor\" href=\"#2019-年中旬\">#</a> 2019 年中旬</h2>\n<p>天王盖地虎，宝塔镇河妖</p>\n<table>\n<thead>\n<tr>\n<th>文章列表标题</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I_am_a_placeholder_placeholder_placeholder</td>\n<td>nothing</td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000019925865\">为 vue3 学点 typescript, 解读高级类型</a></td>\n<td>第一课，体验 typescript; 第二课，基础类型和入门高级类型；第三课，泛型；第四课，解读高级类型；第五课，什么是命名空间 (namespace);</td>\n</tr>\n<tr>\n<td><a href=\"https://juejin.im/post/5d70d03751882554841c4357\">Vue 3.0：更快、更小、让开发者更轻松</a></td>\n<td>在 11 月 14 日 - 16 日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 “Vue 3.0 Updates” 的主题演讲，对 Vue 3.0 的更新计划、方向进行了详细阐述。</td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000020038527\">Vue 3.0 前瞻，体验 Vue Function API</a></td>\n<td>最近 Vue 官方公布了 Vue 3.0 最重要的 RFC：Function-based component API，并发布了兼容 Vue 2.0 版本的 plugin：vue-function-api，可用于提前体验 Vue 3.0 版本的 Function-based component API。笔者出于学习的目的，提前在项目中尝试了 vue-function-api。</td>\n</tr>\n<tr>\n<td><a href=\"https://mp.weixin.qq.com/s/7a7PjKmpMDObGkP_XBEi-Q\">Vue 3.0 之前你必须知道的 TypeScript 实战技巧</a></td>\n<td>很多人对 TypeScript 的使用还停留在基本操作上，其实 TypeScript 的特性非常强大，我们利用好这些特性可以有效地提高代码质量、加速开发效率，今天就介绍 9 个非常实用的 TypeScript 技巧或者特性.</td>\n</tr>\n<tr>\n<td><a href=\"https://juejin.im/post/5d4d2fc3f265da03c23ec246\">Vue CLI 3.x 与 2.x 的区别</a></td>\n<td>cli3 新增模式概念，每个模式在项目中都有对应的配置文件，项目启动时，对应的文件就会加载，与环境变量不同，一个模式可以包括多个环境变量。</td>\n</tr>\n<tr>\n<td><a href=\"https://juejin.im/post/5d54eb45e51d4561c02a251f\">Vue 3.0 RFC API 的实现</a></td>\n<td>Vue3.0 的 RFC 已经发布了几个月了，Vue 底层几乎没有变动，还是沿用原来响应式的。所以一直在思考能不能使用现在的版本，实现 RFC 中的 API，直到看到了 Vue Function API 这个库，这个库让开发者提前尝鲜到了 RFC 中的 API，当然作为 RFC，所以最终 3.0 的 API 还是未知的，以及底层的实现也还未知。</td>\n</tr>\n<tr>\n<td><a href=\"https://juejin.im/post/5d5623936fb9a06ac824417e\">Vue.js 3：面向未来编程（function-based API）</a></td>\n<td>如果你在使用 Vue.js，那么可能知道这个框架的第 3 版就要出来了（如果你是在本篇文章发布后的一段时间看到这段话的话，我希望我的说法还是中肯的 😉）。新版本目前正在积极开发中，所以可能要加入的特性都可以在官方的 RFC（request for comments）仓库中看到：<a href=\"http://github.com/vuejs/rfcs\">github.com/vuejs/rfcs</a> 。其中有一个特性 function-api，将会在很大程度上影响我们未来 Vue 项目的编写方式。</td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000020205747\">来自 Vue 3.0 的 Composition API 尝鲜</a></td>\n<td>前段时间，Vue 官方释出了 Composition API RFC 的文档，我也在收到消息的第一时间上手尝鲜。虽然 Vue 3.0 尚未发布，但是其处于 RFC 阶段的 Composition API 已经可以通过插件 @vue/composition-api 进行体验了。接下来的内容我将以构建一个 TODO LIST 应用来体验 Composition API 的用法。</td>\n</tr>\n<tr>\n<td><a href=\"https://juejin.im/post/5d664e5f6fb9a06b317b731f\">vue-cli 3.0 脚手架，从入门到放弃（二）</a></td>\n<td>想写好代码，和用好一个工具是离不开的， 一般我们使用的工具有 HuilderX,sublimetext3，vscode，webstorm 等，个人目前使用的是 hb，和 vscode，可以根据个人爱好各自选择，但一定要熟练。</td>\n</tr>\n<tr>\n<td><a href=\"https://juejin.im/post/5d67a791518825284734623c\">vue-cli 3.0 脚手架，从入门到放弃（三）</a></td>\n<td>来总结下流程， 从我们 npm run serve 开始，打开 localhost:8080 端口，首先会加载 index.html。然后去 app.vue 里查找路由组件，这是会调动 router.js 里的配置，选择首先要打开哪个文件，找到我们的那个 path：’/' 的页面，浏览器显示。完成。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2019-年上旬\"><a class=\"markdownIt-Anchor\" href=\"#2019-年上旬\">#</a> 2019 年上旬</h2>\n<p>不要叫我达芬奇</p>\n<p>2019.01-2019.07</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000019391756\">尤雨溪大大在 6 月 4 日的 Vue3.0 的技术分享</a></li>\n<li><a href=\"https://juejin.im/post/5cf8b51ae51d45590a445b0d\">你了解 vue3.0 响应式数据怎么实现吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI1NDU3NzM5Mg==&amp;mid=2247483764&amp;idx=1&amp;sn=df7dbf5c4e910a6e1893a0b57b0dd727\">Vue 3.0 前的 TypeScript 最佳入门实践</a></li>\n<li><a href=\"https://juejin.im/post/5d03140a5188253d592e070e\">Vue 3.0 的重大改动暴露了哪些问题</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NDAzMjE5NQ==&amp;mid=2247484394&amp;idx=1&amp;sn=9d929ffcc9172a102f1718926e721123\">尤雨溪关于 VUE3.0 进展的重磅分享</a></li>\n<li><a href=\"https://juejin.im/post/5d1705e65188255ca21e607e\">提前使用 Vue 3.0 新特性，vue-function-api 尝鲜</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000019631849\">为 vue3 学点 typescript (1), 体验 typescript</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000019625934\">精读《Vue3.0 Function API》</a></li>\n<li><a href=\"https://segmentfault.com/a/11900000196\">为 vue3 学点 typescript, 基础类型和入门高级类型</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/TwUubgCH0c0tue12CBNTzg\">揭秘 Vue 3.0 最具潜力的 API</a></li>\n<li>[面向未来编程，如何在 Vue2 中使用 Vue3 的语法<a href=\"https://juejin.im/post/5d25b6dde51d45775c73dd70\">实践篇]</a></li>\n<li><a href=\"http://blog.poetries.top/2019/06/01/vue-cli3/\">Vue CLI 3 项目构建基础</a></li>\n<li><a href=\"https://juejin.im/post/5cf8b51ae51d45590a445b0d\">你了解 vue3.0 响应式数据怎么实现吗？</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000019457171\">模拟 vue3.0 rfcs  <code>createComponent</code>  api 中的 <code>props</code>  类型推导</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000018531202\">Vue-cli 3.5.1 + Webstorm 使用手机访问演示页面</a></li>\n<li><a href=\"https://juejin.im/post/5cbc7a06f265da03587bfad0\">用 vue3 公开的思路从 0 实现最简化的 vue</a></li>\n<li><a href=\"https://juejin.im/post/5c9477ad6fb9a070ce31b050\">在 WebStorm 中，配置能够识别 Vue CLI 3 创建的项目的别名 alias @</a></li>\n<li><a href=\"https://juejin.im/post/5cc18abdf265da039e1ff5fb\">配置一个 vue3.0 项目</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000018989241\">快速上手最新的 Vue CLI 3</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000018729701\">Vue-CLI 3.x 自动部署项目至服务器</a></li>\n<li><a href=\"https://juejin.im/post/5ccd4580f265da038932a461\">Vue-Cli 3.0 从 0 开始搭建项目（篇 1）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000018833999\">入手 vue-cli 3.x</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000018531202\">Vue-cli 3.5.1 + Webstorm 使用手机访问演示页面</a></li>\n<li><a href=\"https://juejin.im/post/5cbc40ea6fb9a068b65e2aa6\">关于 vue-cli 3 配置打包优化要点</a></li>\n</ul>\n<h2 id=\"2018-年预告\"><a class=\"markdownIt-Anchor\" href=\"#2018-年预告\">#</a> 2018 年预告</h2>\n<p>天寒之时必封初冬</p>\n<h3 id=\"1-vue-cli-3-搭建-vuevuex-最全分析\"><a class=\"markdownIt-Anchor\" href=\"#1-vue-cli-3-搭建-vuevuex-最全分析\">#</a> 1、<a href=\"https://yq.aliyun.com/articles/646152\">Vue CLI 3 搭建 vue+vuex 最全分析</a></h3>\n<blockquote>\n<p>介绍 Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。有三个组件： CLI：@vue/cli 全局安装的 npm 包，提供了终端里的 vue 命令（如：vue create 、vue serve 、vue ui 等命令） CLI 服务：@vue/cli-service 是一个开发环境依赖。</p>\n</blockquote>\n<h3 id=\"2-vuejs-2-vs-vuejs-3-的实现\"><a class=\"markdownIt-Anchor\" href=\"#2-vuejs-2-vs-vuejs-3-的实现\">#</a> 2、<a href=\"https://www.cnblogs.com/wwhhq/p/8196251.html\">Vue.js 2 vs Vue.js 3 的实现</a></h3>\n<blockquote>\n<p>vue.js 核心团队已经讨论过将在 Vue3 实现的变化。虽然 API 不会改变，但是数据响应机制（译者注：对数据改变的监听和通知）发生了变化。这意味着什么呢，同时它对你意味着什么呢？</p>\n</blockquote>\n<h3 id=\"3-vue30-快速创建项目\"><a class=\"markdownIt-Anchor\" href=\"#3-vue30-快速创建项目\">#</a> 3、<a href=\"https://blog.csdn.net/xuqipeter/article/details/80452271\">vue3.0 快速创建项目</a></h3>\n<blockquote>\n<p>vue3.0 使用了 cli3 快捷搭建的技巧和配搭</p>\n</blockquote>\n<h3 id=\"4-vuejs-30-ppt附部分中文翻译\"><a class=\"markdownIt-Anchor\" href=\"#4-vuejs-30-ppt附部分中文翻译\">#</a> 4、<a href=\"https://juejin.im/post/5bed9c31e51d4516f64d528a\">Vue.js 3.0 PPT（附部分中文翻译）</a></h3>\n<blockquote>\n<p>Evan You 刚刚发布了最新的 Vue 3 和他在 Vue Toronto 的演讲内容：</p>\n</blockquote>\n<h3 id=\"5-vue30-初体验有哪些实用新功能\"><a class=\"markdownIt-Anchor\" href=\"#5-vue30-初体验有哪些实用新功能\">#</a> 5、<a href=\"https://www.jianshu.com/p/0d78ff9fe6ed\">vue3.0 初体验有哪些实用新功能</a></h3>\n<blockquote>\n<p>关于项目创建，除了命令创建 3.x 还增加了图形化界面创建以及管理 vue 项目 在创建新项目时还可以混合选用多种集成</p>\n</blockquote>\n<h3 id=\"6-vue-30-的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#6-vue-30-的生命周期\">#</a> 6、<a href=\"https://www.cnblogs.com/weihengblog/p/9241136.html\">Vue 3.0 的生命周期</a></h3>\n<blockquote>\n<p>ue 3.0 的生命周期多了哪些东西和其中又改变了什么</p>\n</blockquote>\n<h3 id=\"7-vue-cli-30-初体验\"><a class=\"markdownIt-Anchor\" href=\"#7-vue-cli-30-初体验\">#</a> 7、<a href=\"http://www.imooc.com/article/79631\">Vue-cli 3.0 初体验</a></h3>\n<blockquote>\n<p>如今上 Vue 官网一看，脚手架都早已出 3.0 版了。唉，果然干这行一天不学习都感觉要落伍……</p>\n</blockquote>\n<h3 id=\"8-重磅vue-cli-30-正式发布带来多项重大更新\"><a class=\"markdownIt-Anchor\" href=\"#8-重磅vue-cli-30-正式发布带来多项重大更新\">#</a> 8、<a href=\"https://baijiahao.baidu.com/s?id=1608931885589870861\">重磅！Vue CLI 3.0 正式发布，带来多项重大更新</a></h3>\n<blockquote>\n<p>近日，Vue 的作者尤雨溪在 Medium 上宣布正式发布 Vue CLI 3.0，它也将为很多开发者带来期待已久的新特性。</p>\n</blockquote>\n<h3 id=\"9-译文vuejs-30-开发计划\"><a class=\"markdownIt-Anchor\" href=\"#9-译文vuejs-30-开发计划\">#</a> 9、<a href=\"https://www.toutiao.com/a6611073486846689795/\">译文：Vue.js 3.0 开发计划</a></h3>\n<blockquote>\n<p>在上周的 Vue.js 伦敦会议上我简短地透露了下个版本的 Vue 的新特性。这篇文章讲深入地阐述</p>\n</blockquote>\n<h3 id=\"10-vue-下个版本的计划-vue-cli-23-下的项目优化实践cdn-gzip-prerender\"><a class=\"markdownIt-Anchor\" href=\"#10-vue-下个版本的计划-vue-cli-23-下的项目优化实践cdn-gzip-prerender\">#</a> 10、<a href=\"https://www.toutiao.com/a6613157936636101127/\">Vue 下个版本的计划。Vue CLI 2&amp;3 下的项目优化实践：CDN + Gzip + Prerender</a></h3>\n<blockquote>\n<p>这些优化方案适用于 Vue CLI 2 和 Vue CLI 3 , 文章主要基于 Vue CLI 2 进行介绍，关于如何在 Vue CLI 3 中进行相关的 webpack 调整，我已经放在了 vue-cli3-optimization 这个仓库下，并配有详细的注释，且额外添加方便 Sass 使用的 loader，使用 Sass 时无需再在每个需要引入变量和 mixin 的地方，每次都很麻烦的 @import。下面将详细介绍这些优化方案的实践方式和效果。</p>\n</blockquote>\n<h3 id=\"11-vue-cli-3-发布精简配置增加图形界面还有这些新功能\"><a class=\"markdownIt-Anchor\" href=\"#11-vue-cli-3-发布精简配置增加图形界面还有这些新功能\">#</a> 11、<a href=\"https://www.toutiao.com/a6589191783790412301/\">Vue CLI 3 发布：精简配置，增加图形界面，还有这些新功能</a></h3>\n<blockquote>\n<p>不同的项目往往有不同的需求，所以 webpack 这种高可配的打包工具才会火起来，但同时也被骂太复杂了。所以很多人就想简化或者封装配置，例如 facebook/create-react-app 将所有的配置脚本封装为 NPM 软件包。</p>\n</blockquote>\n<h3 id=\"12-专访-vue-作者尤雨溪vue-cli-30-重构的原因\"><a class=\"markdownIt-Anchor\" href=\"#12-专访-vue-作者尤雨溪vue-cli-30-重构的原因\">#</a> 12、<a href=\"https://www.toutiao.com/a6598367147800396295/\">专访 Vue 作者尤雨溪：Vue CLI 3.0 重构的原因</a></h3>\n<blockquote>\n<p>上个月，Vue CLI 3.0 正式发布，为很多开发者带来期待已久的新特性，尤雨溪也说 Vue CLI 3.0 经历了重构，旨在尽可能减少现代前端工具在配置上的烦恼，并尽可能在工具链中加入最佳实践，让其成为 Vue 应用程序的默认实践。为了获取更多细节，InfoQ 采访了尤雨溪，以下是对采访内容的整理。</p>\n</blockquote>\n<h3 id=\"13-重磅尤雨溪发布-vue-30-开发路线\"><a class=\"markdownIt-Anchor\" href=\"#13-重磅尤雨溪发布-vue-30-开发路线\">#</a> 13、<a href=\"https://www.toutiao.com/a6607650510172324365/\">重磅！尤雨溪发布 Vue 3.0 开发路线</a></h3>\n<blockquote>\n<p>在上周的 Vue.js 伦敦大会上，尤雨溪简要介绍了 Vue 下一个主要版本要发布的内容，9 月 30 日，尤雨溪在 medium 个人博客上发布了 Vue 3.0 的开发路线，全文如下</p>\n</blockquote>\n<h2 id=\"卖艺不卖身\"><a class=\"markdownIt-Anchor\" href=\"#卖艺不卖身\">#</a> 卖艺不卖身</h2>\n<p>博学之，审问之，慎思之，明辨之，笃行之。</p>\n<p>作者：<a href=\"https://github.com/bluezhan\">蓝少 (@bluezhan)</a> 版权声明：自由转载 - 非商用 - 非衍生 - 保持署名（<a href=\"http://creativecommons.org/licenses/by/4.0/\">创意共享 3.0 许可证</a>）</p>\n<h2 id=\"license\"><a class=\"markdownIt-Anchor\" href=\"#license\">#</a> License</h2>\n<p>Released under the MIT License.</p>\n<h2 id=\"about\"><a class=\"markdownIt-Anchor\" href=\"#about\">#</a> About</h2>\n<p>🎯Find the latest breaking √vue3 &amp; vue-cli 3+ News.</p>\n<p><a href=\"https://vue3.github.io/vue3-News/\">vue3.github.io/vue3-news/</a></p>\n<h3 id=\"topics\"><a class=\"markdownIt-Anchor\" href=\"#topics\">#</a> Topics</h3>\n<p><a href=\"https://github.com/topics/vue3\">vue3</a> <a href=\"https://github.com/topics/vue-router\">vue-router</a> <a href=\"https://github.com/topics/vue-components\">vue-components</a> <a href=\"https://github.com/topics/weekly\">weekly</a> <a href=\"https://github.com/topics/news\">news</a> <a href=\"https://github.com/topics/vue\">vue</a> <a href=\"https://github.com/topics/vue-cli\">vue-cli</a> <a href=\"https://github.com/topics/typescript\">typescript</a> <a href=\"https://github.com/topics/vue-composition-api\">vue-composition-api</a> <a href=\"https://github.com/topics/vue-mastery\">vue-mastery</a> <a href=\"https://github.com/topics/vite\">vite</a> <a href=\"https://github.com/topics/vue3-cheatsheet\">vue3-cheatsheet</a></p>\n<h3 id=\"resources\"><a class=\"markdownIt-Anchor\" href=\"#resources\">#</a> Resources</h3>\n<p><a href=\"https://github.com/vue3/vue3-News#readme\"> Readme</a></p>\n<h3 id=\"license-2\"><a class=\"markdownIt-Anchor\" href=\"#license-2\">#</a> License</h3>\n<p><a href=\"https://github.com/vue3/vue3-News/blob/master/LICENSE\"> MIT License</a></p>\n<h2 id=\"releases\"><a class=\"markdownIt-Anchor\" href=\"#releases\">#</a> <a href=\"https://github.com/vue3/vue3-News/releases\">Releases</a></h2>\n<p>No releases published</p>\n<h2 id=\"packages\"><a class=\"markdownIt-Anchor\" href=\"#packages\">#</a> <a href=\"https://github.com/vue3/vue3-News/packages\">Packages</a></h2>\n<p>No packages published</p>\n<h2 id=\"languages\"><a class=\"markdownIt-Anchor\" href=\"#languages\">#</a> Languages</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/vue3/vue3-News/search?l=vue\">Vue93.4%</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/vue3/vue3-News/search?l=typescript\">TypeScript4.8%</a></p>\n</li>\n<li>\n<p>Other1.8%</p>\n</li>\n<li>\n<p>© 2020 GitHub, Inc.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/site/terms\">Terms</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/site/privacy\">Privacy</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/security\">Security</a></p>\n</li>\n<li>\n<p><a href=\"https://githubstatus.com/\">Status</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.github.com/\">Help</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/contact\">Contact GitHub</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/pricing\">Pricing</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.github.com/\">API</a></p>\n</li>\n<li>\n<p><a href=\"https://services.github.com/\">Training</a></p>\n</li>\n<li>\n<p><a href=\"https://github.blog/\">Blog</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/about\">About</a></p>\n</li>\n</ul>\n<p>Octotree</p>\n<p>IMPORTANT: OCTOTREE 6.0</p>\n<p>Login with GitHub</p>\n",
            "tags": [
                "Vue3"
            ]
        },
        {
            "id": "http://example.com/2020/09/22/Mactoolinto/",
            "url": "http://example.com/2020/09/22/Mactoolinto/",
            "title": "mac 实用工具",
            "date_published": "2020-09-22T02:25:15.000Z",
            "content_html": "<h2 id=\"macos-图床客户端-upic\"><a class=\"markdownIt-Anchor\" href=\"#macos-图床客户端-upic\">#</a> macOS 图床客户端 uPic</h2>\n<p><strong>uPic 介绍</strong></p>\n<p>uPic 采用 Swift 原生开发，通过调用各个服务商的 API 接口实现。体积小、速度快。支持多种图床：<a href=\"https://sm.ms/\">smms</a>, <a href=\"https://www.upyun.com/products/file-storage\">又拍云 USS</a>, <a href=\"https://www.qiniu.com/products/kodo\">七牛云 KODO</a>, <a href=\"https://www.aliyun.com/product/oss/\">阿里云 OSS</a>, <a href=\"https://cloud.tencent.com/product/cos\">腾讯云 COS</a>, <a href=\"https://cloud.baidu.com/product/bos.html\">百度云 BOS</a>, <a href=\"https://weibo.com/\">微博</a>，<a href=\"https://github.com/settings/tokens\">Github</a>, <a href=\"https://gitee.com/profile/personal_access_tokens\">码云 Gitee</a>, <a href=\"https://aws.amazon.com/cn/s3/\">Amazon S3</a>, <a href=\"https://imgur.com/\">Imgur</a>, <a href=\"https://blog.svend.cc/upic/tutorials/custom\">自定义上传服务</a>。</p>\n<p>支持多种常用的输出格式，并且提供上传前图片压缩功能 (支持 JPG、PNG)。等等一些小功能…</p>\n<p>用法介绍：<a href=\"https://blog.svend.cc/upic/\">https://blog.svend.cc/upic/</a></p>\n<p>下载方式：从 <a href=\"https://github.com/gee1k/uPic/releases\">Github release</a> 下载。<br>\n<strong>如果访问 Github 下载困难的，可以从<a href=\"https://gitee.com/gee1k/uPic/releases\"> Gitee release</a> 下载。</strong></p>\n<p><img src=\"http://static.zxinc520.com/uPic/0usjjR.jpg\" alt=\"img\"></p>\n<h2 id=\"parallels-desktop-虚拟机破解版\"><a class=\"markdownIt-Anchor\" href=\"#parallels-desktop-虚拟机破解版\">#</a> parallels desktop 虚拟机破解版</h2>\n<blockquote>\n<p>百度网盘：链接: <a href=\"https://pan.baidu.com/s/1fq_q5VZCto92mhzT8qUtrQ\">https://pan.baidu.com/s/1fq_q5VZCto92mhzT8qUtrQ</a>  密码: dkia</p>\n</blockquote>\n<p>Parallels Desktop 是一款运行在 Mac 电脑上的极为优秀的<a href=\"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E6%9C%BA\">虚拟机</a>软件，用户可以在 Mac OS X 下非常方便运行 Windows、Linux 等操作系统及应用，用户不必繁琐重复地重启电脑即可在 Win 与 Mac 之间切换甚至同时使用它们。</p>\n<h3 id=\"系统要求\"><a class=\"markdownIt-Anchor\" href=\"#系统要求\">#</a> 系统要求</h3>\n<h3 id=\"硬件\"><a class=\"markdownIt-Anchor\" href=\"#硬件\">#</a> 硬件</h3>\n<ul>\n<li>配置 Intel Core 2 Duo / Core i3 / Core i5 / Core i7 / Core i9 / Intel Core M / Xeon 处理器的 Mac 电脑</li>\n<li>最低 4GB 内存（16GB 更佳）</li>\n<li>引导卷（Macintosh HD）需要配置 500MB 的磁盘空间以用于安装 Parallels Desktop 应用程序</li>\n<li>虚拟机的额外磁盘空间（由安装的操作系统以及应用程序决定，例如，Windows 10 至少需要 16GB）</li>\n<li>推荐采用 SSD 驱动器以提升系统性能</li>\n<li>需要联网以用于产品激活和部分功能的使用 [1]</li>\n</ul>\n<h3 id=\"软件\"><a class=\"markdownIt-Anchor\" href=\"#软件\">#</a> 软件</h3>\n<ul>\n<li>macOS Catalina 10.15</li>\n<li>macOS Mojave 10.14</li>\n<li>macOS High Sierra 10.13</li>\n<li>macOS Sierra 10.12</li>\n<li>DirectX 11 最低满足 macOS Mojave 10.14，若满足 macOS 10.15 Catalina 则更佳 [1]</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/uPic/U16E2j.png\" alt=\"\"></p>\n<h2 id=\"switchhosts\"><a class=\"markdownIt-Anchor\" href=\"#switchhosts\">#</a> SwitchHosts</h2>\n<p>SwitchHosts 是一个管理、快速切换 Hosts 小工具，开源软件，一键切换 Hosts 配置，非常实用，高效。<br>\n开发 Web 过程成，部署有多套环境，网址域名都相同，部署在不同的服务器上，有开发环境、测试环境、预发布环境、生产环境。经常要切换 Hosts 来访问，测试以及验证 bug，如果纯手工修改这会花掉不少时间，而且这个过程毫无乐趣可言。</p>\n<p><img src=\"http://static.zxinc520.com/uPic/39bQ8O.png\" alt=\"39bQ8O\"></p>\n<p><img src=\"http://static.zxinc520.com/uPic/HCzyQU.png\" alt=\"HCzyQU\"></p>\n<h2 id=\"mindmaster\"><a class=\"markdownIt-Anchor\" href=\"#mindmaster\">#</a> Mindmaster</h2>\n<blockquote>\n<p>破解版：链接: <a href=\"https://pan.baidu.com/s/1JRZrSSWJEUg0Smn2FpLKcA\">https://pan.baidu.com/s/1JRZrSSWJEUg0Smn2FpLKcA</a>  密码: t239</p>\n</blockquote>\n<p>MindMaster 思维导图 [1] 是<a href=\"https://baike.baidu.com/item/%E6%B7%B1%E5%9C%B3%E5%B8%82%E4%BA%BF%E5%9B%BE%E8%BD%AF%E4%BB%B6%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8\">深圳市亿图软件有限公司</a>推出的一款跨平台思维导图软件。 [2] 软件提供了丰富的智能布局、多样性的展示模式、结合精美的设计元素和预置的主题样式，努力帮用户打造一款真正的效率工具。 [2]</p>\n<p><img src=\"http://static.zxinc520.com/uPic/gQGOkP.png\" alt=\"gQGOkP\"></p>\n<h2 id=\"windows10-ios\"><a class=\"markdownIt-Anchor\" href=\"#windows10-ios\">#</a> Windows10 IOS</h2>\n<blockquote>\n<p>百度网盘下载：链接: <a href=\"https://pan.baidu.com/s/1pGba4uRJAAW0Bnn6foi_8A\">https://pan.baidu.com/s/1pGba4uRJAAW0Bnn6foi_8A</a>  密码: r79s</p>\n<p>配合 parallels desktop 虚拟机使用</p>\n</blockquote>\n",
            "tags": [
                "实用工具"
            ]
        },
        {
            "id": "http://example.com/2020/03/23/getOfferHandcode/",
            "url": "http://example.com/2020/03/23/getOfferHandcode/",
            "title": "手撕代码",
            "date_published": "2020-03-23T09:46:34.000Z",
            "content_html": "<h2 id=\"面试专题总结手撕代码\"><a class=\"markdownIt-Anchor\" href=\"#面试专题总结手撕代码\">#</a> 面试专题总结：手撕代码</h2>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>手撕代码地址：<a href=\"https://github.com/ZhChen7/Technical-interview\">地址</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【手撕代码】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h3 id=\"1-promisea规范-then-all-方法\"><a class=\"markdownIt-Anchor\" href=\"#1-promisea规范-then-all-方法\">#</a> 1、Promise（A + 规范）、then、all 方法</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">/*\n     Promise：构造 Promise 函数对象\n     excutor: 执行构造器 （同步执行）\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">excutor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> _that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  _that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 给 promise对象指定 status属性,初始值为 pending</span>\n  _that<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//给 promise 对象指定一个用于储存结果数据的属性</span>\n  _that<span class=\"token punctuation\">.</span>callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每个元素的结构：&#123; onFulfilled()&#123;&#125;, onRejected()&#123;&#125;&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 如果当前状态不是 pending，直接结束</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 将 状态改为 resolved</span>\n    _that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token string\">\"resolved\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 保存 value 数据</span>\n    _that<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 如果有待执行callback 函数，立刻异步执行回调函数</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_that<span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        _that<span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callbacksObj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          callbacksObj<span class=\"token punctuation\">.</span><span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 如果当前状态不是 pending，直接结束</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 将 状态改为 rejected</span>\n    _that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 保存 value 数据</span>\n    _that<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> reason<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 如果有待执行callback 函数，立刻异步执行回调函数</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_that<span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        _that<span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callbacksObj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          callbacksObj<span class=\"token punctuation\">.</span><span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">//立刻同步执行 excutor</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">excutor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//如果执行器抛出异常，promise对象变为 rejected 状态</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*\n          Promise原型对象的 then() --- *思路*\n\n            1、指定成功和失败的回调函数\n            2、返回一个新的 promise 对象\n            3、返回promise的结果由 onFulfilled/onRejected执行结果决定\n            4、指定 onFulfilled/onRejected的默认值\n         */</span>\n<span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">then</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulfilled<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  onFulfilled <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">typeof</span> onFulfilled <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onFulfilled</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> reason<span class=\"token punctuation\">;</span> <span class=\"token comment\">//向后传递成功的value</span>\n\n  <span class=\"token comment\">//指定默认的失败的回调（实现错误/异常穿透的关键点）</span>\n  onRejected <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">typeof</span> onRejected <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span>\n      <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onRejected</span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">//向后传递失败的reason</span>\n          <span class=\"token keyword\">throw</span> reason<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> _that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//返回一个新的promise 对象</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/*\n                    调用指定的回调函数处理，根据执行结果，改变return的promise的状态\n                 */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">/*\n                           1. 如果抛出异常，return 的promise就会失败，reason 就是 error\n                           2. 如果回调函数返回的不是promise，return的promise就会成功，value就是返回的值\n                           3.如果回调函数返回的是promise，return的promise的结果就是这个promise的结果\n                        */</span>\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>_that<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 3.如果回调函数返回的是promise，return的promise的结果就是这个promise的结果</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// result.then(</span>\n          <span class=\"token comment\">//     value => resolve(value), //当result成功时，让return的promise也成功</span>\n          <span class=\"token comment\">//     reason => reject(reason)  //当result失败时，让return的promise也失败</span>\n          <span class=\"token comment\">// )</span>\n\n          result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">//  2. 如果回调函数返回的不是promise，return的promise就会成功，value就是返回的值</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//1. 如果抛出异常，return 的promise就会失败，reason 就是 error</span>\n\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//假设当前状态还是 pending 状态，将回调函数 保存起来</span>\n      _that<span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>onFulfilled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//改promise的状态为 onFulfilled状态</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//改promise的状态为 onRejected状态</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"resolved\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//如果当前是resolved状态，异步执行onresolved并改变return的promise状态</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>onFulfilled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//onRejected</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果当前是rejected状态，异步执行onRejected并改变return的promise状态</span>\n        <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n            Promise原型对象的 catch()\n            指定失败的回调函数\n            返回一个新的 promise 对象\n         */</span>\n<span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">catch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">finally</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n            Promise函数对象的 resolve()\n            返回 指定结果的 \"成功\" 的 promise 对象\n         */</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">resolve</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//返回 一个 成功/失败 的promise</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//使用value的结果作为 promise 的结果</span>\n      value<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//value不是promise => promise变为成功，数据是 value</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n            Promise函数对象的 reject()\n            返回 指定结果的 \"失败\" 的 promise 对象\n         */</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">reject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//返回 一个失败的 promise</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n            Promise函数对象的 all()\n            返回 一个promise，只有当所有promise都成功时才成功，否则只要有一个失败就 失败\n         */</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">all</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> length<span class=\"token operator\">:</span> promises<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//用来保存所有成功 value的数组</span>\n  <span class=\"token keyword\">let</span> resolvedCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//遍历获取每一个 promise的结果</span>\n    promises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">//p成功，将成功的 value 保存 values</span>\n        <span class=\"token comment\">// values.push(value)  => 不能这样</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          resolvedCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//成功的次数</span>\n\n          values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n          <span class=\"token comment\">//如果全部成功了，将return的 promise 改为成功</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedCount <span class=\"token operator\">===</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">//只要一个失败了，return 的promise就失败</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n            Promise函数对象的 race()\n            返回 一个promise，其结果由第一个完成的promise来决定\n         */</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">race</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//遍历获取每一个 promise的结果</span>\n    promises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 一旦由成功了，将return 变为失败</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">//只要一个失败了，return 的promise就失败</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-手写-call-apply-bind\"><a class=\"markdownIt-Anchor\" href=\"#2-手写-call-apply-bind\">#</a> 2、手写 call apply bind</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 自定义apply函数</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">apply1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//context为null或者是undefined时,设置默认值</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> global <span class=\"token operator\">:</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  obj<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//undefined 或者 是 null 不是 Iterator 对象，不能被 ...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> arg <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 自定义 call 函数</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">call1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> global <span class=\"token operator\">:</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  obj<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 自定义 bind 函数</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> global <span class=\"token operator\">:</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n  f<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">bound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">f</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  bound<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> bound<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-promise-封装-ajax-方法\"><a class=\"markdownIt-Anchor\" href=\"#3-promise-封装-ajax-方法\">#</a> 3、Promise 封装 Ajax 方法</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> methods<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"4-异步加载图片\"><a class=\"markdownIt-Anchor\" href=\"#4-异步加载图片\">#</a> 4、异步加载图片</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadImageAsync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    image<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    image<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not load image at \"</span> <span class=\"token operator\">+</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    image<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"5-防抖节流\"><a class=\"markdownIt-Anchor\" href=\"#5-防抖节流\">#</a> 5、防抖，节流</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//防抖</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//节流</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> canRun <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>canRun<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    canRun <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      canRun <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"6-圣杯-双飞翼\"><a class=\"markdownIt-Anchor\" href=\"#6-圣杯-双飞翼\">#</a> 6、圣杯、双飞翼</h3>\n<h4 id=\"圣杯\"><a class=\"markdownIt-Anchor\" href=\"#圣杯\">#</a> 圣杯</h4>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">*</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">.container</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 100px 0 100px<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token selector\">.middle,.left,.right</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token selector\">.left</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> -100px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token selector\">.right</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> -100px<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">.middle</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"双飞翼\"><a class=\"markdownIt-Anchor\" href=\"#双飞翼\">#</a> 双飞翼</h4>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">.middle, .left, .right</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">.middle</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> aqua<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">.inner</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 100px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>middle<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>left<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>right<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"7-继承相关\"><a class=\"markdownIt-Anchor\" href=\"#7-继承相关\">#</a> 7、继承相关</h3>\n<h4 id=\"71-原型链继承\"><a class=\"markdownIt-Anchor\" href=\"#71-原型链继承\">#</a> 7.1、原型链继承</h4>\n<ul>\n<li>\n<p>原型链继承的基本思想：是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p>\n<p>如 SubType.prototype = new SuperType ();</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Yvette\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">SubType</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>通过原型来实现继承时，原型会变成另一个类型的实例，原先的实例属性变成了现在的原型属性，该原型的引用类型属性会被所有的实例共享</li>\n<li>在创建子类型的实例时，不能向超类型的构造函数中传递参数</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"72-借用构造函数\"><a class=\"markdownIt-Anchor\" href=\"#72-借用构造函数\">#</a> 7.2、借用构造函数</h4>\n<ul>\n<li>\n<p>其基本思想为：在子类型的构造函数中调用超类型构造函数。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">SuperType</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>可以向超类传递参数</li>\n<li>解决了原型中包含引用类型值被所有实例共享的问题</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>方法都在构造函数中定义，函数复用无从谈起</li>\n<li>另外超类型原型中定义的方法对于子类型而言都是不可见的</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"73-组合继承\"><a class=\"markdownIt-Anchor\" href=\"#73-组合继承\">#</a> 7.3、组合继承</h4>\n<ul>\n<li>\n<p>组合继承指的是将原型链和借用构造函数技术组合到一块，从而发挥二者之长的一种继承模式。基本思路：使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承，既通过在原型上定义方法来实现了函数复用，又保证了每个实例都有自己的属性。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zc\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pink\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">SuperType</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">SubType</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SubType</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> SubType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[ 'pink', 'blue', 'green', 'red' ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[ 'pink', 'blue', 'green' ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>可以向超类传递参数</li>\n<li>每个实例都有自己的属性</li>\n<li>实现了函数复用</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>无论什么情况下，都会调用两次超类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"74-原型式继承\"><a class=\"markdownIt-Anchor\" href=\"#74-原型式继承\">#</a> 7.4、原型式继承</h4>\n<ul>\n<li>\n<p>原型式继承继承的基本思想：在 object () 函数内部，先创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例，从本质上讲，object () 对传入的对象执行了一次浅拷贝。</p>\n<p>ECMAScript5 通过新增 Object.create () 方法规范了原型式继承。这个方法接收两个参数：一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象 (可以覆盖原型对象上的同名属性)，在传入一个参数的情况下，Object.create () 和 object () 方法的行为相同。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>同原型链实现继承一样，包含引用类型值的属性会被所有实例共享</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"75-寄生式继承\"><a class=\"markdownIt-Anchor\" href=\"#75-寄生式继承\">#</a> 7.5、寄生式继承</h4>\n<ul>\n<li>\n<p>寄生式继承是与原型式继承紧密相关的一种思路。寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部已某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAnother</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//通过调用函数创建一个新对象</span>\n  clone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//以某种方式增强这个对象</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回这个对象</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>基于 person 返回了一个新对象 -—— person2，新对象不仅具有 person 的所有属性和方法，而且还有自己的 sayHi () 方法。在考虑对象而不是自定义类型和构造函数的情况下，寄生式继承也是一种有用的模式。</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>使用寄生式继承来为对象添加函数，会由于不能做到函数复用而效率低下。</li>\n<li>同原型链实现继承一样，包含引用类型值的属性会被所有实例共享。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"76-寄生组合式继承\"><a class=\"markdownIt-Anchor\" href=\"#76-寄生组合式继承\">#</a> 7.6、寄生组合式继承</h4>\n<ul>\n<li>\n<p>所谓寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法，基本思路：</p>\n<p>不必为了指定子类型的原型而调用超类型的构造函数，我们需要的仅是超类型原型的一个副本，本质上就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subType<span class=\"token punctuation\">,</span> superType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> prototype <span class=\"token operator\">=</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span>superType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建对象</span>\n  prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> subType<span class=\"token punctuation\">;</span> <span class=\"token comment\">//增强对象</span>\n  subType<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指定对象</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pink\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SuberType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">SuperType</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>SuberType<span class=\"token punctuation\">,</span> SuperType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>步骤</p>\n<p>第一步：创建超类型原型的一个副本</p>\n<p>第二步：为创建的副本添加 constructor 属性</p>\n<p>第三步：将新创建的对象赋值给子类型的原型</p>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>只调用了一次超类构造函数，效率更高。避免在 SuberType.prototype 上面创建不必要的、多余的属性，与其同时，原型链还能保持不变。因此寄生组合继承是引用类型最理性的继承范式。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"77-es6-继承\"><a class=\"markdownIt-Anchor\" href=\"#77-es6-继承\">#</a> 7.7、ES6 继承</h4>\n<ul>\n<li>\n<p>Class 可以通过 extends 关键字实现继承</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperType</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubType</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperType</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类的constructor(x, y)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>对于 ES6 的 class 需要做以下几点说明</p>\n<ol>\n<li>class 声明会提升，但不会初始化赋值。Foo 进入暂时性死区，类似于 let、const 声明变量。</li>\n<li>class 声明内部会启用严格模式。</li>\n<li>class 的所有方法（包括静态方法和实例方法）都是不可枚举的。</li>\n<li>class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有 [[construct]]，不能使用 new 来调用。</li>\n<li>必须使用 new 调用 class</li>\n<li>class 内部无法重写类名</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"使用-extends-关键字实现继承有几点需要特别说明\"><a class=\"markdownIt-Anchor\" href=\"#使用-extends-关键字实现继承有几点需要特别说明\">#</a> 使用 extends 关键字实现继承，有几点需要特别说明</h4>\n<ul>\n<li>子类必须在 constructor 中调用 super 方法，否则新建实例时会报错。如果没有子类没有定义 constructor 方法，那么这个方法会被默认添加。在子类的构造函数中，只有调用 super 之后，才能使用 this 关键字，否则报错。这是因为子类实例的构建，基于父类实例，只有 super 方法才能调用父类实例。</li>\n<li>ES5 的继承，实质是先创造子类的实例对象 this，然后再将父类的方法添加到 this 上面（Parent.apply (this)）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到 this 上面（所以必须先调用 super 方法），然后再用子类的构造函数修改 this</li>\n</ul>\n<h3 id=\"8-自定义-new-过程\"><a class=\"markdownIt-Anchor\" href=\"#8-自定义-new-过程\">#</a> 8、自定义 new 过程</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">_new</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ret <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">?</span> ret <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"9-手写递归方法实现深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#9-手写递归方法实现深拷贝\">#</a> 9、手写递归方法实现深拷贝</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 手写实现深拷贝</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkedType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> targrtType <span class=\"token operator\">=</span> <span class=\"token function\">checkedType</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targrtType <span class=\"token operator\">===</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targrtType <span class=\"token operator\">===</span> <span class=\"token string\">\"Array\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">checkedType</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"Object\"</span> <span class=\"token operator\">||</span> <span class=\"token function\">checkedType</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"Array\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      result<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"10-实现一个柯里化函数\"><a class=\"markdownIt-Anchor\" href=\"#10-实现一个柯里化函数\">#</a> 10、实现一个柯里化函数</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//ES5写法</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currying</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//ES6写法</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currying</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> fn<span class=\"token punctuation\">.</span>length\n    <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>argments</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>argments<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"11-双向绑定手写\"><a class=\"markdownIt-Anchor\" href=\"#11-双向绑定手写\">#</a> 11、双向绑定（手写）</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// Object.defineProperty 写法</span>\n<span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"zc\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newvalue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newvalue<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nobj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token string\">\"111\"</span><span class=\"token punctuation\">;</span>\nvm<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token string\">\"112221\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// Proxy 写法</span>\n<span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">getting </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>propKey<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">setting </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>propKey<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"10-js-发布订阅模式\"><a class=\"markdownIt-Anchor\" href=\"#10-js-发布订阅模式\">#</a> 10、JS 发布订阅模式</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> pubSub <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  list<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">subscribe</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//订阅</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">publish</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//发布</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> fn <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">unSubscribe</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//取消订阅</span>\n    <span class=\"token keyword\">let</span> fnlist <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fnlist<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      fnlist<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      fnlist<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">===</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          fnlist<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\npubSub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onwork\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">上班了：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>time<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npubSub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"offwork\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">下班了：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>time<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npubSub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">吃饭了：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>time<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// // 发布</span>\npubSub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"offwork\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"18:00:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npubSub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12:00:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npubSub<span class=\"token punctuation\">.</span><span class=\"token function\">unSubscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onwork\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npubSub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onwork\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1222:00:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"11-js-获取-url-参数\"><a class=\"markdownIt-Anchor\" href=\"#11-js-获取-url-参数\">#</a> 11、JS 获取 url 参数</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=21331&amp;rsv_pq=b8627e62001efbb9&amp;rsv_t=eef5sqIQ98s66yOwueYH5BWlFUARj0PkHBdCA4ahbSVYQA5qO9MBoZPC0mU&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=5&amp;rsv_sug1=1&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;inputT=509&amp;rsv_sug4=509\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> str1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"12-二叉树\"><a class=\"markdownIt-Anchor\" href=\"#12-二叉树\">#</a> 12、二叉树</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//1、求二叉树中的节点个数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getNodenum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getNodenum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">getNodenum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//2、求二叉树的最大深度</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//3.二叉树的最小深度</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> left <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> right <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> left <span class=\"token operator\">+</span> right <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//4.先序遍历（递归）</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preroot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">preroot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">preroot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//先序遍历（非递归）</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preroot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//5 中序遍历（递归）</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">middleroot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">preroot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">preroot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//5.1 中序遍历（非递归）</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">middleroot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//分层遍历（递归）</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> pointer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">bfsFun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      pointer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">bfsFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">bfsFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//分层遍历（非递归）</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> pointer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pointer <span class=\"token operator\">&lt;</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">[</span>pointer<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">&amp;&amp;</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 按之字形顺序打印二叉树</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">zhiRoot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> stack1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    stack2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> stack2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">&amp;&amp;</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">&amp;&amp;</span> stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> stack1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> stack2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> stack2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">&amp;&amp;</span> stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">&amp;&amp;</span> stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//7、求二叉树第K层的节点个数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getknum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getknum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">getknum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//8.求二叉树第K层的叶子节点个数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getksonnum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getksonnum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">getksonnum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//反转二叉树</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverseRoot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n  root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">reverseRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">reverseRoot</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 求二叉树的直径</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">longerlength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">getlongerlength</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getlongerlength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token function\">longerlength</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token function\">longerlength</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 二叉树中和为某一值的路径</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">findPath</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">findPath</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sum <span class=\"token operator\">+=</span> root<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">&amp;&amp;</span> sum <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">findPath</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">findPath</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//给定一棵二叉搜索树，请找出其中的第k小的结点。(中序遍历+ k小)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"13-实现一个链表\"><a class=\"markdownIt-Anchor\" href=\"#13-实现一个链表\">#</a> 13、实现一个链表</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">linkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  linkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">append</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> newnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  linkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">find</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  linkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fixed</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> newdata</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    current<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> newdata<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  linkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">prefind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  linkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">delete</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">let</span> prenode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">prefind</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    prenode <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  linkedList<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      result <span class=\"token operator\">+=</span> current<span class=\"token punctuation\">.</span>data <span class=\"token operator\">+</span> <span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n      current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">linkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token function\">fixed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"14-哈希表\"><a class=\"markdownIt-Anchor\" href=\"#14-哈希表\">#</a> 14、哈希表</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//链地址法</span>\n<span class=\"token comment\">//装载因子（0.25，0.75）</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//属性</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//存储的位置</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数目</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//最终限制数组的大小</span>\n\n  <span class=\"token comment\">//方法</span>\n  <span class=\"token comment\">// 哈希函数</span>\n  <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">hashFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//1、定义 hashCode变量</span>\n    <span class=\"token keyword\">let</span> hashCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//2、霍纳算法，来计算hashCode的值</span>\n      hashCode <span class=\"token operator\">=</span> <span class=\"token number\">37</span> <span class=\"token operator\">*</span> hashCode <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//3、取余操作</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> hashCode <span class=\"token operator\">%</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//插入&amp;修改操作</span>\n  <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">put</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//1.根据key获取对应的 index</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2、根据 index 取出对应的 bucket</span>\n    <span class=\"token keyword\">let</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//3、判断 bucket是否为空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bucket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      bucket <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//4、判断是否是修改数据</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bucket<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> tuple <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        tuple<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//5.添加操作</span>\n    bucket<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//判断是否需要扩容</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">*</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//获取操作</span>\n  <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bucket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bucket<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> tuple <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> tuple<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bucket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bucket<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> tuple <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        bucket<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//缩小容量</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">></span> <span class=\"token number\">7</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">*</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> tuple<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//哈希表的扩容、</span>\n  <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">resize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newLimit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//1.保存旧的数据内容</span>\n    <span class=\"token keyword\">let</span> oldStorage <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//2. 重置所有的属性</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">=</span> newLimit<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//3.遍历 oldStorage 所有的 bucket</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> oldStorage<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> bucket <span class=\"token operator\">=</span> oldStorage<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bucket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> bucket<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> tuple <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tuple<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"15\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zc1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"115\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"115\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"115\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wew\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"115\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wew\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wew\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"15-图\"><a class=\"markdownIt-Anchor\" href=\"#15-图\">#</a> 15、图</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//栈中的属性</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//1.压入栈push()</span>\n  <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">enqueue</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//2.从队列中删除前端元素</span>\n  <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dequeue</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//3.查看一下前端元素</span>\n  <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">front</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//4.判断栈是否为空</span>\n  <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isEmpty</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//5.获取栈中元素的个数</span>\n  <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">size</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//6.toString方法</span>\n  <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//属性： 顶点（数组）/边（字典）</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertexes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//顶点</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>edges <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//边</span>\n\n  <span class=\"token comment\">//方法</span>\n  <span class=\"token comment\">//增加对应顶点的方法</span>\n  <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addVertex</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertexes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addEdge</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v1<span class=\"token punctuation\">,</span> v2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//实现toString 方法</span>\n  <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//定义字符转，保存最终的结构</span>\n    <span class=\"token keyword\">let</span> resultString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertexes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      resultString <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertexes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> vEdges <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertexes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vEdges<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        resultString <span class=\"token operator\">+=</span> vEdges<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      resultString <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> resultString<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//图的遍历</span>\n\n  <span class=\"token comment\">//初始化状态颜色</span>\n  <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">initializeColor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertexes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      colors<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertexes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> colors<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//广度优先搜索算法(BFS)  基于队列完成</span>\n  <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bfs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initV<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//1.初始化颜色</span>\n    <span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initializeColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//2.创建队列</span>\n    <span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//3.将顶点加入队列中</span>\n    queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>initV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//4.循环从队列中取出元素</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 4.1从队列取出一个顶点</span>\n      <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//4.2 获取和顶点相连的另外顶点</span>\n      <span class=\"token keyword\">let</span> vList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//4.3 将v的颜色设置为灰色</span>\n      colors<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"gray\"</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//4.4  遍历所有的顶点，并且加入到队列中</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> e <span class=\"token operator\">=</span> vList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          colors<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"gray\"</span><span class=\"token punctuation\">;</span>\n          queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">//4.5 访问顶点</span>\n      <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//4.6 将顶点设置为黑色</span>\n      colors<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//广度优先搜索算法（DFS）</span>\n  <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dfs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initV<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initializeColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//递归访问</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dfsVisit</span><span class=\"token punctuation\">(</span>initV<span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dfsVisit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//1.将颜色设置为灰色</span>\n    colors<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"gray\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//2.处理V节点</span>\n    <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//3.访问v相连的顶点</span>\n    <span class=\"token keyword\">let</span> vList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> e <span class=\"token operator\">=</span> vList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dfsVisit</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//4.将v设置为黑色</span>\n    colors<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"16-几种排序算法的实现\"><a class=\"markdownIt-Anchor\" href=\"#16-几种排序算法的实现\">#</a> 16、几种排序算法的实现</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">insert</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">swap</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">m<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//实现排序算法</span>\n  <span class=\"token comment\">//冒泡排序</span>\n  <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bubbles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//选择排序</span>\n  <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">selectSort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          min <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//插入排序</span>\n  <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">insertSort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//高级排序</span>\n  <span class=\"token comment\">//希尔排序 (对插入排序的升级)</span>\n  <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">shellSort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//初始化增量</span>\n    <span class=\"token keyword\">var</span> gap <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// whlie循环</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>gap <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">></span> gap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          j <span class=\"token operator\">-=</span> gap<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      gap <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>gap <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 快排</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> center <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>center<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>center<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> center<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">quickSortFun</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">quickSortFun</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> pivot <span class=\"token operator\">=</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">></span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">quickSortFun</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">quickSortFun</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"17-手写迭代器\"><a class=\"markdownIt-Anchor\" href=\"#17-手写迭代器\">#</a> 17、手写迭代器</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">makeIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> nextindex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextindex <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> value<span class=\"token operator\">:</span> array<span class=\"token punctuation\">[</span>nextindex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> value<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"18-最大连续子序列\"><a class=\"markdownIt-Anchor\" href=\"#18-最大连续子序列\">#</a> 18、最大连续子序列</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// function getNum(arr) &#123;</span>\n<span class=\"token comment\">//     let length = arr.length</span>\n<span class=\"token comment\">//     let maxmun=0</span>\n<span class=\"token comment\">//     for (let i = 0; i &lt;length ; i++) &#123;</span>\n<span class=\"token comment\">//         let sum=arr[i]</span>\n<span class=\"token comment\">//         for (let j = i+1; j &lt; length; j++) &#123;</span>\n<span class=\"token comment\">//             sum+=arr[j]</span>\n<span class=\"token comment\">//             if(sum>maxmun)&#123;</span>\n<span class=\"token comment\">//                 maxmun = sum</span>\n<span class=\"token comment\">//             &#125;</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//         &#125;</span>\n<span class=\"token comment\">//     &#125;</span>\n<span class=\"token comment\">//     return maxmun</span>\n<span class=\"token comment\">// &#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n    max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"19-实现一个-eventlistener-类包含-onoffemit-方法\"><a class=\"markdownIt-Anchor\" href=\"#19-实现一个-eventlistener-类包含-onoffemit-方法\">#</a> 19、实现一个 EventListener 类，包含 on，off，emit 方法</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//实现一个EventListener类，包含on，off，emit方法</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EventListener</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> fn <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> fnlist <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fnlist<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      fnlist<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      fnlist<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">===</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          fnlist<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj1<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我是</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">啊</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj1<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我在</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">啊</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj1<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj1<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj1<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"吃西瓜\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"20-sleep-函数\"><a class=\"markdownIt-Anchor\" href=\"#20-sleep-函数\">#</a> 20、sleep 函数</h3>\n<blockquote>\n<p>用 promise 写一个 delay 函数</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"11111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"21-手写斐波那契\"><a class=\"markdownIt-Anchor\" href=\"#21-手写斐波那契\">#</a> 21、手写斐波那契</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 递归</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getnum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getnum</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">getnum</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getnum</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ----------------------------------</span>\n\n<span class=\"token comment\">//动态规划</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getnum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    temp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> temp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"22-只包含-的字符串判断是否有效\"><a class=\"markdownIt-Anchor\" href=\"#22-只包含-的字符串判断是否有效\">#</a> 22、只包含’(’, ‘)’, ‘[’, ‘]’, ‘{’, ‘}’ 的字符串，判断是否有效。</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isValid</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> rightSymbols <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      rightSymbols<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"&#123;\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      rightSymbols<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      rightSymbols<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightSymbols<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>rightSymbols<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"23-数组中只出现一次的数字\"><a class=\"markdownIt-Anchor\" href=\"#23-数组中只出现一次的数字\">#</a> 23、数组中只出现一次的数字</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"24-数组最大深度\"><a class=\"markdownIt-Anchor\" href=\"#24-数组最大深度\">#</a> 24、数组最大深度</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getDep</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDep</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"25-递归数组扁平化\"><a class=\"markdownIt-Anchor\" href=\"#25-递归数组扁平化\">#</a> 25、递归数组扁平化</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ret<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        ret<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"26-模拟-js-精度丢失问题\"><a class=\"markdownIt-Anchor\" href=\"#26-模拟-js-精度丢失问题\">#</a> 26、模拟 js 精度丢失问题</h3>\n<blockquote>\n<p>IEEE 754 标准</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> num1Digits <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> num2Digits <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> baseNum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>num1Digits<span class=\"token punctuation\">,</span> num2Digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*</span> baseNum <span class=\"token operator\">+</span> num2 <span class=\"token operator\">*</span> baseNum<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> baseNum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"27-单例模式\"><a class=\"markdownIt-Anchor\" href=\"#27-单例模式\">#</a> 27、单例模式</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 单例模式不透明</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">singleTon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nsingleTon<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nsingleTon<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInstance</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">singleTon</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> singleTon<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbbbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> singleTon<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ----------------------------------</span>\n\n<span class=\"token comment\">// 单例模式不透明（闭包）</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">singleTon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nsingleTon<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nsingleTon<span class=\"token punctuation\">.</span>getInstance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> instance <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">singleTon</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> singleTon<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> singleTon<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbbbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> singleTon<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cccccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//\t单例模式透明</span>\n<span class=\"token keyword\">let</span> getInstance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// let getSingle = function (fn) &#123;</span>\n<span class=\"token comment\">//     let result= null</span>\n<span class=\"token comment\">//     return function () &#123;</span>\n<span class=\"token comment\">//        return result || (result = fn.call(this,...arguments))</span>\n<span class=\"token comment\">//     &#125;</span>\n<span class=\"token comment\">// &#125;</span>\n\n<span class=\"token comment\">// 通用的单例验证方法</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSingle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">getSingle</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyyyy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"28-策略模式\"><a class=\"markdownIt-Anchor\" href=\"#28-策略模式\">#</a> 28、策略模式</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 策略类（开发人员）</span>\n<span class=\"token keyword\">var</span> Strategies <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">backend</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进行后端任务：\"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">frontend</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进行前端任务：\"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">testend</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进行测试任务：\"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//  环境类（开发组长）</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Context</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> task</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">typeof</span> Strategies<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> Strategies<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"29-代理模式\"><a class=\"markdownIt-Anchor\" href=\"#29-代理模式\">#</a> 29、代理模式</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//【图片预加载 -- 代理模式】</span>\n\n<span class=\"token comment\">//定义本体</span>\n<span class=\"token keyword\">let</span> myImg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setsrc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//代理函数</span>\n<span class=\"token keyword\">let</span> Proxysetimg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    myImg<span class=\"token punctuation\">.</span><span class=\"token function\">setsrc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setsrc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      myImg<span class=\"token punctuation\">.</span><span class=\"token function\">setsrc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./loading.gif\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Proxysetimg</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./111.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"30-观察者模式\"><a class=\"markdownIt-Anchor\" href=\"#30-观察者模式\">#</a> 30、观察者模式</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 目标者类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 观察者列表</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 添加</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 删除</span>\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">===</span> observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    idx <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 通知</span>\n  <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> observer <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      observer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 观察者类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 目标对象更新时触发的回调</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">目标者通知我更新了，我是：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 实例化目标者</span>\n<span class=\"token keyword\">let</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 实例化两个观察者</span>\n<span class=\"token keyword\">let</span> obs1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前端开发者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obs2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后端开发者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 向目标者添加观察者</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obs1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obs2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 目标者通知更新</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出：</span>\n<span class=\"token comment\">// 目标者通知我更新了，我是前端开发者</span>\n<span class=\"token comment\">// 目标者通知我更新了，我是后端开发者</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"31-命令模式\"><a class=\"markdownIt-Anchor\" href=\"#31-命令模式\">#</a> 31、命令模式</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Receiver</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 接收者类</span>\n  <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收者执行请求\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 命令对象类</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>receiver <span class=\"token operator\">=</span> receiver<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 调用接收者对应接口执行</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"命令对象->接收者->对应接口执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>receiver<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Invoker</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 发布者类</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">command</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command <span class=\"token operator\">=</span> command<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 发布请求，调用命令对象</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发布者发布请求\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> warehouse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Receiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 仓库</span>\n<span class=\"token keyword\">const</span> order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Command</span><span class=\"token punctuation\">(</span>warehouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 订单</span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 客户</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"32-promise-处理文件读取\"><a class=\"markdownIt-Anchor\" href=\"#32-promise-处理文件读取\">#</a> 32、Promise 处理文件读取</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readfile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token parameter\">error<span class=\"token punctuation\">,</span>\n      data</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./01.txt\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./02.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./03.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"33-generator-函数文件读取\"><a class=\"markdownIt-Anchor\" href=\"#33-generator-函数文件读取\">#</a> 33、 Generator 函数文件读取</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readfile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./01.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./02.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./03.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresult\n  <span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"34-async-函数文件读取\"><a class=\"markdownIt-Anchor\" href=\"#34-async-函数文件读取\">#</a> 34、async 函数文件读取</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readfile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./01.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./02.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> f3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./03.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "面试全面总结",
                "promise",
                "手撕代码"
            ]
        },
        {
            "id": "http://example.com/2020/03/23/getOfferAPI/",
            "url": "http://example.com/2020/03/23/getOfferAPI/",
            "title": "API、数组、跨域、动画、事件",
            "date_published": "2020-03-23T09:40:43.000Z",
            "content_html": "<h4 id=\"面试专题总结-api-数组-跨域-动画-事件\"><a class=\"markdownIt-Anchor\" href=\"#面试专题总结-api-数组-跨域-动画-事件\">#</a> 面试专题总结： API、数组、跨域、动画、事件</h4>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【API、数组、跨域、动画、事件】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h3 id=\"1-数组\"><a class=\"markdownIt-Anchor\" href=\"#1-数组\">#</a> 1、数组</h3>\n<ul>\n<li>改变原数组的 API\n<ol>\n<li>push()</li>\n<li>unshift()</li>\n<li>pop()</li>\n<li>shift()</li>\n<li>reverse()</li>\n<li>splice(index, count, value1, value2…)\n<ul>\n<li>从索引位 index 处删除 count 个元素，插入 value1, value2 等元素，返回被删除的元素组成的新数组 (改变原数组)</li>\n</ul>\n</li>\n<li>sort()</li>\n</ol>\n</li>\n<li>不改变原数组的 API\n<ol>\n<li>join(value)\n<ul>\n<li>将数组用 value 连接为字符串，返回被连接后的字符串 (不改变原数组)</li>\n<li>将数组用 value 连接为字符串，返回被连接后的字符串 (不改变原数组)</li>\n</ul>\n</li>\n<li>获取子数组，包含原数组索引 start 的值到索引 end 的值，不包含 end，返回获取的子数组 (不改变原数组)</li>\n<li>toString()\n<ul>\n<li>将数组中的元素用逗号拼接成字符串，返回拼接后的字符串 (不改变原数组)</li>\n</ul>\n</li>\n<li>indexOf(value)\n<ul>\n<li>从索引为 0 开始，检查数组中是否包含有 value，有则返回匹配到的第一个索引，没有则返回 - 1 (不改变原数组)</li>\n</ul>\n</li>\n<li>lastIndexOf(value)\n<ul>\n<li>从最后的索引开始，检查数组找那个是否包含 value，有则返回匹配到的第一个索引，没有返回 - 1 (不改变原数组)</li>\n</ul>\n</li>\n<li>concat(value)\n<ul>\n<li>将数组和 (或) 值连接成新数组，返回新数组 (不改变原数组)</li>\n</ul>\n</li>\n<li>forEach()\n<ul>\n<li>对数组进行遍历循环，对数组中每一项运行给定函数，参数都是 function 类型，默认有传参，参数分别为：遍历数组内容、对应的数组索引、数组本身。没有返回值</li>\n</ul>\n</li>\n<li>map()\n<ul>\n<li>指 “映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的新数组</li>\n</ul>\n</li>\n<li>filter()\n<ul>\n<li>“过滤” 功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组</li>\n</ul>\n</li>\n<li>every()\n<ul>\n<li>判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回 true</li>\n</ul>\n</li>\n<li>some()\n<ul>\n<li>判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回 true</li>\n</ul>\n</li>\n<li>reduce()\n<ul>\n<li>接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"2-类数组转变为数组的方法\"><a class=\"markdownIt-Anchor\" href=\"#2-类数组转变为数组的方法\">#</a> 2、类数组转变为数组的方法</h3>\n<ul>\n<li>类数组的定义\n<ul>\n<li>可以通过索引访问元素，并且拥有 length 属性</li>\n<li>没有数组的其他方法，例如 push ， forEach ， indexOf 等。</li>\n</ul>\n</li>\n<li>ES5\n<ul>\n<li>Array.prototype.slice.call () 等同于 [].slice.call (arguments)</li>\n</ul>\n</li>\n<li>ES6\n<ul>\n<li>Array.from()</li>\n<li>… 扩展运算符</li>\n<li>for of 直接遍历类数组（iterator 接口）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-稀疏数组和密集数组\"><a class=\"markdownIt-Anchor\" href=\"#3-稀疏数组和密集数组\">#</a> 3、稀疏数组和密集数组</h3>\n<ul>\n<li>稀疏数组\n<ul>\n<li>是什么\n<ul>\n<li>具有不连续索引的数组，其 length 属性值大于元素的个数。</li>\n</ul>\n</li>\n<li>造成稀疏数组的操作\n<ol>\n<li>delete 操作符</li>\n<li>构造函数</li>\n<li>在数组字面量中省略值</li>\n<li>指定数组索引大于数组长度</li>\n<li>指定数组长度大于当前数组长度</li>\n</ol>\n</li>\n<li>缺点\n<ul>\n<li>操作的不统一</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>密集数组\n<ul>\n<li>是什么\n<ul>\n<li>具有连续索引的数组，其 length 属性值等于元素的个数。</li>\n</ul>\n</li>\n<li>创建方式\n<ol>\n<li>Array.apply(null, Array(3)) || Array.apply(null, {length: 3})</li>\n<li>Array.from({length: 3})</li>\n<li>[…Array(4)]</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-柯里化函数\"><a class=\"markdownIt-Anchor\" href=\"#4-柯里化函数\">#</a> 4、柯里化函数</h3>\n<ul>\n<li>\n<p>定义</p>\n<ul>\n<li>柯里化，即 Currying 的音译。 Currying 是编译原理层面实现多参函数的一个技术。</li>\n</ul>\n</li>\n<li>\n<p>手写柯里化函数</p>\n<ul>\n<li>\n<p>ES5 写法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currying</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>ES6 写法（箭头函数）</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currying</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> fn<span class=\"token punctuation\">.</span>length\n    <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>argments</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>argments<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-window-全局对象bom\"><a class=\"markdownIt-Anchor\" href=\"#5-window-全局对象bom\">#</a> 5、window 全局对象（BOM）</h3>\n<ol>\n<li>navigator 导航器对象\n<ul>\n<li>Navigator 对象包含有关浏览器的信息</li>\n<li>appCodeName 返回浏览器的代码名</li>\n<li>appName 返回浏览器的名称</li>\n<li>appVersion 返回浏览器的平台和版本信息</li>\n<li>cookieEnabled 返回指明浏览器中是否启用 cookie 的布尔值</li>\n<li>platform 返回运行浏览器的操作系统平台</li>\n<li>userAgent 返回由客户机发送服务器的 user-agent 头部的值</li>\n</ul>\n</li>\n<li>screen 显示器对象</li>\n<li>history 历史对象\n<ul>\n<li>back () 返回前一个 URL</li>\n<li>forward () 返回下一个 URL</li>\n<li>go () 返回某个具体页面</li>\n</ul>\n</li>\n<li>location 位置对象\n<ul>\n<li>属性\n<ul>\n<li>hash 设置或返回从井号 (#) 开始的 URL（锚）。</li>\n<li>host 设置或返回主机名和当前 URL 的端口号。</li>\n<li>hostname 设置或返回当前 URL 的主机名</li>\n<li>href 设置或返回完整的 URL</li>\n<li>pathname 设置或返回当前 URL 的路径部分。</li>\n<li>port 设置或返回当前 URL 的端口号。</li>\n<li>protocol 设置或返回当前 URL 的协议。</li>\n<li>search 设置或返回从问号 (?) 开始的 URL（查询部分）。</li>\n</ul>\n</li>\n<li>方法\n<ul>\n<li>assign (URL) 加载新的文档</li>\n<li>reload () 重新加载当前页面</li>\n<li>replace (newURL) 用新的文档替换当前文档</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>document 文档对象【DOM】</li>\n</ol>\n<h3 id=\"6-ajax-和-fetch\"><a class=\"markdownIt-Anchor\" href=\"#6-ajax-和-fetch\">#</a> 6、ajax 和 fetch</h3>\n<h4 id=\"61-ajax\"><a class=\"markdownIt-Anchor\" href=\"#61-ajax\">#</a> 6.1、Ajax</h4>\n<ul>\n<li>\n<p>本质</p>\n<ul>\n<li>是在 HTTP 协议的基础上以异步的方式与服务器进行通信.</li>\n</ul>\n</li>\n<li>\n<p>封装原生 Ajax 请求</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ajaxGet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h4 id=\"62-fetch\"><a class=\"markdownIt-Anchor\" href=\"#62-fetch\">#</a> 6.2、fetch</h4>\n<ul>\n<li>\n<p>fetch 是什么</p>\n<ul>\n<li>Fetch 是浏览器提供的原生 AJAX 接口。</li>\n</ul>\n</li>\n<li>\n<p>Fetch 为何出现？</p>\n<ul>\n<li>由于原来的 XMLHttpRequest 不符合关注分离原则，且基于事件的模型在处理异步上已经没有现代的 Promise 等那么有优势。因此 Fetch 出现来解决这种问题。</li>\n</ul>\n</li>\n<li>\n<p>Fetch API</p>\n<ul>\n<li>\n<p>Fetch API 提供了能够用于操作一部分 HTTP 的 JavaScript 接口，比如 requests 和 responses。它同时也提供了一个全局的 fetch () 方法 —— 能够简单的异步的获取资源。</p>\n<p>使用 window.fetch 函数可以代替以前的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">.</mi><mi>a</mi><mi>j</mi><mi>a</mi><mi>x</mi><mtext>、</mtext></mrow><annotation encoding=\"application/x-tex\">. ajax、</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">.</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mord cjk_fallback\">、</span></span></span></span>.get 和 $.post。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>用法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies.json\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">myJson</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h4 id=\"63-readystate状态值\"><a class=\"markdownIt-Anchor\" href=\"#63-readystate状态值\">#</a> 6.3、readyState（状态值）</h4>\n<ul>\n<li>readyState 是什么\n<ul>\n<li>readyState 是 XMLHttpRequest 对象的一个属性，用来标识当前 XMLHttpRequest 对象处于什么状态</li>\n</ul>\n</li>\n<li>5 个状态值\n<ul>\n<li>0: 请求未初始化</li>\n<li>1: 载入，XMLHttpRequest 对象开始发送请求</li>\n<li>2: 载入完成，XMLHttpRequest 对象的请求发送完成</li>\n<li>3: 解析，XMLHttpRequest 对象开始读取服务器的响应</li>\n<li>4: 完成，XMLHttpRequest 对象读取服务器响应结束</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"64-status状态码\"><a class=\"markdownIt-Anchor\" href=\"#64-status状态码\">#</a> 6.4、status（状态码</h4>\n<ul>\n<li>\n<p>status 是什么</p>\n<ul>\n<li>status 是 XMLHttpRequest 对象的一个属性，表示响应的 http 状态码</li>\n</ul>\n</li>\n<li>\n<p>在 http1.1 协议下，http 状态码总共可分为 5 大类</p>\n<ul>\n<li>\n<p>1xx：信息响应类，表示接收到请求并且继续处理</p>\n</li>\n<li>\n<p>2xx：处理成功响应类，表示动作被成功接收、理解和接受</p>\n</li>\n<li>\n<p>3xx：重定向响应类，为了完成指定的动作，必须接受进一步处理</p>\n</li>\n<li>\n<p>4xx：客户端错误，客户请求包含语法错误或者是不能正确执行</p>\n</li>\n<li>\n<p>5xx：服务端错误，服务器不能正确执行一个正确的请求</p>\n</li>\n<li>\n<p>一些常见的状态码为</p>\n<p>200 OK：成功，很棒。</p>\n<p>301 永久移动：已永久移动到新位置。</p>\n<p>302（临时移动）：暂时移到新位置。</p>\n<p>304 未修改：东西跟之前长一样，可以从快取拿就好。</p>\n<p>400 错误的请求：明显的用户端错误，伺服器无法处理这个请求。</p>\n<p>401 未经授权：未认证，可能需要登录或 Token。</p>\n<p>403 Forbidden：没有权限。</p>\n<p>404 未找到：找不到资源。</p>\n<p>500 内部服务器错误：伺服器端错误。</p>\n<p>502 错误的网关：通常是伺服器的某个服务没有正确执行。</p>\n<p>503 服务不可用：伺服器临时维护或快挂了，暂时无法处理请求。</p>\n<p>504 网关超时：伺服器上的服务没有回应。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-web-端即时通讯技术\"><a class=\"markdownIt-Anchor\" href=\"#7-web-端即时通讯技术\">#</a> 7、Web 端即时通讯技术</h3>\n<ul>\n<li>\n<p>Web 端即时通讯技术是什么</p>\n<p>即时通讯技术简单的说就是实现这样一种功能：服务器端可以即时地将数据的更新或变化反应到客户端，例如消息即时推送等功能都是通过这种技术实现的。但是在 Web 中，由于浏览器的限制，实现即时通讯需要借助一些方法。这种限制出现的主要原因是，一般的 Web 通信都是浏览器先发送请求到服务器，服务器再进行响应完成数据的现实更新。</p>\n</li>\n<li>\n<p>大体可以分为两类</p>\n<ol>\n<li>一种是在 HTTP 基础上实现的\n<ul>\n<li>短轮询、comet 和 SSE</li>\n</ul>\n</li>\n<li>不是在 HTTP 基础上实现\n<ul>\n<li>WebSocket</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>如何模拟双向通信（四种方式）</p>\n<ul>\n<li>短轮询\n<ul>\n<li>客户端定时向服务器发送 Ajax 请求，服务器接到请求后马上返回响应信息并关闭连接。</li>\n<li>优点 ： 后端编写容易</li>\n<li>缺点 ： 请求中大半是无用，浪费宽带和服务器资源</li>\n<li>适用 ： 小型应用</li>\n</ul>\n</li>\n<li>长轮询\n<ul>\n<li>客户端向服务器发送 Ajax 请求，服务器接到请求后 hold 住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。</li>\n<li>优点 ：在无消息的情况下不会频繁的请求，耗费资源小</li>\n<li>缺点\n<ul>\n<li>服务器 hold 连接会消耗资源</li>\n<li>返回数据顺序无保证，难于管理维护</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>长连接\n<ul>\n<li>在页面嵌入一个隐藏 iframe，将这个隐藏 iframe 的 src 属性设为对一个长连接的请求或是采用 xhr 请求，服务器端就能源源不断的往客户端输入数据</li>\n<li>优点\n<ul>\n<li>消息及时到达，不发无用请求</li>\n<li>管理起来也相对方便</li>\n</ul>\n</li>\n<li>缺点：服务器维护一个长连接会增加开销</li>\n</ul>\n</li>\n<li>WebSocket\n<ul>\n<li>WebSocket 是 Html5 定义的一个新协议，与传统的 http 协议不同，该协议可以实现服务器与客户端之间全双工通信。简单来说，首先需要在客户端和服务器端建立起一个连接，这部分需要 http。连接一旦建立，客户端和服务器端就处于平等的地位，可以相互发送数据，不存在请求和响应的区别。</li>\n<li>优点：实现了双向通信</li>\n<li>缺点：服务器端的逻辑非常复杂</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"四种-web-即时通信技术比较\"><a class=\"markdownIt-Anchor\" href=\"#四种-web-即时通信技术比较\">#</a> 四种 Web 即时通信技术比较</h4>\n<ul>\n<li>从兼容性角度考虑，短轮询 &gt; 长轮询 &gt; 长连接 SSE&gt;WebSocket；</li>\n<li>从性能方面考虑，WebSocket &gt; 长连接 SSE &gt; 长轮询 &gt; 短轮询。</li>\n</ul>\n<h3 id=\"8-跨域\"><a class=\"markdownIt-Anchor\" href=\"#8-跨域\">#</a> 8、跨域</h3>\n<ul>\n<li>跨域是什么\n<ul>\n<li>跨域是指从一个域名的网页去请求另一个域名的资源。</li>\n<li>跨域的严格一点的定义是：只要 协议，域名，端口有任何一个的不同，就被当作是跨域</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-种解决方案\"><a class=\"markdownIt-Anchor\" href=\"#6-种解决方案\">#</a> 6 种解决方案</h4>\n<ol>\n<li>\n<p>跨域资源共享（CORS）</p>\n<ul>\n<li>\n<p>定义</p>\n<ul>\n<li>定义了必须在访问跨域资源时，浏览器与服务器应该如何沟通。</li>\n</ul>\n</li>\n<li>\n<p>基本思想</p>\n<ul>\n<li>CORS 背后的基本思想就是使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败</li>\n</ul>\n</li>\n<li>\n<p>两种请求</p>\n<ul>\n<li>简单请求\n<ul>\n<li>就是在头信息之中，增加一个 Origin 字段。</li>\n</ul>\n</li>\n<li>非简单请求\n<ul>\n<li>会在正式通信之前，增加一次 HTTP 查询请求，称为 &quot;预检&quot; 请求（preflight）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>服务端</p>\n<ul>\n<li>\n<p>服务器端对于 CORS 的支持，主要就是通过设置 Access-Control-Allow-Origin 来进行的。如果浏览器检测到相应的设置，就可以允许 Ajax 进行跨域的访问</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//指定允许其他域名访问</span>\n<span class=\"token string\">\"Access-Control-Allow-Origin:*\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//或指定域</span>\n<span class=\"token comment\">//响应类型</span>\n<span class=\"token string\">\"Access-Control-Allow-Methods:GET,POST\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//响应头设置</span>\n<span class=\"token string\">\"Access-Control-Allow-Headers:x-requested-with,content-type\"</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>jsonp</p>\n<ul>\n<li>\n<p>jsonp 是什么</p>\n<ul>\n<li>JSONP (JSON with Padding 填充式 json) 是 JSON 的一种 “使用模式”，可用于解决主流浏览器的跨域数据访问的问题。</li>\n</ul>\n</li>\n<li>\n<p>两部分组成</p>\n<ul>\n<li>回调函数\n<ul>\n<li>回调函数是当响应到来时应该在页面中调用的函数</li>\n</ul>\n</li>\n<li>数据\n<ul>\n<li>而数据就是传入回调函数中的 JSON 数据。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>原理</p>\n<p>通过 script 标签引入一个 js 文件，这个 js 文件载入成功后会执行我们在 url 参数中指定的函数，并且会把我们需要的 json 数据作为参数传入。所以 jsonp 是需要服务器端的页面进行相应的配合的。（即用 javascript 动态加载一个 script 文件，同时定义一个 callback 函数给 script 执行而已。）</p>\n</li>\n<li>\n<p>模拟</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">dosomething</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">jsondata</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//处理获得的json数据</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"http://example.com/data.php?callback=dosomething\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>我们都知道 JSONP 可以实现解决 GET 请求的跨域问题，但是不能解决 POST 请求的跨域问题.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>document.domain</p>\n<ul>\n<li>\n<p>方法</p>\n<ul>\n<li>通过修改 document.domain 来跨子域</li>\n</ul>\n</li>\n<li>\n<p>注意</p>\n<ul>\n<li>域必须相我们只能把 document.domain 设置成自身或更高一级的父域，且主同。</li>\n</ul>\n</li>\n<li>\n<p>例如：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>iframe id <span class=\"token operator\">=</span> <span class=\"token string\">\"iframe\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"http://example.com/b.html\"</span> onload <span class=\"token operator\">=</span> <span class=\"token string\">\"test()\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>iframe<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n    document<span class=\"token punctuation\">.</span>domain <span class=\"token operator\">=</span> <span class=\"token string\">'example.com'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置成主域</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>作用域</p>\n<ul>\n<li>修改 document.domain 的方法只适用于不同子域的框架间的交互。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"http://window.name\">window.name</a></p>\n<ul>\n<li><a href=\"http://window.name\">window.name</a> 是什么\n<ul>\n<li>是一个可读可写的属性，有个很有意思的跨页面特性</li>\n</ul>\n</li>\n<li>方法\n<ul>\n<li>页面如果设置了 <a href=\"http://window.name\">window.name</a>，即使进行了页面跳转到了其他页面，这个 <a href=\"http://window.name\">window.name</a> 还是会保留。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>postMessage</p>\n<ul>\n<li>\n<p>定义</p>\n<p>postMessage 是 html5 引入的 API,postMessage () 方法允许来自不同源的脚本采用异步方式进行有效的通信，可以实现跨文本文档，多窗口，跨域消息传递。多用于窗口间数据通信，这也使它成为跨域通信的一种有效的解决方案.</p>\n</li>\n<li>\n<p>方法使用</p>\n<ul>\n<li>\n<p>发送数据</p>\n<ul>\n<li>otherWindow.postMessage(message, targetOrigin, [transfer]);</li>\n<li>otherWindow 【窗口的一个引用，比如 iframe 的 contentWindow 属性】</li>\n</ul>\n</li>\n<li>\n<p>接收数据</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> receiveMessage<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">receiveMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> origin <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>postMessage 的使用场景</p>\n<ol>\n<li>跨域通信 (包括 GET 请求和 POST 请求)</li>\n<li>WebWorker\n<ul>\n<li>Web Worker 的使用场景\n<ul>\n<li>用于收集埋点数据，可以用于大量复杂的数据计算，复杂的图像处理，大数据的处理。因为它不会阻碍主线程的正常执行和页面 UI 的渲染.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Service Worker\n<ul>\n<li>离线存储的一个最佳的解决方案</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"webworker-和-service-worker-的关系\"><a class=\"markdownIt-Anchor\" href=\"#webworker-和-service-worker-的关系\">#</a> WebWorker 和 Service Worker 的关系</h5>\n<ul>\n<li>相同点\n<ul>\n<li>相同点是在常规的 js 引擎线程以外开辟了新的 js 线程去处理一些不适合在主线程上处理的业务</li>\n</ul>\n</li>\n<li>不同点\n<ul>\n<li>Web Worker 式服务于特定页面的，而 Service Worker 在被注册安装之后能够在多个页面使用</li>\n<li>Service Worker 常驻在浏览器中，不会因为页面的关闭而被销毁。本质上，它是一个后台线程，只有你主动终结，或者浏览器回收，这个线程才会结束.</li>\n<li>生命周期，可调用的 API 也不同</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>代理服务器</p>\n<ul>\n<li>\n<p>定义</p>\n<p>代理，也称正向代理，是指一个位于客户端和目标服务器 (target server) 之间的服务器，为了从目标服务器取得内容，客户端向代理发送一个请求并指定目标 (目标服务器)，然后代理向目标服务器转交请求并将获得的内容返回给客户端。</p>\n</li>\n<li>\n<p>代理服务器，需要做以下几个步骤</p>\n<ol>\n<li>接受客户端 请求 。</li>\n<li>将 请求 转发给服务器</li>\n<li>拿到服务器 响应 数据</li>\n<li>将 响应 转发给客户端</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"cors-和-jsonp-对比\"><a class=\"markdownIt-Anchor\" href=\"#cors-和-jsonp-对比\">#</a> CORS 和 JSONP 对比</h5>\n<ul>\n<li>CORS 与 JSONP 相比，无疑更为先进、方便和可靠。</li>\n<li>区别\n<ol>\n<li>JSONP 只能实现 GET 请求，而 CORS 支持所有类型的 HTTP 请求。</li>\n<li>使用 CORS，开发者可以使用普通的 XMLHttpRequest 发起请求和获得数据，比起 JSONP 有更好的错误处理。</li>\n<li>JSONP 主要被老的浏览器支持，它们往往不支持 CORS，而绝大多数现代浏览器都已经支持了 CORS）。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"9-动画\"><a class=\"markdownIt-Anchor\" href=\"#9-动画\">#</a> 9、动画</h3>\n<blockquote>\n<p>requestanimationframe 的出现替代 setTimeout 完成动画。</p>\n</blockquote>\n<ul>\n<li>setTimeout\n<ul>\n<li>setTimeout 其实就是通过设置一个间隔时间来不断的改变图像的位置，从而达到动画效果的。但利用 seTimeout 实现的动画在某些低端机上会出现卡顿、抖动的现象。导致 setTimeout 的执行步调和屏幕的刷新步调不一致，从而引起丢帧现象。</li>\n<li>原因\n<ol>\n<li>setTimeout 的执行时间并不是确定的。setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，因此 setTimeout 的实际执行时间一般要比其设定的时间晚一些。</li>\n<li>刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout 只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>requestanimationframe\n<ul>\n<li>html5 为了满足高性能动画的需求而提供的 API，表意是请求动画帧。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"requestanimationframe-相比-settimeout\"><a class=\"markdownIt-Anchor\" href=\"#requestanimationframe-相比-settimeout\">#</a> requestanimationframe 相比 setTimeout</h4>\n<ul>\n<li>优势\n<ol>\n<li>与 setTimeout 相比，requestAnimationFrame 最大的优势是由系统来决定回调函数的执行时机。</li>\n<li>它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"10-事件\"><a class=\"markdownIt-Anchor\" href=\"#10-事件\">#</a> 10、事件</h3>\n<ul>\n<li>\n<p>事件流</p>\n<p>事件流描述的是从页面中接收事件的顺序，IE 和 Netscape 提出来差不多完全相反的事件流的概念，IE 事件流是事件冒泡流，Netscape 事件流是事件捕获流。</p>\n</li>\n<li>\n<p>DOM 事件级别</p>\n<ul>\n<li>\n<p>DOM0 事件</p>\n<ul>\n<li>\n<p>定义</p>\n<p>通过文档对象（document）获取元素引用，使用 DOM0 级方法指定的事件处理程序被认为是元素的方法，处理程序是在元素的作用域进行的，程序中 this 是引用的是当前元素。</p>\n</li>\n<li>\n<p>3 个特点</p>\n<ol>\n<li>\n<p>触发时机：DOM0 级的事件处理程式只能在事件冒泡阶段触发。</p>\n</li>\n<li>\n<p>每个属性只能绑定一个事件</p>\n</li>\n<li>\n<p>this 指针的指向</p>\n<p>用 DOM0 级的方式绑定事件是在元素对象的作用域内运行，因此在事件函数内的 this 属性不是引用全局对象，而是引用当前元素对象</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>DOM2 事件</p>\n<ul>\n<li>\n<p>定义</p>\n<p>’DOM2 级事件’定义了两个方法，用于处理指定和删除事件处理程序的操作：addEventListener () 和 removeEventListener (); 所有的 DOM 节点都包含这两种方法。</p>\n</li>\n<li>\n<p>DOM2 级事件规定的事件流包括三个阶段</p>\n<ul>\n<li>事件捕获阶段</li>\n<li>处于目标阶段</li>\n<li>事件冒泡阶段</li>\n</ul>\n</li>\n<li>\n<p>优点</p>\n<p>可以添加多个事件处理程序</p>\n</li>\n</ul>\n</li>\n<li>\n<p>DOM3 级</p>\n<ul>\n<li>\n<p>DOM3 级事件就是在 DOM2 基础上增加了更多的事件类型</p>\n</li>\n<li>\n<p>UI 事件，当用户与页面上的元素交互时触发，如：load、scroll</p>\n<p>焦点事件，当元素获得或失去焦点时触发，如：blur、focus</p>\n<p>鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup</p>\n<p>滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</p>\n<p>文本事件，当在文档中输入文本时触发，如：textInput</p>\n<p>键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</p>\n<p>合成事件，当为 IME（输入法编辑器）输入字符时触发，如：compositionstart</p>\n<p>变动事件，当底层 DOM 结构发生变化时触发，如：DOMsubtreeModified</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>机制</p>\n<ol>\n<li>\n<p>冒泡机制</p>\n<p>事件会从最内层的元素开始发生，一直向上传播，直到 document 对象。</p>\n</li>\n<li>\n<p>捕获机制</p>\n<p>网景提出另一种事件流名为事件捕获 (event capturing)。与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>事件代理</p>\n<ul>\n<li>\n<p>定义</p>\n<p>JavaScript 高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。</p>\n</li>\n<li>\n<p>关键</p>\n<p>Event 对象提供了一个属性叫 target，可以返回事件的目标节点，我们成为事件源</p>\n</li>\n<li>\n<p>适合用事件委托的事件</p>\n<p>click，mousedown，mouseup，keydown，keyup，keypress</p>\n</li>\n<li>\n<p>不合适</p>\n<p>mousemove，每次都要计算它的位置，非常不好把控，在不如说 focus，blur 之类的，本身就没用冒泡的特性，自然就不能用事件委托了</p>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "面试全面总结",
                "数组",
                "API",
                "跨域",
                "动画",
                "事件"
            ]
        },
        {
            "id": "http://example.com/2020/03/23/getOfferES6/",
            "url": "http://example.com/2020/03/23/getOfferES6/",
            "title": "ES6 知识点",
            "date_published": "2020-03-23T09:38:45.000Z",
            "content_html": "<h2 id=\"面试专题总结es6-知识点\"><a class=\"markdownIt-Anchor\" href=\"#面试专题总结es6-知识点\">#</a> 面试专题总结：ES6 知识点</h2>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【ES6 知识总结】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<blockquote>\n<p>详细可参考： <a href=\"https://es6.ruanyifeng.com/\">ECMAScript 6 入门</a></p>\n</blockquote>\n<h3 id=\"1-es6-是什么\"><a class=\"markdownIt-Anchor\" href=\"#1-es6-是什么\">#</a> 1、es6 是什么</h3>\n<p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。 ECMA 是标准，Javascript 是 ECMA 的实现。因为 js 也是一种语言，但凡语言都有一套标准，而 ECMA 就是 javascript 的标准。在 2015 年正式发布了 ECMAscript6.0，简称 ES6，又称为 ECMAscript2015。</p>\n<h3 id=\"2-var-let-const声明方式\"><a class=\"markdownIt-Anchor\" href=\"#2-var-let-const声明方式\">#</a> 2、var、let、const（声明方式）</h3>\n<ul>\n<li>类别\n<ol>\n<li>变量提升</li>\n<li>暂时性死区</li>\n<li>重复声明</li>\n<li>块作用域有效</li>\n<li>初始值</li>\n<li>重新赋值</li>\n</ol>\n</li>\n<li>区别\n<ol>\n<li>let/const 定义的变量不会出现变量提升，而 var 定义的变量会提升。</li>\n<li>相同作用域中，let 和 const 不允许重复声明，var 允许重复声明。</li>\n<li>const 声明变量时必须设置初始值</li>\n<li>const 声明一个只读的常量，这个常量不可改变</li>\n<li>let/const 声明的变量仅在块级作用域中有效。而 var 声明的变量在块级作用域外仍能访问到。</li>\n<li>顶层作用域中 var 声明的变量挂在 window 上 (浏览器环境)</li>\n<li>let/const 有暂时性死区的问题，即 let/const 声明的变量，在定义之前都是不可用的。如果使用会抛出错误。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"3-变量的解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#3-变量的解构赋值\">#</a> 3、 变量的解构赋值</h3>\n<ul>\n<li>\n<p>数组解构赋值</p>\n<p>let [aa, bb, cc] = [0, 1, 2];</p>\n</li>\n<li>\n<p>对象解构赋值</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> cnName<span class=\"token punctuation\">,</span> enName <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">\"151521574\"</span><span class=\"token punctuation\">,</span>\n  cnName<span class=\"token operator\">:</span> <span class=\"token string\">\"张生\"</span><span class=\"token punctuation\">,</span>\n  enName<span class=\"token operator\">:</span> <span class=\"token string\">\"Ronnie\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cnName<span class=\"token punctuation\">,</span> enName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'张生'，'Ronnie'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"4-箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#4-箭头函数\">#</a> 4、箭头函数</h3>\n<blockquote>\n<p>es6 之前的函数的 this 指向调用函数时所在的对象，而箭头函数的 this 指向函数定义时所在的对象</p>\n</blockquote>\n<h4 id=\"箭头函数及其-this-问题\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数及其-this-问题\">#</a> 箭头函数及其 this 问题</h4>\n<ol>\n<li>this 对象的指向是可变的，但是在箭头函数中，它是固定的。</li>\n<li>this 指向的固定化，并不是因为箭头函数内部有绑定 this 的机制，实际原因是箭头函数根本没有自己的 this，导致内部的 this 就是外层代码块的 this。正是因为它没有 this，所以也就不能用作构造函数。</li>\n<li>箭头函数里面根本没有自己的 this，而是引用外层的 this。</li>\n<li>由于箭头函数没有自己的 this，所以当然也就不能用 call ()、apply ()、bind () 这些方法去改变 this 的指向</li>\n</ol>\n<h3 id=\"5-symbol\"><a class=\"markdownIt-Anchor\" href=\"#5-symbol\">#</a> 5、Symbol</h3>\n<ul>\n<li>\n<p>是什么？</p>\n<p>symbols 是一种无法被重建的基本类型。这时 symbols 有点类似与对象创建的实例互相不相等的情况，但同时 symbols 又是一种无法被改变的基本类型数据。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> s1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">===</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>作用</p>\n<ol>\n<li>symbols 作为对象的属性</li>\n<li>阻止对象属性名冲突 （扩展对象属性很有用）</li>\n<li>模拟私有属性</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"6-module-模块\"><a class=\"markdownIt-Anchor\" href=\"#6-module-模块\">#</a> 6、Module 模块</h3>\n<blockquote>\n<p>可从 IIFE、AMD、CMD、CommonJS、UMD、webpack (require.ensure)、ES Module、&lt;<em>script type=“module”</em> &gt; 这几个角度考虑。</p>\n<p><strong>作用</strong> ：模块化主要是用来抽离公共代码，隔离作用域，避免变量冲突等。</p>\n</blockquote>\n<h4 id=\"模块化发展历程\"><a class=\"markdownIt-Anchor\" href=\"#模块化发展历程\">#</a> 模块化发展历程</h4>\n<ol>\n<li>\n<p>IIFE</p>\n<ul>\n<li>\n<p>使用自执行函数来编写模块化</p>\n</li>\n<li>\n<p>特点：</p>\n<p>在一个单独的函数作用域中执行代码，避免变量冲突。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>AMD</p>\n<ul>\n<li>\n<p>使用 requireJS 来编写模块化</p>\n</li>\n<li>\n<p>特点：依赖必须提前声明好</p>\n</li>\n<li>\n<p>简单实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// code 就是index.js 返回的内容</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>CMD</p>\n<ul>\n<li>\n<p>使用 seaJS 来编写模块化</p>\n</li>\n<li>\n<p>特点：支持动态引入依赖文件</p>\n</li>\n<li>\n<p>简单实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> indexCode <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>CommonJS</p>\n<ul>\n<li>nodejs 中自带的模块化</li>\n<li>var fs = require(‘fs’);</li>\n</ul>\n</li>\n<li>\n<p>UMD</p>\n<ul>\n<li>兼容 AMD，CommonJS 模块化语法</li>\n</ul>\n</li>\n<li>\n<p>webpack(require.ensure)</p>\n<ul>\n<li>webpack 2.x 版本中的代码分割</li>\n</ul>\n</li>\n<li>\n<p>ES Modules</p>\n<ul>\n<li>ES6 引入的模块化，支持 import 来引入另一个 js</li>\n<li>import a from ‘a’;</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"61-amd-与-cmd-的比较\"><a class=\"markdownIt-Anchor\" href=\"#61-amd-与-cmd-的比较\">#</a> 6.1、AMD 与 CMD 的比较</h4>\n<ul>\n<li>\n<p>定义</p>\n<p>AMD 和 CMD 都是用于浏览器端的模块规范</p>\n</li>\n<li>\n<p>AMD</p>\n<ul>\n<li>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出</li>\n<li>其主要内容就是定义了 define 函数该如何书写，只要你按照这个规范书写模块和依赖，require.js 就能正确的进行解析。</li>\n</ul>\n</li>\n<li>\n<p>CMD</p>\n<ul>\n<li>CMD 其实就是 SeaJS 在推广过程中对模块定义的规范化产出</li>\n<li>主要内容就是描述该如何定义模块，如何引入模块，如何导出模块，只要你按照这个规范书写代码，sea.js 就能正确的进行解析</li>\n</ul>\n</li>\n<li>\n<p>AMD 与 CMD 的区别</p>\n<ol>\n<li>AMD 推崇依赖前置，CMD 推崇依赖就近</li>\n<li>AMD 是提前执行，CMD 是延迟执行。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"62-commonjs-与-amd-的比较\"><a class=\"markdownIt-Anchor\" href=\"#62-commonjs-与-amd-的比较\">#</a> 6.2、CommonJS 与 AMD 的比较</h4>\n<blockquote>\n<p>在服务器端比如 node，采用的则是 CommonJS 规范。</p>\n<p>AMD 和 CMD 都是用于浏览器端的模块规范</p>\n</blockquote>\n<ol>\n<li>\n<p>CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</p>\n</li>\n<li>\n<p>AMD 规范则是非同步加载模块，允许指定回调函数。</p>\n<p>由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。</p>\n</li>\n<li>\n<p>但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用 AMD 规范。</p>\n</li>\n</ol>\n<h4 id=\"63-es6-与-commonjs-的比较\"><a class=\"markdownIt-Anchor\" href=\"#63-es6-与-commonjs-的比较\">#</a> 6.3、ES6 与 CommonJS 的比较</h4>\n<blockquote>\n<p>注意！浏览器加载 ES6 模块，也使用 &lt;<em>script</em> &gt; 标签，但是要加入 type=“module” 属性。</p>\n</blockquote>\n<ol>\n<li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li>\n<li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</li>\n</ol>\n<h3 id=\"7-异步编程-6-种解决方案\"><a class=\"markdownIt-Anchor\" href=\"#7-异步编程-6-种解决方案\">#</a> 7、异步编程 6 种解决方案</h3>\n<ol>\n<li>\n<p>回调函数（Callback）</p>\n<ul>\n<li>\n<p>回调函数是异步操作最基本的方法</p>\n</li>\n<li>\n<p>ajax(url, () =&gt; {</p>\n<p>​ // 处理逻辑</p>\n<p>})</p>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>容易写出回调地狱（Callback hell）</li>\n<li>不能使用 try catch 捕获错误，不能直接 return</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>事件监听</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">f1<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>发布订阅</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">jQuery<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>Promise</p>\n<ul>\n<li>\n<p>是什么？</p>\n<ul>\n<li>promise 是目前 JS 异步编程的主流解决方案，遵循 Promises/A+ 方案。Promise 用于异步操作，表示一个还未完成但是预期会完成的操作。</li>\n<li>Promise 是 ES6 引入的一个新的对象，他的主要作用是用来解决 JS 异步机制里，回调机制产生的 “回调地狱”。它并不是什么突破性的 API，只是封装了异步回调形式，使得异步回调可以写的更加优雅，可读性更高，而且可以链式调用。</li>\n</ul>\n</li>\n<li>\n<p>剖析</p>\n<ul>\n<li>\n<p>promise 本身相当于一个状态机，拥有三种状态</p>\n<ul>\n<li>pending</li>\n<li>fulfilled</li>\n<li>rejected</li>\n</ul>\n<p>一个 promise 对象初始化时的状态是 pending，调用了 resolve 后会将 promise 的状态扭转为 fulfilled，调用 reject 后会将 promise 的状态扭转为 rejected，这两种扭转一旦发生便不能再扭转该 promise 到其他状态。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Promise 如何使用</p>\n<p>构造一个 promise 对象，并将要执行的异步函数传入到 promise 的参数中执行，并且在异步执行结束后调用 resolve ( ) 函数，就可以在 promise 的 then 方法中获取到异步函数的执行结果</p>\n</li>\n<li>\n<p>Promise 原型上的方法</p>\n<ol>\n<li>Promise.prototype.then(onFulfilled, onRejected)</li>\n<li>Promise.prototype.catch(onRejected)</li>\n<li>Promise.prototype.finally(onFinally)</li>\n</ol>\n</li>\n<li>\n<p>Promise 静态方法</p>\n<ol>\n<li>\n<p>Promise.all()</p>\n<p>Promise.all 接收一个 promise 对象数组作为参数，只有全部的 promise 都已经变为 fulfilled 状态后才会继续后面的处理</p>\n</li>\n<li>\n<p>Promise.race()</p>\n<p>这个函数会在 promises 中第一个 promise 的状态扭转后就开始后面的处理（fulfilled、rejected 均可）</p>\n</li>\n<li>\n<p>Promise.resolve()</p>\n</li>\n<li>\n<p>Promise.reject()</p>\n</li>\n</ol>\n</li>\n<li>\n<p>优点</p>\n<p>将异步操作以同步操作的流程表达出来，promise 链式调用，更好地解决了层层嵌套的回调地狱</p>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>不能取消执行。</li>\n<li>无法获取当前执行的进度信息（比如，要在用户界面展示进度条）。</li>\n<li>外部无法捕捉 Promise 内部抛出的错误</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>generator 函数</p>\n<ul>\n<li>\n<p>是什么</p>\n<ul>\n<li>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。</li>\n<li>如果说 JavaScript 是 ECMAScript 标准的一种具体实现、Iterator 遍历器是 Iterator 的具体实现，那么 Generator 函数可以说是 Iterator 接口的具体实现方式。</li>\n<li>Generator 函数可以通过配合 Thunk 函数更轻松更优雅的实现异步编程和控制流管理</li>\n</ul>\n</li>\n<li>\n<p>描述</p>\n<ul>\n<li>执行 Generator 函数会返回一个遍历器对象，每一次 Generator 函数里面的 yield 都相当一次遍历器对象的 next () 方法，并且可以通过 next (value) 方法传入自定义的 value, 来改变 Generator 函数的行为。</li>\n</ul>\n</li>\n<li>\n<p>能封装异步任务的根本原因</p>\n<ul>\n<li>最大特点就是可以交出函数的执行权（即暂停执行）。Generator 函数可以暂停执行和恢复执行</li>\n</ul>\n</li>\n<li>\n<p>两个特征</p>\n<ul>\n<li>function 关键字与函数名之间有一个星号</li>\n<li>函数体内部使用 yield 表达式，定义不同的内部状态（yield 在英语里的意思就是 “产出”）。</li>\n</ul>\n</li>\n<li>\n<p>过程</p>\n<p>Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）</p>\n</li>\n<li>\n<p>Generator 及其异步方面的应用</p>\n<ul>\n<li>Generator 函数将 JavaScript 异步编程带入了一个全新的阶段</li>\n</ul>\n</li>\n<li>\n<p>总结</p>\n<p>调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的 next 方法，就会返回一个有着 value 和 done 两个属性的对象。value 属性表示当前的内部状态的值，是 yield 表达式后面那个表达式的值；done 属性是一个布尔值，表示是否遍历结束。</p>\n</li>\n<li>\n<p>demo</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fetch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node-fetch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.github.com/users/github\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>bio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>async 和 await</p>\n<ul>\n<li>\n<p>含义</p>\n<p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p>\n</li>\n<li>\n<p>是什么？</p>\n<ul>\n<li>一句话，它就是 Generator 函数的语法糖。</li>\n<li>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。</li>\n<li>async 函数可以理解为内置自动执行器的 Generator 函数语法糖，它配合 ES6 的 Promise 近乎完美的实现了异步编程解决方案。</li>\n</ul>\n</li>\n<li>\n<p>相对于 Promise，优势体现在</p>\n<ol>\n<li>处理 then 的调用链，能够更清晰准确的写出代码</li>\n<li>并且也能优雅地解决回调地狱问题</li>\n</ol>\n</li>\n<li>\n<p>相对 Generator 函数，体现在以下 4 点</p>\n<ol>\n<li>内置执行器。 Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行</li>\n<li>更好的语义。 async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果</li>\n<li>更广的适用性。 co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）</li>\n<li>返回值是 Promise。async 函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用 then 方法指定下一步的操作。</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<p>当然 async/await 函数也存在一些缺点，因为 await 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 await 会导致性能上的降低，代码没有依赖性的话，完全可以使用 Promise.all 的方式。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h4>\n<ol>\n<li>JS 异步编程进化史：callback -&gt; promise -&gt; generator -&gt; async + await</li>\n<li>async/await 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里</li>\n<li>async/await 可以说是异步终极解决方案了</li>\n</ol>\n<h3 id=\"8-class\"><a class=\"markdownIt-Anchor\" href=\"#8-class\">#</a> 8、Class</h3>\n<blockquote>\n<p>ES6 的 class 可以看作只是一个 ES5 生成实例对象的构造函数的语法糖。它参考了 java 语言，定义了一个类的概念，让对象原型写法更加清晰，对象实例化更像是一种面向对象编程。Class 类可以通过 extends 实现继承。</p>\n</blockquote>\n<ul>\n<li>\n<p>语法</p>\n<ul>\n<li>super 关键字的使用</li>\n<li>static 关键字</li>\n</ul>\n</li>\n<li>\n<p>ES5/ES6 的继承除了写法以外还有什么区别？</p>\n<ol>\n<li>class 声明会提升，但不会初始化赋值。Foo 进入暂时性死区，类似于 let、const 声明变量。</li>\n<li>class 声明内部会启用严格模式</li>\n<li>class 的所有方法（包括静态方法和实例方法）都是不可枚举的</li>\n<li>class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有 [[construct]]，不能使用 new 来调用</li>\n<li>必须使用 new 调用 class</li>\n<li>class 内部无法重写类名</li>\n</ol>\n<p>ES5 的继承，实质是先创造子类的实例对象 this，然后再将父类的方法添加到 this 上面。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到 this 上面（所以必须先调用 super 方法），然后再用子类的构造函数修改 this</p>\n</li>\n<li>\n<p>优点</p>\n<p>但是某些时候，我们使用 es6 的类可以让我们的代码的可读性更高</p>\n</li>\n</ul>\n<h3 id=\"9-set-和-map\"><a class=\"markdownIt-Anchor\" href=\"#9-set-和-map\">#</a> 9、Set 和 Map</h3>\n<ul>\n<li>Set\n<ul>\n<li>是什么\n<ul>\n<li>Set 是一种叫做集合的数据结构</li>\n<li>Set 是 ES6 引入的一种类似 Array 的新的数据结构，Set 实例的成员类似于数组 item 成员，区别是 Set 实例的成员都是唯一，不重复的。这个特性可以轻松地实现数组去重。</li>\n</ul>\n</li>\n<li>应用场景\n<ul>\n<li>数组去重</li>\n</ul>\n</li>\n<li>特点\n<ol>\n<li>成员唯一、无序且不重复</li>\n<li>[value, value]，键值与键名是一致的（或者说只有键值，没有键名）</li>\n<li>可以遍历，方法有：add、delete、has</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>WeakSet\n<ul>\n<li>特点\n<ol>\n<li>成员都是对象</li>\n<li>成员都是弱引用，可以被垃圾回收机制回收，可以用来保存 DOM 节点，不容易造成内存泄漏</li>\n<li>不能遍历，方法有 add、delete、has</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Map\n<ul>\n<li>是什么\n<ul>\n<li>Map 是一种叫做字典的数据结构</li>\n<li>Map 是 ES6 引入的一种类似 Object 的新的数据结构，Map 可以理解为是 Object 的超集，打破了以传统键值对形式定义对象，对象的 key 不再局限于字符串，也可以是 Object。可以更加全面的描述对象的属性。</li>\n</ul>\n</li>\n<li>应用场景\n<ul>\n<li>数据存储</li>\n</ul>\n</li>\n<li>特点\n<ul>\n<li>本质上是键值对的集合，类似集合</li>\n<li>可以遍历，方法很多可以跟各种数据格式转换</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>WeakMap\n<ul>\n<li>特点\n<ul>\n<li>只接受对象作为键名（null 除外），不接受其他类型的值作为键名</li>\n<li>键名是弱引用，键值可以是任意的，键名所指向的对象可以被垃圾回收，此时键名是无效的</li>\n<li>不能遍历，方法有 get、set、has、delete</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Set 和 Map\n<ul>\n<li>Set 和 Map 主要的应用场景在于数组去重和数据存储</li>\n<li>原来 Set 是一种叫做集合的数据结构，Map 是一种叫做字典的数据结构</li>\n</ul>\n</li>\n<li>Set 与 WeakSet 区别\n<ol>\n<li>WeakSet 只能存放对象</li>\n<li>WeakSet 不支持遍历，没有 size 属性</li>\n<li>WeakSet 存放的对象不会计入到对象的引用技术，因此不会影响 GC 的回收</li>\n<li>WeakSet 存在的对象如果在外界消失了，那么在 WeakSet 里面也会不存在</li>\n</ol>\n</li>\n<li>Map 与 WeakMap 区别\n<ol>\n<li>WeakMap 只能接受对象作为键名字 (null 除外)</li>\n<li>WeakMap 键名指向对象不会计入对象的引用数</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"10-es6-对-string-字符串类型做的常用升级优化\"><a class=\"markdownIt-Anchor\" href=\"#10-es6-对-string-字符串类型做的常用升级优化\">#</a> 10、ES6 对 String 字符串类型做的常用升级优化</h3>\n<ul>\n<li>优化部分\n<ul>\n<li>ES6 新增了字符串模板，在拼接大段字符串时，用反斜杠 (`) 取代以往的字符串相加的形式，能保留所有空格和换行，使得字符串拼接看起来更加直观，更加优雅。</li>\n</ul>\n</li>\n<li>升级部分\n<ul>\n<li>ES6 在 String 原型上新增了 includes () 方法，用于取代传统的只能用 indexOf 查找包含字符的方法 (indexOf 返回 - 1 表示没查到不如 includes 方法返回 false 更明确，语义更清晰), 此外还新增了 startsWith (), endsWith (), padStart (),padEnd (),repeat () 等方法，可方便的用于查找，补全字符串。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"11-es6-对-number-数字类型做的常用升级优化\"><a class=\"markdownIt-Anchor\" href=\"#11-es6-对-number-数字类型做的常用升级优化\">#</a> 11、ES6 对 Number 数字类型做的常用升级优化？</h3>\n<ul>\n<li>优化部分\n<ul>\n<li>ES6 在 Number 原型上新增了 isFinite (), isNaN () 方法，用来取代传统的全局 isFinite (), isNaN () 方法检测数值是否有限、是否是 NaN。ES5 的 isFinite (), isNaN () 方法都会先将非数值类型的参数转化为 Number 类型再做判断，这其实是不合理的，最造成 isNaN (‘NaN’) === true 的奇怪行为–'NaN’是一个字符串，但是 isNaN 却说这就是 NaN。而 Number.isFinite () 和 Number.isNaN () 则不会有此类问题 (Number.isNaN (‘NaN’) === false)。</li>\n</ul>\n</li>\n<li>升级部分\n<ul>\n<li>ES6 在 Math 对象上新增了 Math.cbrt ()，trunc ()，hypot () 等等较多的科学计数法运算方法，可以更加全面的进行立方根、求和立方根等等科学计算。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-es6-对-array-数组类型做的常用升级优化\"><a class=\"markdownIt-Anchor\" href=\"#12-es6-对-array-数组类型做的常用升级优化\">#</a> 12、ES6 对 Array 数组类型做的常用升级优化</h3>\n<ul>\n<li>优化部分\n<ul>\n<li>数组解构赋值。ES6 可以直接以 let [a,b,c] = [1,2,3] 形式进行变量赋值，在声明较多变量时，不用再写很多 let (var), 且映射关系清晰，且支持赋默认值</li>\n<li>扩展运算符。ES6 新增的扩展运算符 (…)(重要), 可以轻松的实现数组和松散序列的相互转化，可以取代 arguments 对象和 apply 方法，轻松获取未知参数个数情况下的参数集合。（尤其是在 ES5 中，arguments 并不是一个真正的数组，而是一个类数组的对象，但是扩展运算符的逆运算却可以返回一个真正的数组）。扩展运算符还可以轻松方便的实现数组的复制和解构赋值（let a = [2,3,4]; let b = […a]）</li>\n</ul>\n</li>\n<li>升级部分\n<ul>\n<li>ES6 在 Array 原型上新增了 find () 方法，用于取代传统的只能用 indexOf 查找包含数组项目的方法，且修复了 indexOf 查找不到 NaN 的 bug ([NaN].indexOf (NaN) === -1). 此外还新增了 copyWithin (), includes (), fill (),flat () 等方法，可方便的用于字符串的查找，补全，转换等</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"13-es6-对-object-类型做的常用升级优化\"><a class=\"markdownIt-Anchor\" href=\"#13-es6-对-object-类型做的常用升级优化\">#</a> 13、ES6 对 Object 类型做的常用升级优化</h3>\n<ul>\n<li>\n<p>优化部分</p>\n<ol>\n<li>对象属性变量式声明。ES6 可以直接以变量形式声明对象属性或者方法，。比传统的键值对形式声明更加简洁，更加方便，语义更加清晰。</li>\n<li>对象的解构赋值</li>\n<li>对象的扩展运算符 (…)</li>\n<li>super 关键字。ES6 在 Class 类里新增了类似 this 的关键字 super。同 this 总是指向当前函数所在的对象不同，super 关键字总是指向当前函数所在对象的原型对象。</li>\n</ol>\n</li>\n<li>\n<p>升级部分</p>\n<ol>\n<li>\n<p>ES6 在 Object 原型上新增了 is () 方法，做两个目标对象的相等比较，用来完善’=<mark>‘方法。’</mark>=' 方法中 NaN === NaN //false 其实是不合理的，<a href=\"http://Object.is\">Object.is</a> 修复了这个小 bug。(<a href=\"http://Object.is\">Object.is</a>(NaN, NaN) // true)</p>\n</li>\n<li>\n<p>ES6 在 Object 原型上新增了 assign () 方法，用于对象新增属性或者多个对象合并。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> source1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> source2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> source1<span class=\"token punctuation\">,</span> source2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntarget<span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;a:1, b:2, c:3&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>ES6 在 Object 原型上新增了 getOwnPropertyDescriptors () 方法，此方法增强了 ES5 中 getOwnPropertyDescriptor () 方法，可以获取指定对象所有自身属性的描述对象。结合 defineProperties () 方法，可以完美复制对象，包括复制 get 和 set 属性。</p>\n</li>\n<li>\n<p>ES6 在 Object 原型上新增了 getPrototypeOf () 和 setPrototypeOf () 方法，用来获取或设置当前对象的 prototype 对象。获取或设置当前对象的 prototype 对象时，都应该采用 ES6 新增的标准用法。</p>\n</li>\n<li>\n<p>ES6 在 Object 原型上还新增了 Object.keys ()，Object.values ()，Object.entries () 方法，用来获取对象的所有键、所有值和所有键值对数组。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"14-es6-对-function-函数类型做的常用升级优化\"><a class=\"markdownIt-Anchor\" href=\"#14-es6-对-function-函数类型做的常用升级优化\">#</a> 14、ES6 对 Function 函数类型做的常用升级优化</h3>\n<ul>\n<li>\n<p>优化部分</p>\n<ul>\n<li>箭头函数 (核心)。箭头函数里没有自己的 this, 这改变了以往 JS 函数中最让人难以理解的 this 运行机制\n<ol>\n<li>箭头函数内的 this 指向的是函数定义时所在的对象，而不是函数执行时所在的对象。</li>\n<li>箭头函数不能用作构造函数，因为它没有自己的 this，无法实例化。</li>\n<li>也是因为箭头函数没有自己的 this, 所以箭头函数 内也不存在 arguments 对象。（可以用扩展运算符代替）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>升级部分</p>\n<ul>\n<li>\n<p>ES6 新增了双冒号运算符，用来取代以往的 bind，call, 和 apply (浏览器暂不支持，Babel 已经支持转码)</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">foo<span class=\"token operator\">:</span><span class=\"token operator\">:</span>bar<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfoo<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"15-proxy\"><a class=\"markdownIt-Anchor\" href=\"#15-proxy\">#</a> 15、Proxy</h3>\n<p>Proxy 是 ES6 新增的一个构造函数，这个词的原意是代理，用在这里表示由它来 “代理” 某些操作，可以译为 “代理器”。Proxy 可以理解成，在目标对象之前架设一层 “拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p>\n<h3 id=\"16-reflect\"><a class=\"markdownIt-Anchor\" href=\"#16-reflect\">#</a> 16、Reflect</h3>\n<ul>\n<li>是什么\n<ul>\n<li>Reflect 对象与 Proxy 对象一样，也是 ES6 为了操作对象而提供的新 API</li>\n</ul>\n</li>\n<li>作用\n<ol>\n<li>一是将原生的一些零散分布在 Object、Function 或者全局函数里的方法 (如 apply、delete、get、set 等等)，统一整合到 Reflect 上，这样可以更加方便更加统一的管理一些原生 API。</li>\n<li>其次就是因为 Proxy 可以改写默认的原生 API，如果一旦原生 API 别改写可能就找不到了，所以 Reflect 也可以起到备份原生 API 的作用，使得即使原生 API 被改写了之后，也可以在被改写之后的 API 用上默认的 API。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"17-iterator\"><a class=\"markdownIt-Anchor\" href=\"#17-iterator\">#</a> 17、Iterator</h3>\n<ul>\n<li>是什么\n<ul>\n<li>一种设计标准，来统一所有可遍历类型的遍历方式。Iterator 正是这样一种标准。或者说是一种规范理念</li>\n</ul>\n</li>\n<li>解决的问题\n<ul>\n<li>Set、Map 都不能用 for 循环遍历，解决这个问题有两种方案，一种是为 Set、Map 单独新增一个用来遍历的 API，另一种是为 Set、Map、Array、Object 新增一个统一的遍历 API，显然，第二种更好，ES6 也就顺其自然的需要一种设计标准，来统一所有可遍历类型的遍历方式。</li>\n</ul>\n</li>\n<li>Iterator 标准的具体实现\n<ul>\n<li>Iterator 标准的具体实现是 Iterator 遍历器。Iterator 标准规定，所有部署了 key 值为 [Symbol.iterator]，且 [Symbol.iterator] 的 value 是标准的 Iterator 接口函数 (标准的 Iterator 接口函数：该函数必须返回一个对象，且对象中包含 next 方法，且执行 next () 能返回包含 value/done 属性的 Iterator 对象) 的对象，都称之为可遍历对象，next () 后返回的 Iterator 对象也就是 Iterator 遍历器。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"18-forin-和-forof-有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#18-forin-和-forof-有什么区别\">#</a> 18、for…in 和 for…of 有什么区别</h3>\n<ul>\n<li>\n<p>ES6 规定，有所部署了载了 Iterator 接口的对象 (可遍历对象) 都可以通过 for…of 去遍历，而 for…in 仅仅可以遍历对象。</p>\n</li>\n<li>\n<p>使用 for…of 的好处</p>\n<ul>\n<li>\n<p>这也就意味着，数组也可以用 for…of 遍历，这极大地方便了数组的取值，且避免了很多程序用 for…in 去遍历数组的恶习。</p>\n<p>上面提到的扩展运算符本质上也就是 for…of 循环的一种实现。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"19-module-export-import\"><a class=\"markdownIt-Anchor\" href=\"#19-module-export-import\">#</a> 19、module、export、import</h3>\n<ul>\n<li>module、export、import 是 ES6 用来统一前端模块化方案的设计思路和实现方案</li>\n<li>作用\n<ul>\n<li>export、import 的出现统一了前端模块化的实现方案，整合规范了浏览器 / 服务端的模块化方法，用来取代传统的 AMD/CMD、requireJS、seaJS、commondJS 等等一系列前端模块不同的实现方案，使前端模块化更加统一规范，JS 也能更加能实现大型的应用程序开发。</li>\n</ul>\n</li>\n<li>注意\n<ul>\n<li>import 引入的模块是静态加载（编译阶段加载）而不是动态加载（运行时加载）</li>\n<li>import 引入 export 导出的接口值是动态绑定关系，即通过该接口，可以取到模块内部实时的值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"20-iterator-和-forofiterator-遍历器的实现\"><a class=\"markdownIt-Anchor\" href=\"#20-iterator-和-forofiterator-遍历器的实现\">#</a> 20、 Iterator 和 for…of（Iterator 遍历器的实现）</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//自定义迭代器</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token function\">makeiterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeiterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> nextindex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> nextindex <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">&#123;</span> value<span class=\"token operator\">:</span> arr<span class=\"token punctuation\">[</span>nextindex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> value<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// Symbol.iterator遍历器接口</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> iter <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: 'a', done: false &#125;</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: 'b', done: false &#125;</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: 'c', done: false &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"21-循环语法比较及使用场景for-foreach-forin-forof\"><a class=\"markdownIt-Anchor\" href=\"#21-循环语法比较及使用场景for-foreach-forin-forof\">#</a> 21、循环语法比较及使用场景（for、forEach、for…in、for…of）</h3>\n<p>for 循环的速度是最快的，是最老的循环，也是优化得最好的，其次是 for-of 这个是 es6 才新增的循环非常好用，最慢是 for-in 我们可以作一下速度排序</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token operator\">></span> <span class=\"token keyword\">for</span><span class=\"token operator\">-</span><span class=\"token keyword\">of</span> <span class=\"token operator\">></span> forEach <span class=\"token operator\">></span> filter <span class=\"token operator\">></span> map <span class=\"token operator\">></span> <span class=\"token keyword\">for</span><span class=\"token operator\">-</span><span class=\"token keyword\">in</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n",
            "tags": [
                "ES6",
                "面试全面总结"
            ]
        },
        {
            "id": "http://example.com/2020/03/23/getOfferVariabletypesandcalculations/",
            "url": "http://example.com/2020/03/23/getOfferVariabletypesandcalculations/",
            "title": "变量类型和计算",
            "date_published": "2020-03-23T09:35:29.000Z",
            "content_html": "<h2 id=\"javascript-变量类型和计算\"><a class=\"markdownIt-Anchor\" href=\"#javascript-变量类型和计算\">#</a> JavaScript 变量类型和计算</h2>\n<blockquote>\n<p>拿到 字节跳动实习生 offer 总结</p>\n<p>回馈分享一波自己的知识点总结</p>\n</blockquote>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【变量类型和计算】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h2 id=\"一-变量类型\"><a class=\"markdownIt-Anchor\" href=\"#一-变量类型\">#</a> 一、变量类型</h2>\n<h3 id=\"11-类型\"><a class=\"markdownIt-Anchor\" href=\"#11-类型\">#</a> 1.1、类型</h3>\n<ul>\n<li>值类型（基本数据类型）\n<ul>\n<li>string,number,boolean,undefined,null,symbol 6 种</li>\n</ul>\n</li>\n<li>引用类型\n<ul>\n<li>Object、Array、Funtion。细分的话：有 Object、Array、Funtion、Date、RegExp 等</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-值类型基本数据类型和引用类型区别\"><a class=\"markdownIt-Anchor\" href=\"#12-值类型基本数据类型和引用类型区别\">#</a> 1.2、值类型（基本数据类型）和引用类型区别</h3>\n<ol>\n<li>内存的分配不同\n<ul>\n<li>基本数据类型存储在栈中。</li>\n<li>复杂数据类型存储在堆中，栈中存储的变量，是指向堆中的引用地址</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值和局部变量的值等。堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由 OS 回收，分配方式倒是类似于链表。其实在堆中一般存放变量是一些对象类型</p>\n</blockquote>\n<ol start=\"2\">\n<li>访问机制不同：值类型按值访问，引用类型按引用访问</li>\n<li>复变量时不同 (a=b)\n<ul>\n<li>基本数据类型：a=b; 是将 b 中保存的原始值的副本赋值给新变量 a，a 和 b 完全独立，互不影响</li>\n<li>复杂数据类型：a=b; 将 b 保存的对象内存的引用地址赋值给了新变量 a;a 和 b 指向了同一个堆内存地址，其中一个值发生了改变，另一个也会改变。</li>\n</ul>\n</li>\n<li>参数传递的不同 (实参 / 形参)\n<ul>\n<li>函数传参都是按值传递 (栈中的存储的内容)：基本数据类型，拷贝的是值；复杂数据类型，拷贝的是引用地址</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"13-javascript-判断数据类型\"><a class=\"markdownIt-Anchor\" href=\"#13-javascript-判断数据类型\">#</a> 1.3、JavaScript 判断数据类型</h3>\n<ol>\n<li>\n<p>typeof</p>\n<ul>\n<li>typeof 运算符 只能 区分 值类型 的 类型，对于引用类型的 对象、数组 区分不出来</li>\n<li>注意：typeof null===“object” typeof new Function (); //function 有效</li>\n</ul>\n</li>\n<li>\n<p>instanceof</p>\n<ul>\n<li>instanceof 运算符返回一个布尔值，表示对象是否为某个构造函数的实例</li>\n<li>缺点：instanceof 运算符只能用于对象（纯对象和数组），不适用原始类型（Undefined、Null、Boolean、Number 和 String）的值。</li>\n</ul>\n</li>\n<li>\n<p>Object.prototype.toString.call()</p>\n<ul>\n<li>可以通过 Object.prototype.toString 方法准确判断某个对象值属于哪种内置类型。</li>\n</ul>\n</li>\n<li>\n<p>constructor</p>\n<ul>\n<li>\n<p>constructor 属性的作用是，可以得知某个实例对象，到底是哪一个构造函数产生的。</p>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>奇特的～运算符</p>\n<ul>\n<li>~x 大致等同于 -(x+1)</li>\n<li>~ 和 indexOf () 一起可以将结果强制类型转换为真 / 假值，如果 indexOf () 返回 - 1，~ 将其转换为假值 0，其他情况一律转换为真值。</li>\n</ul>\n</li>\n<li>\n<p>~~ 字位截除</p>\n</li>\n<li>\n<p>显式解析数字字符串</p>\n<ul>\n<li>Number()</li>\n<li>parseInt()</li>\n<li>parseFloat()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>显式转换为布尔值</p>\n<ul>\n<li>Boolean()</li>\n<li>(<span class=\"spoiler\" title=\"...\">) 显式强制类型转换为布尔值最常用地方法是</span></li>\n</ul>\n</li>\n<li>\n<p>抽象值操作</p>\n<ul>\n<li>ToString</li>\n<li>ToNumber</li>\n<li>ToBoolean</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"22-隐式强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#22-隐式强制类型转换\">#</a> 2.2、隐式强制类型转换</h3>\n<ol>\n<li>\n<p>转成字符串的</p>\n<ul>\n<li>\n<p>字符串拼接</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"1,23,4\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>因为数组的 valueOf () 操作无法得到简单基本类型值，于是调用 toString ()，因此两个数组变成了 &quot;1,2&quot; 和 &quot;3,4&quot;，+ 将它们拼接后返回。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>隐式强制类型转换为布尔值</p>\n<ul>\n<li>if () 语句中的条件判断表达式</li>\n<li>for (…; …; …) 语句中的条件判断表达式</li>\n<li>while () 和 do … while ()</li>\n<li>? : 中的条件判断表达式</li>\n<li>逻辑运算符 || 和 &amp;&amp; 左边的操作数</li>\n</ul>\n</li>\n<li>\n<p>布尔值到数字</p>\n</li>\n<li>\n<p>|| 和 &amp;&amp;(选择器运算符)</p>\n<ul>\n<li>ES5 规范中说到：&amp;&amp; 和 || 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值。\n<ul>\n<li>对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。</li>\n<li>对于 &amp;&amp; 来说，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"23-和-宽松相等和严格相等\"><a class=\"markdownIt-Anchor\" href=\"#23-和-宽松相等和严格相等\">#</a> 2.3、== 和 ===(宽松相等和严格相等)</h3>\n<blockquote>\n<p>区别：<mark>允许在相等比较中进行强制类型转换，而</mark> = 不允许。</p>\n</blockquote>\n<h4 id=\"231-经典问题-ifa-1-a-2-a-3\"><a class=\"markdownIt-Anchor\" href=\"#231-经典问题-ifa-1-a-2-a-3\">#</a> 2.3.1、经典问题【 if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) 】</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//... 使之成立</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"思考方向-利用隐式转换规则\"><a class=\"markdownIt-Anchor\" href=\"#思考方向-利用隐式转换规则\">#</a> 思考方向 — 【<strong>利用隐式转换规则</strong>】</h4>\n<p><code>==</code>  操作符在左右数据类型不一致时，会先进行隐式转换。</p>\n<p><code>a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3</code>  的值意味着其不可能是基本数据类型。因为如果 a 是 null 或者是 undefined bool 类型，都不可能返回 true。</p>\n<p>因此可以推测 a 是复杂数据类型，JS 中复杂数据类型只有  <code>object</code> ，回忆一下，Object 转换为原始类型会调用什么方法？</p>\n<ul>\n<li>如果部署了  <code>[Symbol.toPrimitive]</code>  接口，那么调用此接口，若返回的不是基本数据类型，抛出错误。</li>\n<li>如果没有部署 [Symbol.toPrimitive] 接口，那么根据要转换的类型，先调用 valueOf/toString\n<ol>\n<li>非 Date 类型对象， <code>hint</code>  是  <code>default</code>  时，调用顺序为： <code>valueOf</code>  &gt;&gt;&gt;  <code>toString</code> ，即 <code>valueOf</code>  返回的不是基本数据类型，才会继续调用  <code>toString</code> ，如果 <code>toString</code>  返回的还不是基本数据类型，那么抛出错误。</li>\n<li>如果  <code>hint</code>  是  <code>string</code>  (Date 对象的 hint 默认是 string) ，调用顺序为： <code>toString</code>  &gt;&gt;&gt;  <code>valueOf</code> ，即 <code>toString</code>  返回的不是基本数据类型，才会继续调用  <code>valueOf</code> ，如果 <code>valueOf</code>  返回的还不是基本数据类型，那么抛出错误。</li>\n<li>如果  <code>hint</code>  是  <code>number</code> ，调用顺序为：  <code>valueOf</code>  &gt;&gt;&gt;  <code>toString</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"7-种解决方案\"><a class=\"markdownIt-Anchor\" href=\"#7-种解决方案\">#</a> 7 种解决方案</h3>\n<ol>\n<li>\n<p>利用 [Symbol.toPrimitive] 接口</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toPrimitive<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">hint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>调用 valueOf 接口</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  valueOf<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>利用 正则</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  reg<span class=\"token operator\">:</span> <span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>利用数据劫持</p>\n<ul>\n<li>\n<p>使用 Object.defineProperty 定义的属性，在获取属性时，会调用 get 方法。利用这个特性，我们在 window 对象上定义 a 属性</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>利用 ES6 Proxy</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    i<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>重写数组的 join</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>join <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>利用 with 关键字</p>\n</li>\n</ol>\n<blockquote>\n<p>注意：0 == ‘\\n’ //true</p>\n</blockquote>\n<h2 id=\"三-相关典型问题\"><a class=\"markdownIt-Anchor\" href=\"#三-相关典型问题\">#</a> 三、相关典型问题</h2>\n<ul>\n<li>JS 中使用 typeof 能得到的哪些类型</li>\n<li>何时使用 === 何时使用 ==\n<ul>\n<li>除了判断 <strong>对象属性是否为空</strong> 和 <strong>看是否函数的参数为空</strong> 的情况 ，其余的都用 === 。</li>\n</ul>\n</li>\n<li>JS 中有哪些 内置函数</li>\n<li>JS 变量按照 存储方式 分为哪些类型，并描述其特点</li>\n<li>如何理解 JSON</li>\n</ul>\n",
            "tags": [
                "面试全面总结"
            ]
        },
        {
            "id": "http://example.com/2020/03/23/getOfferthis/",
            "url": "http://example.com/2020/03/23/getOfferthis/",
            "title": "this 指向问题",
            "date_published": "2020-03-23T09:35:29.000Z",
            "content_html": "<h2 id=\"专题总结this-指向问题\"><a class=\"markdownIt-Anchor\" href=\"#专题总结this-指向问题\">#</a> 专题总结：this 指向问题</h2>\n<blockquote>\n<p>拿到 字节跳动实习生 offer 总结</p>\n<p>回馈分享一波自己的知识点总结</p>\n</blockquote>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【this 指向问题】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h2 id=\"一-this-的四条绑定规则\"><a class=\"markdownIt-Anchor\" href=\"#一-this-的四条绑定规则\">#</a> 一、this 的四条绑定规则</h2>\n<ol>\n<li>\n<p>默认绑定</p>\n<ul>\n<li>独立函数调用时，this 指向全局对象（window），如果使用严格模式，那么全局对象无法使用默认绑定， this 绑定至 undefined。</li>\n</ul>\n</li>\n<li>\n<p>隐式绑定</p>\n<ul>\n<li>\n<p>函数 this 是指向调用者 （隐式指向）</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>obj1.obj2.foo (); //foo 中的 this 与 obj2 绑定</li>\n</ul>\n</li>\n<li>\n<p>问题：隐式丢失</p>\n<ul>\n<li>描述：隐式丢失指的是函数中的 this 丢失绑定对象，即它会应用第 1 条的默认绑定规则，从而将 this 绑定到全局对象或者 undefined 上，取决于是否在严格模式下运行。</li>\n<li>以下情况会发生隐式丢失\n<ol>\n<li>绑定至上下文对象的函数被赋值给一个新的函数，然后调用这个新的函数时</li>\n<li>传入回调函数时</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>显式绑定</p>\n<ul>\n<li>显式绑定的核心是 JavaScript 内置的 call (…) 和 apply (…) 方法，call 和 apply bind 的 this 第一个参数 （显示指向）</li>\n</ul>\n</li>\n<li>\n<p>new 绑定</p>\n<ul>\n<li>构造函数的 this 是 new 之后的新对象 （构造器）</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"二-call-bind-apply\"><a class=\"markdownIt-Anchor\" href=\"#二-call-bind-apply\">#</a> 二、call bind apply</h2>\n<blockquote>\n<p>改变函数执行时的上下文（改变函数运行时的 this 指向）</p>\n</blockquote>\n<h3 id=\"21-apply\"><a class=\"markdownIt-Anchor\" href=\"#21-apply\">#</a> 2.1、apply</h3>\n<ul>\n<li>\n<p>第二个参数为数组</p>\n</li>\n<li>\n<p>自定义实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 自定义apply函数</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">apply1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//context为null或者是undefined时,设置默认值</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> global <span class=\"token operator\">:</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  obj<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//undefined 或者 是 null 不是 Iterator 对象，不能被 ...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> arg <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"22-call\"><a class=\"markdownIt-Anchor\" href=\"#22-call\">#</a> 2.2、call</h3>\n<ul>\n<li>\n<p>第二个参数为参数列表</p>\n</li>\n<li>\n<p>自定义实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">call1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> global <span class=\"token operator\">:</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  obj<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"23-bind\"><a class=\"markdownIt-Anchor\" href=\"#23-bind\">#</a> 2.3、bind</h3>\n<ul>\n<li>\n<p>特点</p>\n<ul>\n<li>返回一个函数</li>\n<li>可以传入参数（使用 bind 时和 bind 新生成的函数都可以传参）</li>\n<li>当 bind 返回的函数作为构造函数的时候，bind 时指定的 this 值会失效，但传入的参数依然生效</li>\n</ul>\n</li>\n<li>\n<p>注意：bind 这个方法在 IE6~8 下不兼容</p>\n</li>\n<li>\n<p>自定义实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bind1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> global <span class=\"token operator\">:</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  f<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">bound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">f</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  bound<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> bound<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"24-区别\"><a class=\"markdownIt-Anchor\" href=\"#24-区别\">#</a> 2.4、区别</h3>\n<blockquote>\n<p>call 和 apply 改变了函数的 this 上下文后便执行该函数，而 bind 则是返回改变了上下文后的一个函数。</p>\n</blockquote>\n<h2 id=\"三-相关题目\"><a class=\"markdownIt-Anchor\" href=\"#三-相关题目\">#</a> 三、相关题目</h2>\n<ol>\n<li>\n<p>怎么利用 call、apply 来求一个数组中最大或者最小值</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如何利用 call、apply 来做继承</p>\n</li>\n<li>\n<p>apply、call、bind 的区别和主要应用场景</p>\n<ol>\n<li>将类数组 / 含有 length 属性的对象转化为数组</li>\n<li>求数组中的最大和最小值</li>\n<li>数组追加</li>\n<li>利用 call 和 apply 做继承</li>\n<li>判断变量类型</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "面试全面总结"
            ]
        },
        {
            "id": "http://example.com/2020/03/23/getOffercss/",
            "url": "http://example.com/2020/03/23/getOffercss/",
            "title": "css 面试考点全面总结",
            "date_published": "2020-03-23T09:22:32.000Z",
            "content_html": "<h2 id=\"css-面试考点全面总结\"><a class=\"markdownIt-Anchor\" href=\"#css-面试考点全面总结\">#</a> css 面试考点全面总结</h2>\n<blockquote>\n<p>拿到 字节跳动实习生 offer 总结</p>\n<p>回馈分享一波自己的知识点总结</p>\n</blockquote>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 css 考点 共总结 17 大知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h3 id=\"1-盒模型box-model\"><a class=\"markdownIt-Anchor\" href=\"#1-盒模型box-model\">#</a> 1、盒模型 (box model)</h3>\n<h4 id=\"11-是什么\"><a class=\"markdownIt-Anchor\" href=\"#11-是什么\">#</a> 1.1、是什么？</h4>\n<blockquote>\n<p>网页设计中 css 技术所使用的一种思维模型</p>\n</blockquote>\n<h4 id=\"12-为什么会出现不同模型\"><a class=\"markdownIt-Anchor\" href=\"#12-为什么会出现不同模型\">#</a> 1.2、为什么会出现不同模型</h4>\n<p>当年微软的 IE 浏览器占据超过 80% 市场份额的时候，想自己独立制定一套浏览器标准，其中就包括 IE 的盒模型，但是有很多公司不同意 IE 的做法，他们遵循的是 W3C 的标准来定制浏览器，也就造成了现在浏览器不同的 CSS 盒模型，但是仍有很多老网站采用的是老 IE 的标准 (怪异模式)，因此很多浏览器保留了 IE 的怪异模式。</p>\n<h4 id=\"13-盒模型的两种标准\"><a class=\"markdownIt-Anchor\" href=\"#13-盒模型的两种标准\">#</a> 1.3、盒模型的两种标准</h4>\n<ul>\n<li>标准模型\n<ul>\n<li>元素宽高＝内容（content）的宽高</li>\n</ul>\n</li>\n<li>IE 模型\n<ul>\n<li>元素宽高＝内容（content）＋填充（padding）＋边框 （border） 的总宽高</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"14-组成\"><a class=\"markdownIt-Anchor\" href=\"#14-组成\">#</a> 1.4、组成</h4>\n<ul>\n<li>content</li>\n<li>padding</li>\n<li>border</li>\n<li>margin</li>\n</ul>\n<h4 id=\"15-css3-中标准或者怪异模式之间的切换box-sizing\"><a class=\"markdownIt-Anchor\" href=\"#15-css3-中标准或者怪异模式之间的切换box-sizing\">#</a> 1.5、CSS3 中标准或者怪异模式之间的切换（box-sizing）</h4>\n<ul>\n<li>box-sizing ： content-box 采用标准模式 也是默认样式</li>\n<li>box-sizing： border-box 采用 ie 怪异模式</li>\n</ul>\n<h3 id=\"2-ifc-与-bfc\"><a class=\"markdownIt-Anchor\" href=\"#2-ifc-与-bfc\">#</a> 2、IFC 与 BFC</h3>\n<h4 id=\"21-bfc\"><a class=\"markdownIt-Anchor\" href=\"#21-bfc\">#</a> 2.1、BFC</h4>\n<blockquote>\n<p>BFC | 块级格式化上下文（Block Formatting Context）</p>\n</blockquote>\n<h5 id=\"bfc-布局规则\"><a class=\"markdownIt-Anchor\" href=\"#bfc-布局规则\">#</a> BFC 布局规则</h5>\n<ol>\n<li>\n<p>内部的 Box 会在垂直方向，一个接一个地放置。</p>\n</li>\n<li>\n<p>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</p>\n</li>\n<li>\n<p>每个元素的左外边缘（margin-left)， 与包含块的左边（contain box left）相接触 (对于从左往右的格式化，否则相反)。即使存在浮动也是如此。除非这个元素自己形成了一个新的 BFC。</p>\n</li>\n<li>\n<p>BFC 的区域不会与 float box 重叠。</p>\n</li>\n<li>\n<p>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>\n</li>\n<li>\n<p>计算 BFC 的高度时，浮动元素也参与计算</p>\n</li>\n</ol>\n<h5 id=\"bfc-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#bfc-使用场景\">#</a> BFC 使用场景</h5>\n<ul>\n<li>外边距折叠问题</li>\n<li>清除浮动</li>\n</ul>\n<h5 id=\"触发-bfc-的方法\"><a class=\"markdownIt-Anchor\" href=\"#触发-bfc-的方法\">#</a> 触发 BFC 的方法</h5>\n<ul>\n<li>float 属性不为 none</li>\n<li>元素的 position 为 absolute 或 fixed</li>\n<li>display 属性为下列之一:table-cell | table-caption| inline-block | flex | inline-flex</li>\n<li>overflow 属性不为 visible</li>\n</ul>\n<h4 id=\"22-ifc\"><a class=\"markdownIt-Anchor\" href=\"#22-ifc\">#</a> 2.2、IFC</h4>\n<blockquote>\n<p>IFC | 行内格式化上下文（Inline Formatting Context）</p>\n</blockquote>\n<h5 id=\"ifc-布局规则\"><a class=\"markdownIt-Anchor\" href=\"#ifc-布局规则\">#</a> IFC 布局规则</h5>\n<p>在行内格式化上下文中，框 (boxes) 一个接一个地水平排列，起点是包含块的顶部。水平方向上的 margin，border 和 padding 在框之间得到保留。框在垂直方向上可以以不同的方式对齐：它们的顶部或底部对齐，或根据其中文字的基线对齐。包含那些框的长方形区域，会形成一行，叫做行框。</p>\n<h3 id=\"3-margin-塌陷及合并问题\"><a class=\"markdownIt-Anchor\" href=\"#3-margin-塌陷及合并问题\">#</a> 3、margin 塌陷及合并问题</h3>\n<blockquote>\n<p>注意：margin 塌陷问题和合并问题都只对垂直方向有效</p>\n</blockquote>\n<h4 id=\"31-margin-塌陷问题\"><a class=\"markdownIt-Anchor\" href=\"#31-margin-塌陷问题\">#</a> 3.1、margin 塌陷问题</h4>\n<ul>\n<li>\n<p>描述</p>\n<p>这个问题是一个经典的浏览器内核问题。具体表现是当两个元素嵌套到一起时，外层盒模型的 margin-top 取两个元素中 margin-top 较大的值。</p>\n<p>因为在正常的情况下内层元素是相对于外层元素进行移动，但是这时内层元素却相对于整个文档进行移动，好像外层元素没有 “棚顶” 一样，因此叫 margin 塌陷问题。</p>\n</li>\n<li>\n<p>解决方法</p>\n<ol>\n<li>\n<p>给外层元素认为加一个 “棚顶”:border。</p>\n<p>这种方法虽然能够解决问题，但是在日常开发中我们不使用它，因为他在外观上对元素进行了改变。</p>\n</li>\n<li>\n<p>触发 BFC</p>\n<ul>\n<li>float 属性不为 none</li>\n<li>元素的 position 为 absolute 或 fixed</li>\n<li>display 属性为下列之一:table-cell | table-caption| inline-block | flex | inline-flex</li>\n<li>overflow 属性不为 visible</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"32-margin-合并问题\"><a class=\"markdownIt-Anchor\" href=\"#32-margin-合并问题\">#</a> 3.2、margin 合并问题</h4>\n<ul>\n<li>描述：具体表现为两个元素并列时，两者相隔的外边距取的是两者所设置 margin 的最大值。</li>\n<li>margin 合并问题解决办法\n<ul>\n<li>我们仍然用 bfc 来解决。可以给其中一个元素包起来，在外层元素中设置 bfc 渲染规则。此时这个元素的渲染规则就改变了，就能够解决这个问题。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-float\"><a class=\"markdownIt-Anchor\" href=\"#4-float\">#</a> 4、float</h3>\n<h4 id=\"41-浮动模型\"><a class=\"markdownIt-Anchor\" href=\"#41-浮动模型\">#</a> 4.1、浮动模型</h4>\n<p>块状元素这么霸道都是独占一行，如果现在我们想让两个块状元素并排显示，怎么办呢？不要着急，设置元素浮动就可以实现这一愿望。</p>\n<p>任何元素在默认情况下是不能浮动的，但可以通过 float 属性将元素定义为浮动，如 div、p、table、img 等元素都可以被定义为浮动。通过下面代码实现两个 div 元素在一行显示。</p>\n<h4 id=\"42-清除浮动\"><a class=\"markdownIt-Anchor\" href=\"#42-清除浮动\">#</a> 4.2、清除浮动</h4>\n<ol>\n<li>\n<p>浮动元素后面的同级标签加 clear: both | left | right 属性</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">推荐使用：after（伪类） 伪类原理：相当于在父元素里添加一个子元素（默认内联元素），用来清除容器内的浮动元素。                                       \t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"block\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>both<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>触发 BFC</p>\n<ul>\n<li>float 属性不为 none</li>\n<li>元素的 position 为 absolute 或 fixed</li>\n<li>display 属性为下列之一:table-cell | table-caption| inline-block | flex | inline-flex</li>\n<li>overflow 属性不为 visible</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-flex\"><a class=\"markdownIt-Anchor\" href=\"#5-flex\">#</a> 5、flex</h3>\n<h4 id=\"51-描述\"><a class=\"markdownIt-Anchor\" href=\"#51-描述\">#</a> 5.1、描述</h4>\n<p>2009 年，W3C 提出了一种新的方案 ----Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>\n<p>Flex 布局将成为未来布局的首选方案。</p>\n<p>Flex 是 Flexible Box 的缩写，意为 &quot;弹性布局&quot;，用来为盒状模型提供最大的灵活。</p>\n<p>任何一个容器都可以指定为 Flex 布局。</p>\n<h4 id=\"52-容器的属性\"><a class=\"markdownIt-Anchor\" href=\"#52-容器的属性\">#</a> 5.2、容器的属性</h4>\n<ul>\n<li>flex-direction\n<ul>\n<li>row | row-reverse | column | column-reverse</li>\n</ul>\n</li>\n<li>flex-wrap\n<ul>\n<li>flex-wrap: nowrap | wrap | wrap-reverse;</li>\n</ul>\n</li>\n<li>flex-flow\n<ul>\n<li>属性是 flex-direction 和 flex-wrap 的简写</li>\n</ul>\n</li>\n<li>justify-content\n<ul>\n<li>justify-content: flex-start | flex-end | center | space-between | space-around;</li>\n</ul>\n</li>\n<li>align-items\n<ul>\n<li>align-items: flex-start | flex-end | center | baseline | stretch;</li>\n</ul>\n</li>\n<li>align-content\n<ul>\n<li>align-content: flex-start | flex-end | center | space-between | space-around | stretch;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-css-浏览器兼容性的-4-个解决方案\"><a class=\"markdownIt-Anchor\" href=\"#6-css-浏览器兼容性的-4-个解决方案\">#</a> 6、CSS 浏览器兼容性的 4 个解决方案</h3>\n<ul>\n<li>\n<p>浏览器 CSS 样式初始化</p>\n</li>\n<li>\n<p>浏览器私有属性</p>\n<ul>\n<li>\n<p>我们经常会在某个 CSS 的属性前添加一些前缀，比如 - webkit- ，-moz- ，-ms-，这些就是浏览器的私有属性。 -webkit- (谷歌，Safari, 新版 Opera 浏览器，以及几乎所有 iOS 系统中的浏览器 (包括 iOS 系统中的火狐浏览器); 简单的说，所有基于 WebKit 内核的浏览器)</p>\n<p>-moz- (火狐浏览器)</p>\n<p>-o- (旧版 Opera 浏览器)</p>\n<p>-ms- (IE 浏览器 和 Edge 浏览器)</p>\n</li>\n<li>\n<p>对于私有属性的顺序要注意，把标准写法放到最后，兼容性写法放到前面</p>\n</li>\n</ul>\n</li>\n<li>\n<p>CSS hack 语法</p>\n<ul>\n<li>\n<p>有时我们需要针对不同的浏览器或不同版本写特定的 CSS 样式，这种针对不同的浏览器 / 不同版本写相应的 CSS code 的过程，叫做 CSS hack!</p>\n</li>\n<li>\n<p>例如 IE：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> <span class=\"token operator\">&lt;</span>keywords<span class=\"token operator\">></span><span class=\"token operator\">?</span> <span class=\"token constant\">IE</span> <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span><span class=\"token operator\">?</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\t 代码块，可以是html，css，js\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>endif<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>自动化插件</p>\n<ul>\n<li>Autoprefixer 是一款自动管理浏览器前缀的插件，它可以解析 CSS 文件并且添加浏览器前缀到 CSS 内容里，使用 Can I Use（caniuse 网站）的数据来决定哪些前缀是需要的。</li>\n<li>目前 webpack、gulp、grunt 都有相应的插件，如果还没有使用，那就赶紧应用到我们的项目中吧，别再让 CSS 兼容性浪费你的时间！</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-position定位\"><a class=\"markdownIt-Anchor\" href=\"#7-position定位\">#</a> 7、position（定位）</h3>\n<h4 id=\"71-文档流\"><a class=\"markdownIt-Anchor\" href=\"#71-文档流\">#</a> 7.1、文档流</h4>\n<p>简单说就是元素按照其在 HTML 中的位置顺序决定排布的过程。HTML 的布局机制就是用文档流模型的，即块元素（block）独占一行，内联元素（inline），不独占一行。</p>\n<p>一般使用 margin 是用来隔开元素与元素的间距；padding 是用来隔开元素与内容的间隔。margin 用于布局分开元素使元素与元素互不相干；padding 用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段 “距离”。</p>\n<p>只要不是 float 和绝对定位方式布局的，都在文档流里面。</p>\n<h4 id=\"72-属性\"><a class=\"markdownIt-Anchor\" href=\"#72-属性\">#</a> 7.2、属性</h4>\n<ul>\n<li>static</li>\n<li>relative (相对定位）</li>\n<li>absolute</li>\n<li>fixed</li>\n<li>z-index\n<ul>\n<li>z-index 指定了一个元素及其子元素的 z-order，元素之间有重叠的时候，z-index 可以决定让哪一个元素在上方。通常来说 z-index 较大的元素会覆盖较小的一个。仅对定位的元素有效。 元素之间重叠默认的顺序是后面的元素会盖住前面的元素。如果设置了 z-index 可以改变这个顺序。但只对同级的元素有效。父元素永远在子元素后面。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8-行内元素-和-块级元素\"><a class=\"markdownIt-Anchor\" href=\"#8-行内元素-和-块级元素\">#</a> 8、行内元素 和 块级元素</h3>\n<h5 id=\"区别\"><a class=\"markdownIt-Anchor\" href=\"#区别\">#</a> 区别</h5>\n<ul>\n<li>块元素，总是在新行上开始；内联元素，和其他元素在一行</li>\n<li>块元素，能容纳其他块元素或者内联元素；内联元素，只能容纳文本或其他内联元素</li>\n<li>块元素中高度，行高以及顶和底边距都可以控制；内联元素中高，行高及顶和底边距不可改变。</li>\n</ul>\n<h3 id=\"9-sassscss-less-stylus\"><a class=\"markdownIt-Anchor\" href=\"#9-sassscss-less-stylus\">#</a> 9、Sass/Scss、Less、stylus</h3>\n<h4 id=\"91-css-预处理器\"><a class=\"markdownIt-Anchor\" href=\"#91-css-预处理器\">#</a> 9.1、CSS 预处理器</h4>\n<ul>\n<li>\n<p>概念</p>\n<p>CSS 预处理器用一种专门的编程语言，进行 Web 页面样式设计，然后再编译成正常的 CSS 文件，以供项目使用。</p>\n</li>\n<li>\n<p>优点</p>\n<p>虽然各种预处理器功能强大，但使用最多的，还是以下特性：变量（variables），代码混合（ mixins），嵌套（nested rules）以及 代码模块化 (Modules)。</p>\n</li>\n</ul>\n<h4 id=\"92-区别\"><a class=\"markdownIt-Anchor\" href=\"#92-区别\">#</a> 9.2、区别</h4>\n<ul>\n<li>\n<p>编译环境不一样</p>\n<p>Sass 的安装需要 Ruby 环境，是在服务端处理的，而 Less 是需要引入 less.js 来处理 Less 代码输出 css 到浏览器，也可以在开发环节使用 Less，然后编译成 css 文件，直接放到项目中，也有 Less.app、SimpleLess、CodeKit.app 这样的工具，也有在线编译地址。Stylus 需要安装 node，然后安装最新的 stylus 包即可使用</p>\n</li>\n<li>\n<p>变量符不一样</p>\n<p>Less 是 @，而 Scss 是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>，</mtext><mi>S</mi><mi>t</mi><mi>y</mi><mi>l</mi><mi>u</mi><mi>s</mi><mtext>样式中声明变量没有任何限定，你可以使用“</mtext></mrow><annotation encoding=\"application/x-tex\">， Stylus样式中声明变量没有任何限定，你可以使用“</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">样</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">声</span><span class=\"mord cjk_fallback\">明</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">没</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">任</span><span class=\"mord cjk_fallback\">何</span><span class=\"mord cjk_fallback\">限</span><span class=\"mord cjk_fallback\">定</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">你</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">使</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord\">“</span></span></span></span>” 符号开始。</p>\n</li>\n<li>\n<p>输出设置</p>\n</li>\n<li>\n<p>处理条件语句</p>\n</li>\n<li>\n<p>引用外部 CSS 文件</p>\n</li>\n<li>\n<p>Sass 和 Less 的工具库不同</p>\n</li>\n</ul>\n<h3 id=\"10-css3-动画\"><a class=\"markdownIt-Anchor\" href=\"#10-css3-动画\">#</a> 10、css3 动画</h3>\n<h4 id=\"101-常用特效变换transform\"><a class=\"markdownIt-Anchor\" href=\"#101-常用特效变换transform\">#</a> 10.1、常用特效 / 变换（transform）</h4>\n<ul>\n<li>scale（2D 缩放）</li>\n<li>rotate（2D 旋转）</li>\n<li>translate（2D 位移）</li>\n<li>skew（2D 倾斜）</li>\n</ul>\n<h4 id=\"102-animation\"><a class=\"markdownIt-Anchor\" href=\"#102-animation\">#</a> 10.2、animation</h4>\n<ul>\n<li>\n<p>属性</p>\n<ul>\n<li>animation-name ：规定需要绑定到选择器的 keyframe 名称。</li>\n<li>animation-duration：规定完成动画所花费的时间，以秒或毫秒计。</li>\n<li>animation-timing-function：规定动画的速度曲线。</li>\n<li>animation-delay ：规定在动画开始之前的延迟。</li>\n<li>animation-iteration-count：规定动画应该播放的次数。</li>\n<li>animation-direction ：规定是否应该轮流反向播放动画。</li>\n<li>animation-fill-mode ：规定动画在播放之前或之后，其动画效果是否可见</li>\n</ul>\n</li>\n<li>\n<p>简写：</p>\n<p>animation: name duration timing-function delay iteration-count direction fill-mode;</p>\n</li>\n<li>\n<p>举例：</p>\n<p>animation: wang 3s linear 1s infinite alternate forwards ;</p>\n</li>\n</ul>\n<h4 id=\"103-keyframes\"><a class=\"markdownIt-Anchor\" href=\"#103-keyframes\">#</a> 10.3、keyframes</h4>\n<ul>\n<li>\n<p>这个属性用来定义一系列关键帧。也就是在动画运行的全过程中的一个个中间点。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> zoomIn</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">60%</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1.1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"11-居中布局\"><a class=\"markdownIt-Anchor\" href=\"#11-居中布局\">#</a> 11、居中布局</h3>\n<ol>\n<li>\n<p>使用 Flex</p>\n</li>\n<li>\n<p>使用绝对定位</p>\n</li>\n<li>\n<p>inline-block</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">.parent2&#123; text-align: center; &#125; .parent2 span&#123; display: inline-block;\nheight:50% &#125; .parent2 .child&#123; display: inline-block; color: #fff; &#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>hello world-2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>使用 table 和 table-cell</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.parent1</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.parent1 .child</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table-cell<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>子元素是单行文本</p>\n<p>设置父元素的 text-align 和 line-height = height</p>\n</li>\n<li>\n<p>利用 grid 布局</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">justify-self</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>利用绝对定位和 margin:auto</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 无需知道被居中元素的宽高 */</span>\n<span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"12-等高布局\"><a class=\"markdownIt-Anchor\" href=\"#12-等高布局\">#</a> 12、等高布局</h3>\n<ol>\n<li>\n<p>flex 布局</p>\n</li>\n<li>\n<p>使用负 margin-bottom 和正 padding-bottom 对冲实现</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.Article > li</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 10px -9999px 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 9999px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>模仿 table 布局</p>\n<p>父：display: table; 子： display: table-cell;</p>\n</li>\n<li>\n<p>grid 布局</p>\n</li>\n</ol>\n<h3 id=\"13-三栏布局\"><a class=\"markdownIt-Anchor\" href=\"#13-三栏布局\">#</a> 13、三栏布局</h3>\n<h4 id=\"131-特点\"><a class=\"markdownIt-Anchor\" href=\"#131-特点\">#</a> 13.1、特点</h4>\n<ul>\n<li>两侧宽度固定，中间宽度自适应</li>\n<li>中间部分在 DOM 结构上优先，以便先行渲染</li>\n<li>都需要一个格外的 Div.container</li>\n<li>允许任意列的高度最高</li>\n</ul>\n<h4 id=\"132-圣杯布局\"><a class=\"markdownIt-Anchor\" href=\"#132-圣杯布局\">#</a> 13.2、圣杯布局</h4>\n<ul>\n<li>特点 ：使用了相对定位</li>\n<li>优势：在 DOM 结构上显得更加值观和自然</li>\n</ul>\n<p><strong>实现</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">*</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">.container</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 100px 0 100px<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token selector\">.middle,.left,.right</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token selector\">.left</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> -100px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token selector\">.right</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> -100px<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">.middle</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"133-双飞翼布局\"><a class=\"markdownIt-Anchor\" href=\"#133-双飞翼布局\">#</a> 13.3、双飞翼布局</h4>\n<ul>\n<li>特点：不需要定位，只用了浮动和负边距</li>\n<li>优势\n<ul>\n<li>不需要使用定位，所以更加简洁</li>\n<li>允许的页面最小宽度通常比圣杯布局更小</li>\n</ul>\n</li>\n</ul>\n<p><strong>实现：</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n       <span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token selector\">.middle, .left, .right</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100px<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token selector\">.middle</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> aqua<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token selector\">.inner</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 100px<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n   </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>middle<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>left<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>right<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"134-区别\"><a class=\"markdownIt-Anchor\" href=\"#134-区别\">#</a> 13.4、区别</h4>\n<p>两者都是为了不让左右俩不遮住 middle，经典圣杯布局通过父亲 padding 给左右俩腾位置从而不会遮住 middle 内容，而双飞翼是 middle 设置 margin，限制内部内容区域，从而左右俩遮的地方不会影响到 middle 内容</p>\n<p>对于三栏布局，modern solution 是 flex box/grid 布局，这两者可以轻松实现 mobile-friendly 的方案，也可以控制顺序，middle 依然可以先渲染，2019 年兼容性不错了，如果 APP 无视 IE，这是优选</p>\n<h3 id=\"14-多栏布局\"><a class=\"markdownIt-Anchor\" href=\"#14-多栏布局\">#</a> 14、多栏布局</h3>\n<h4 id=\"141-栅格系统grid-systems\"><a class=\"markdownIt-Anchor\" href=\"#141-栅格系统grid-systems\">#</a> 14.1、栅格系统（grid systems）</h4>\n<ul>\n<li>特点 ：利用浮动实现的多栏布局</li>\n<li>表现 ： Bootstrap</li>\n</ul>\n<h4 id=\"142-多列布局\"><a class=\"markdownIt-Anchor\" href=\"#142-多列布局\">#</a> 14.2、多列布局</h4>\n<ul>\n<li>\n<p>特点：将内容按指定的列数排列</p>\n</li>\n<li>\n<p>表现 ：报纸排版</p>\n</li>\n<li>\n<p>使用方式： 通过 css3 的 column</p>\n<ul>\n<li>IE10 及以上和其它现代浏览器</li>\n<li>但 -webkit- 以及 -moz- 前缀不能省略</li>\n<li>比 flex 弹性布局更稳定、更兼容</li>\n</ul>\n</li>\n<li>\n<p>语法</p>\n<ul>\n<li>\n<p>columns: &lt;‘column-width’&gt; || &lt;‘column-count’&gt;</p>\n<p>设置对象的列数和每列的宽度。复合属性。</p>\n</li>\n<li>\n<p>column-width ：设置对象的宽度</p>\n</li>\n<li>\n<p>column-count ：用来定义对象中的列数，使用数字 1-10 表示</p>\n</li>\n<li>\n<p>column-gap ：设置列与列之间的间距</p>\n</li>\n<li>\n<p>column-rule：&lt;’ column-rule-width ‘&gt; || &lt;’ column-rule-style ‘&gt; || &lt;’ column-rule-color '&gt;</p>\n<ul>\n<li>设置对象的列与列之间的边框。复合属性</li>\n<li>column-rule: 10px solid #090;</li>\n</ul>\n</li>\n<li>\n<p>column-fill：auto | balance</p>\n<ul>\n<li>设置对象所有列的高度是否统一</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"15-弹性布局flexbox\"><a class=\"markdownIt-Anchor\" href=\"#15-弹性布局flexbox\">#</a> 15、弹性布局（Flexbox）</h3>\n<ul>\n<li>CSS3 引入的新模式\n<ul>\n<li>用来为盒装模型提供的最大的灵活性</li>\n<li>目前已经得到了所有现代浏览器的支持</li>\n</ul>\n</li>\n<li>优势\n<ul>\n<li>轻松实现视图大小变化时对元素的相对位置的大小的保持</li>\n<li>减少了对浮动布局的依赖以及重置元素的大小</li>\n</ul>\n</li>\n<li>注意\n<ul>\n<li>Webkit 内核的浏览器，必须加上 -webkit 前缀 display：-webkit-flex</li>\n<li>子元素的 float、clear 和 vertical-align 属性失效</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"16-流式布局\"><a class=\"markdownIt-Anchor\" href=\"#16-流式布局\">#</a> 16、流式布局</h3>\n<ul>\n<li>主要靠百分比进行排版</li>\n<li>对应布局\n<ul>\n<li>瀑布流布局\n<ul>\n<li>表现 ：参差不齐的多栏布局</li>\n<li>实现方式 ： 同样可以用 column 实现</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"17-响应式布局\"><a class=\"markdownIt-Anchor\" href=\"#17-响应式布局\">#</a> 17、响应式布局</h3>\n<ul>\n<li>特点\n<ul>\n<li>一个网站能够兼容多个终端</li>\n<li>解决不用设备之间分辨率之间的兼容问题</li>\n</ul>\n</li>\n<li>实现方式\n<ul>\n<li>css3 的媒体查询</li>\n<li>检测设备屏幕大小，通过 css 媒体查询来有针对性的更改页面的布局</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "面试全面总结"
            ]
        }
    ]
}