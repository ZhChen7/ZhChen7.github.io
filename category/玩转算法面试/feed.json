{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"玩转算法面试\" category",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/09/11/ComplexityAnalysis/",
            "url": "http://example.com/2019/09/11/ComplexityAnalysis/",
            "title": "面试中的复杂度分析",
            "date_published": "2019-09-11T11:56:35.000Z",
            "content_html": "<h1 id=\"面试中的复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#面试中的复杂度分析\">#</a> 面试中的复杂度分析</h1>\n<blockquote>\n<p>很多同学一提起复杂度分析就头疼，马上想起了《算法导论》中复杂的数学推导。但其实在一般的企业面试中，对复杂度的分析要求并没有那么高，但也是绕不过去的坎儿。在这一章，和大家介绍一下，面试中需要掌握的复杂度分析。…</p>\n</blockquote>\n<h2 id=\"2-1-究竟什么是大-obig-o\"><a class=\"markdownIt-Anchor\" href=\"#2-1-究竟什么是大-obig-o\">#</a> 2-1 究竟什么是大 O（Big O）</h2>\n<h4 id=\"大-o\"><a class=\"markdownIt-Anchor\" href=\"#大-o\">#</a> 大 O？</h4>\n<ul>\n<li>n 表示数据规模</li>\n<li>O（f (n)）表示运行算法所需要执行的指令数，和 f (n) 成正比</li>\n</ul>\n<h4 id=\"例如\"><a class=\"markdownIt-Anchor\" href=\"#例如\">#</a> 例如</h4>\n<ul>\n<li>二分查找法 O (logn) — 所需执行指令数 ：a * logn</li>\n<li>寻找 数组中的最大 / 最小值 O (n) — 所需执行指令数 ：b * n</li>\n<li>归并排序算法 O (nlogn) — 所需执行指令数 ：c * nlogn</li>\n<li>选择排序法 O (n^2) — 所需执行指令数 ：d * n^2</li>\n</ul>\n<h3 id=\"到底什么是-big-o\"><a class=\"markdownIt-Anchor\" href=\"#到底什么是-big-o\">#</a> 到底什么是 Big O？</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/61aLQ2wE8prQ.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/2PO7UfwEDOpW.png?imageslim\" alt=\"mark\"></p>\n<p><strong>在学术界</strong>，严格来讲，O (f (n)) 表示算法执行的上界</p>\n<p>归并排序算法的时间复杂度是 O (nlogn) 的，同时也是 O（n^2）</p>\n<p><strong>在业界</strong>，我们就使用 O 来表示算法执行的最低上界</p>\n<p>我们一般不会说归并排序是 O (n^2) 的</p>\n<h4 id=\"例子\"><a class=\"markdownIt-Anchor\" href=\"#例子\">#</a> 例子</h4>\n<ul>\n<li>O（nlogn + n）= O （nlogn）</li>\n<li>O（nlogn + n<sup>2）=O（n</sup>2）</li>\n</ul>\n<h4 id=\"无法判断\"><a class=\"markdownIt-Anchor\" href=\"#无法判断\">#</a> 无法判断</h4>\n<ul>\n<li>\n<p>O（AlogA + B） – A 与 B 无法确定</p>\n</li>\n<li>\n<p>O（AlogA + B ^2）</p>\n</li>\n<li>\n<p>对邻接表实现的图进行遍历</p>\n<ul>\n<li>时间复杂度：O（ V + E ）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"一个时间复杂度的问题\"><a class=\"markdownIt-Anchor\" href=\"#一个时间复杂度的问题\">#</a> 一个时间复杂度的问题</h3>\n<p>有一个字符串数组，将数组中的每一个字符串按照字母序排序；之后再将整个字符串数组按照字典序排序。整个操作的时间复杂度？</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/8cfiXUHkirne.png?imageslim\" alt=\"mark\"></p>\n<p>正确解答：</p>\n<ul>\n<li>假设最长的字符串长度为 s ；数组中有 n 个字符串</li>\n<li>对每个字符串排序：O（slogs）</li>\n<li>将数组中的每一个字符串按照字母序排序：O（n * slog (s) ）</li>\n<li>将整个字符串数组按照字典序排序：O（s * nlog (n) ）</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/Q5nKtKe1dCi7.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"算法复杂度在有些情况是用例相关的\"><a class=\"markdownIt-Anchor\" href=\"#算法复杂度在有些情况是用例相关的\">#</a> 算法复杂度在有些情况是用例相关的</h3>\n<ul>\n<li>\n<p>插入排序 O（n ^ 2）</p>\n<ul>\n<li>最差情况：O（n ^ 2）</li>\n<li>最好情况：O（n）</li>\n<li>平均情况：O（n ^ 2）</li>\n</ul>\n</li>\n<li>\n<p>快速排序算法 O （nlogn）</p>\n<ul>\n<li>最差情况：O（n ^ 2）</li>\n<li>最好情况：O（ nlogn ）</li>\n<li>平均情况：O（ nlogn ）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-2-对数据规模有一个概念\"><a class=\"markdownIt-Anchor\" href=\"#2-2-对数据规模有一个概念\">#</a> 2-2 对数据规模有一个概念</h2>\n<h3 id=\"抛出问题\"><a class=\"markdownIt-Anchor\" href=\"#抛出问题\">#</a> 抛出问题</h3>\n<p>对 10 ^ 5 的数据进行选择排序，结果计算机假死？</p>\n<ul>\n<li>如果要想在 1s 之内解决问题：\n<ul>\n<li>O（n ^ 2）的算法可以处理大约 10 ^ 4 级别的数据</li>\n<li>O（ n ）的算法可以处理大约 10 ^ 8 级别的数据</li>\n<li>O（ nlogn ）的算法可以处理大约 10 ^7 级别的数据</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"空间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#空间复杂度\">#</a> 空间复杂度</h3>\n<ul>\n<li>多开一个辅助的数组：O（n）</li>\n<li>多开一个辅助的二维数组：O（n ^ 2）</li>\n<li>多开常数空间：O（1）</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/7uFcA2L2OHhI.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"2-3-简单的复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#2-3-简单的复杂度分析\">#</a> 2-3 简单的复杂度分析</h2>\n<h3 id=\"o1\"><a class=\"markdownIt-Anchor\" href=\"#o1\">#</a> O（1）：</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/wmyLLvW5hvGh.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"o-n\"><a class=\"markdownIt-Anchor\" href=\"#o-n\">#</a> O（ n ）：</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/R4zqgJ9zJqqs.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/fujJT4N78Ybh.png?imageslim\" alt=\"mark\"></p>\n<p>1/2 *n 次 swap 操作也是：O (n) 。</p>\n<h3 id=\"on-2-选择排序\"><a class=\"markdownIt-Anchor\" href=\"#on-2-选择排序\">#</a> O（n ^ 2）: (选择排序)</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/HPtrTeSx6DsB.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/rh5JcB9dA8ux.png?imageslim\" alt=\"mark\"></p>\n<p>并不是所有双重循环都是 O（n ^ 2）：例如 【因为里面的循环次数是固定的 】</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/Vs0lBjzBPEi9.png?imageslim\" alt=\"mark\"></p>\n<p>下面算法是 O（logn）级别的： 【 自增并不是每次都加 1 】</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/QJC2YLSAOdAk.png?imageslim\" alt=\"mark\"></p>\n<p>下面算法是 O（ sqrt (n) ）【 判断 n 是不是 一个素数】</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/QeClcFN8EsWa.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"ologn-二分查找法\"><a class=\"markdownIt-Anchor\" href=\"#ologn-二分查找法\">#</a> O（logn）：（ 二分查找法 ）</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/HCC3KITFnmlL.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/Y18HXPKRMICe.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"整形转成字符串\"><a class=\"markdownIt-Anchor\" href=\"#整形转成字符串\">#</a> 整形转成字符串</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/gDCAKNS0NtKo.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"log-以-2-为底-和-以-10-为底有区别吗\"><a class=\"markdownIt-Anchor\" href=\"#log-以-2-为底-和-以-10-为底有区别吗\">#</a> log 以 2 为底 和 以 10 为底有区别吗</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/hhkkzyo7uTJM.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"2-4-亲自试验自己算法的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#2-4-亲自试验自己算法的时间复杂度\">#</a> 2-4 亲自试验自己算法的时间复杂度</h2>\n<h3 id=\"复杂度实验\"><a class=\"markdownIt-Anchor\" href=\"#复杂度实验\">#</a> 复杂度实验</h3>\n<p>实验，观察趋势</p>\n<p>每次 将数据规模提高两倍，看时间的变化</p>\n<h2 id=\"2-5-递归算法的复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#2-5-递归算法的复杂度分析\">#</a> 2-5 递归算法的复杂度分析</h2>\n<blockquote>\n<p>不是有递归的函数就一定是 O（ nlogn ）！</p>\n</blockquote>\n<h3 id=\"递归中进行一次递归调用的复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#递归中进行一次递归调用的复杂度分析\">#</a> 递归中进行一次递归调用的复杂度分析</h3>\n<p>二分法使用递归：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/Vrm1PVyknLyf.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/HKc9QUhHzufd.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/Mrr5oypWBxGk.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/1hAzDU4ifP7w.png?imageslim\" alt=\"mark\"></p>\n<p>引申：上述 函数增加求 负次幂？</p>\n<h3 id=\"递归中进行多次递归调用\"><a class=\"markdownIt-Anchor\" href=\"#递归中进行多次递归调用\">#</a> 递归中进行多次递归调用</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/DmVGKhPNOvil.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/vlrGbmrXl4uo.png?imageslim\" alt=\"mark\"></p>\n<p>深度不一样，并不是所有 多次递归调用 的时间复杂度 为：O（2 ^ n）</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/copG1I1hd0ya.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"递归函数的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#递归函数的时间复杂度\">#</a> 递归函数的时间复杂度</h4>\n<p>查阅 <strong>主定理</strong> （面试一般不考察）</p>\n<h2 id=\"2-6-均摊时间复杂度分析amortized-time-analysis\"><a class=\"markdownIt-Anchor\" href=\"#2-6-均摊时间复杂度分析amortized-time-analysis\">#</a> 2-6 均摊时间复杂度分析（Amortized Time Analysis）</h2>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/lH5rYQsGwqtN.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"2-7-避免复杂度的震荡\"><a class=\"markdownIt-Anchor\" href=\"#2-7-避免复杂度的震荡\">#</a> 2-7 避免复杂度的震荡</h2>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/glngyIU8g3Mi.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/AFsH4CLIkIE3.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"复杂度的震荡的解决方案\"><a class=\"markdownIt-Anchor\" href=\"#复杂度的震荡的解决方案\">#</a> 复杂度的震荡的解决方案</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/hwAvgAw9rUM1.png?imageslim\" alt=\"mark\"></p>\n",
            "tags": [
                "算法面试",
                "算法",
                "大 O？",
                "复杂度分析"
            ]
        },
        {
            "id": "http://example.com/2019/09/09/AlgorithmForTheInterview01/",
            "url": "http://example.com/2019/09/09/AlgorithmForTheInterview01/",
            "title": "算法面试到底是什么鬼",
            "date_published": "2019-09-09T02:43:24.000Z",
            "content_html": "<h1 id=\"算法面试到底是什么鬼\"><a class=\"markdownIt-Anchor\" href=\"#算法面试到底是什么鬼\">#</a> 算法面试到底是什么鬼？</h1>\n<blockquote>\n<p>玩转算法面试 从真题到思维全面提升算法思维</p>\n<p>为了面试，更为了提升你的算法思维</p>\n<p>一提起算法面试，很多同学就会心有余悸。可其实，大多数企业的算法面试，并没有那么可怕。并不是一定要啃完整本《算法导论》，才能玩儿转算法面试；也并不是只有 ACM 参赛选手，才能笑傲算法面试。恰恰相反，大多数算法面试关注的算法思维，其实很基础。在这一章，和大家聊一聊，算法面试，到底是什么鬼？…</p>\n</blockquote>\n<h2 id=\"1-1-算法面试不仅仅是正确的回答问题\"><a class=\"markdownIt-Anchor\" href=\"#1-1-算法面试不仅仅是正确的回答问题\">#</a> 1-1 算法面试不仅仅是正确的回答问题</h2>\n<h4 id=\"算法面试是什么\"><a class=\"markdownIt-Anchor\" href=\"#算法面试是什么\">#</a> 算法面试是什么？</h4>\n<ul>\n<li>让大家在面对面试中的算法问题时，有一个合理的思考路径\n<ul>\n<li>不代表能够 “正确” 回答每一个算法问题，但是合理的思考方向其实更重要，这也是正确完成算法面试问题的前提</li>\n<li>算法面试优秀不意味着技术面试优秀</li>\n<li>技术面试优秀不意味着能够拿到 Offer</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"引言\"><a class=\"markdownIt-Anchor\" href=\"#引言\">#</a> 引言</h3>\n<h4 id=\"问题对一组数据进行排序\"><a class=\"markdownIt-Anchor\" href=\"#问题对一组数据进行排序\">#</a> 问题：对一组数据进行排序</h4>\n<p>不假思索思考方向：</p>\n<ul>\n<li>快速排序算法 O（nlogn）</li>\n</ul>\n<p><strong>正确的方式</strong>是：应该和面试官探讨（ <strong>思考路径</strong> ）：</p>\n<ul>\n<li>这组数据有什么样的特征？\n<ul>\n<li>有没有可能包含有大量重复的元素？</li>\n<li>如果有这种可能的话，三路快排是更好的选择。</li>\n</ul>\n</li>\n<li>这组数据有什么样的特征？\n<ul>\n<li>是否大部分数据距离它正确的位置很近？是否近乎有序？</li>\n<li>如果是这样的话，插入排序是更好的选择</li>\n</ul>\n</li>\n<li>这组数据有什么样的特征？\n<ul>\n<li>是否数据的取值范围非常有限？比如对学生成绩排序</li>\n<li>如果是这样的话，计数排序是更好的选择</li>\n</ul>\n</li>\n<li>对排序有什么额外的要求？\n<ul>\n<li>是否需要稳定排序？</li>\n<li>如果是的话，归并排序是更好的选择</li>\n</ul>\n</li>\n<li>数据的存储状况是怎么样的？\n<ul>\n<li>是否是使用链表存储的？</li>\n<li>如果是的话，归并排序是更好的选择</li>\n</ul>\n</li>\n<li>数据的存储状态是怎样的？\n<ul>\n<li>数据的大小是否可以装载在内存里？</li>\n<li>数据量很大，或者内存很小，不足以装载在内存里，需要使用外排序算法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-2-什么是正确的回答一个算法问题\"><a class=\"markdownIt-Anchor\" href=\"#1-2-什么是正确的回答一个算法问题\">#</a> 1-2 什么是 “正确” 的回答一个算法问题</h2>\n<p><strong>正确</strong> 还包含对问题的独到见解；优化；代码规范；容错性</p>\n<p>如果是 非常难的问题，对你的竞争对手来说，也是难的。</p>\n<p>关键在于你所表达出的解决问题的思路</p>\n<p>甚至通过表达解题思路的方向，得出结论：这个问题的解决方案，应该在哪一个领域，我可以通过查阅或者进一步学习解决问题</p>\n<h3 id=\"常见问题\"><a class=\"markdownIt-Anchor\" href=\"#常见问题\">#</a> 常见问题</h3>\n<ul>\n<li>项目经历 和 项目中遇到的实际问题</li>\n<li>你遇到的印象最深的 bug 是什么？</li>\n<li>面向对象</li>\n<li>设计模式</li>\n<li>网络相关；安全相关；内存相关；并发相关</li>\n<li>系统设计；scalability</li>\n</ul>\n<p>技术面试只是面试的一部分。面试不仅仅是考察你的技术水平，还是了解你的过去以及形成的思考行为方式</p>\n<p>关于过去：参与项目至关重要</p>\n<h4 id=\"项目经历\"><a class=\"markdownIt-Anchor\" href=\"#项目经历\">#</a> 项目经历</h4>\n<ul>\n<li>本科生\n<ul>\n<li>毕业设计</li>\n<li>其它课程设计 (大作业，大一点的程序设计等等)</li>\n</ul>\n</li>\n<li>如何找到项目？\n<ul>\n<li>实习</li>\n<li>参与实战课程学习\n<ul>\n<li>慕课网</li>\n<li>Coursera</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>创建自己的项目\n<ul>\n<li>自己做小应用：计划表；备忘录；播放器…</li>\n<li>自己解决小问题：爬虫；数据分析；词频统计</li>\n<li>“不是项目” 的项目：一本优秀的技术书籍的代码整理等…</li>\n<li>分享：自己的技术博客；github 等等…</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"行为类问题\"><a class=\"markdownIt-Anchor\" href=\"#行为类问题\">#</a> 行为类问题</h4>\n<p>通过过去了解你的思考行为方式？</p>\n<ul>\n<li>遇到的最大的挑战？</li>\n<li>犯过的错误？</li>\n<li>遭遇的失败？</li>\n<li>最享受的工作内容？</li>\n<li>遇到冲突的处理方式？</li>\n<li>做的最与众不同的事儿？</li>\n</ul>\n<h4 id=\"准备好合适的问题问面试官\"><a class=\"markdownIt-Anchor\" href=\"#准备好合适的问题问面试官\">#</a> 准备好合适的问题问面试官</h4>\n<ul>\n<li>整个小组的大概运行模式是怎样的？</li>\n<li>整个项目的后续规划是如何的？</li>\n<li>这个产品中的某个问题是如何解决的？</li>\n<li>为什么会选择某些技术？标准？</li>\n<li>我对某个技术很感兴趣，在你的小组中我会有怎样的机会深入这种技术？</li>\n</ul>\n<p><strong>算法面试仍然是非常重要的一部分</strong></p>\n<h2 id=\"1-3-如何准备算法面试\"><a class=\"markdownIt-Anchor\" href=\"#1-3-如何准备算法面试\">#</a> 1-3 如何准备算法面试</h2>\n<p>准备面试 和 准备算法面试 是两个概念</p>\n<p>算法面试 ，只是面试中的一个环节</p>\n<h2 id=\"算法面试并没有那么难\"><a class=\"markdownIt-Anchor\" href=\"#算法面试并没有那么难\">#</a> 算法面试并没有那么难</h2>\n<ul>\n<li>远远不需要啃完一本 《算法导论》\n<ul>\n<li>过于强调理论证明</li>\n</ul>\n</li>\n<li>高级数据结构 和 算法面试提及的概率很低\n<ul>\n<li>红黑树</li>\n<li>计算几何</li>\n<li>B - Tree</li>\n<li>数论</li>\n<li>斐波那契堆</li>\n<li>FFT</li>\n</ul>\n</li>\n</ul>\n<p><strong>算法面试远远不需要达到信息学竞赛的水平</strong> 。</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190908/CNmOn2PupuUn.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"算法面试的准备范围\"><a class=\"markdownIt-Anchor\" href=\"#算法面试的准备范围\">#</a> 算法面试的准备范围</h3>\n<ul>\n<li>不要轻视基础算法 和 数据结构，而只关注 “有意思” 的题目</li>\n</ul>\n<p>重点关注：</p>\n<ul>\n<li>各种排序算法</li>\n<li>基础数据结构和算法的实现：如堆、二叉树、图…</li>\n<li>基础数据结构的使用：如链表、栈、队列、哈希表、图、Trie、并查集…</li>\n<li>基础算法：深度优先、广度优先、二分查找、递归…</li>\n<li>基本算法思想：递归、分治、回溯搜索、贪心、动态规划…</li>\n</ul>\n<h3 id=\"选择合适的-oj\"><a class=\"markdownIt-Anchor\" href=\"#选择合适的-oj\">#</a> 选择合适的 OJ</h3>\n<blockquote>\n<p>OJ：online judge</p>\n<p>在线判题系统</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190908/iW0zhuflnMIs.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"推荐\"><a class=\"markdownIt-Anchor\" href=\"#推荐\">#</a> 推荐</h3>\n<ul>\n<li><a href=\"https://leetcode-cn.com/\">LeetCode</a> （ 源于真实的面试问题 ）</li>\n<li><a href=\"https://www.hackerrank.com/\">HackerRank</a> （ 对问题分类很详细 ，更难一点，辅助作用）</li>\n</ul>\n<p><strong>注意</strong>： 在学习和实践做题之间，要掌握平衡</p>\n<h2 id=\"1-4-解决算法面试问题的整体思路\"><a class=\"markdownIt-Anchor\" href=\"#1-4-解决算法面试问题的整体思路\">#</a> 1-4 解决算法面试问题的整体思路</h2>\n<h3 id=\"注意题目中的条件\"><a class=\"markdownIt-Anchor\" href=\"#注意题目中的条件\">#</a> 注意题目中的条件</h3>\n<ul>\n<li>给定一个有序数组…\n<ul>\n<li><strong>有序</strong>： 是不是可以使用二分查找法</li>\n</ul>\n</li>\n<li>有一些题目中的条件本质是暗示：\n<ul>\n<li>设计一个 O（nlogn）的算法\n<ul>\n<li>分治法</li>\n</ul>\n</li>\n<li>无需考虑额外的空间\n<ul>\n<li>开辟额外的空间</li>\n</ul>\n</li>\n<li>数据规模大概是 10000\n<ul>\n<li>O（n 的二次方）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"当没有思路的时候\"><a class=\"markdownIt-Anchor\" href=\"#当没有思路的时候\">#</a> 当没有思路的时候</h3>\n<ul>\n<li>自己给自己几个简单的测试用例，试验一下</li>\n<li>不要忽视暴力解法。暴力解法通常是思考的起点</li>\n</ul>\n<h4 id=\"不要忽视暴力法\"><a class=\"markdownIt-Anchor\" href=\"#不要忽视暴力法\">#</a> 不要忽视暴力法</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190908/4H4HSG2k68nE.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190908/DTm490pyX7Vm.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"优化算法\"><a class=\"markdownIt-Anchor\" href=\"#优化算法\">#</a> 优化算法</h2>\n<h3 id=\"无头绪的思路\"><a class=\"markdownIt-Anchor\" href=\"#无头绪的思路\">#</a> 无头绪的思路</h3>\n<ul>\n<li>遍历常见的算法思路</li>\n<li>遍历常见的数据结构</li>\n<li>空间 和 时间的 交换 （ 哈希表 ）</li>\n<li>预处理信息 （ 排序 ）</li>\n<li>在瓶颈处寻找答案：O（nlogn）+ O（n ∧ 2）；O（n∧3）</li>\n</ul>\n<h3 id=\"实际编写问题\"><a class=\"markdownIt-Anchor\" href=\"#实际编写问题\">#</a> 实际编写问题</h3>\n<ul>\n<li>极端条件的判断\n<ul>\n<li>数组为空？字符串为空？数量为 0? 指针为 NULL ？</li>\n</ul>\n</li>\n<li>变量名</li>\n<li>模块化，复用性</li>\n</ul>\n",
            "tags": [
                "算法面试",
                "算法"
            ]
        }
    ]
}