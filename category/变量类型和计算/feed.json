{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"变量类型和计算\" category",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/03/23/getOfferVariabletypesandcalculations/",
            "url": "http://example.com/2020/03/23/getOfferVariabletypesandcalculations/",
            "title": "变量类型和计算",
            "date_published": "2020-03-23T09:35:29.000Z",
            "content_html": "<h2 id=\"javascript-变量类型和计算\"><a class=\"markdownIt-Anchor\" href=\"#javascript-变量类型和计算\">#</a> JavaScript 变量类型和计算</h2>\n<blockquote>\n<p>拿到 字节跳动实习生 offer 总结</p>\n<p>回馈分享一波自己的知识点总结</p>\n</blockquote>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【变量类型和计算】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h2 id=\"一-变量类型\"><a class=\"markdownIt-Anchor\" href=\"#一-变量类型\">#</a> 一、变量类型</h2>\n<h3 id=\"11-类型\"><a class=\"markdownIt-Anchor\" href=\"#11-类型\">#</a> 1.1、类型</h3>\n<ul>\n<li>值类型（基本数据类型）\n<ul>\n<li>string,number,boolean,undefined,null,symbol 6 种</li>\n</ul>\n</li>\n<li>引用类型\n<ul>\n<li>Object、Array、Funtion。细分的话：有 Object、Array、Funtion、Date、RegExp 等</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-值类型基本数据类型和引用类型区别\"><a class=\"markdownIt-Anchor\" href=\"#12-值类型基本数据类型和引用类型区别\">#</a> 1.2、值类型（基本数据类型）和引用类型区别</h3>\n<ol>\n<li>内存的分配不同\n<ul>\n<li>基本数据类型存储在栈中。</li>\n<li>复杂数据类型存储在堆中，栈中存储的变量，是指向堆中的引用地址</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值和局部变量的值等。堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由 OS 回收，分配方式倒是类似于链表。其实在堆中一般存放变量是一些对象类型</p>\n</blockquote>\n<ol start=\"2\">\n<li>访问机制不同：值类型按值访问，引用类型按引用访问</li>\n<li>复变量时不同 (a=b)\n<ul>\n<li>基本数据类型：a=b; 是将 b 中保存的原始值的副本赋值给新变量 a，a 和 b 完全独立，互不影响</li>\n<li>复杂数据类型：a=b; 将 b 保存的对象内存的引用地址赋值给了新变量 a;a 和 b 指向了同一个堆内存地址，其中一个值发生了改变，另一个也会改变。</li>\n</ul>\n</li>\n<li>参数传递的不同 (实参 / 形参)\n<ul>\n<li>函数传参都是按值传递 (栈中的存储的内容)：基本数据类型，拷贝的是值；复杂数据类型，拷贝的是引用地址</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"13-javascript-判断数据类型\"><a class=\"markdownIt-Anchor\" href=\"#13-javascript-判断数据类型\">#</a> 1.3、JavaScript 判断数据类型</h3>\n<ol>\n<li>\n<p>typeof</p>\n<ul>\n<li>typeof 运算符 只能 区分 值类型 的 类型，对于引用类型的 对象、数组 区分不出来</li>\n<li>注意：typeof null===“object” typeof new Function (); //function 有效</li>\n</ul>\n</li>\n<li>\n<p>instanceof</p>\n<ul>\n<li>instanceof 运算符返回一个布尔值，表示对象是否为某个构造函数的实例</li>\n<li>缺点：instanceof 运算符只能用于对象（纯对象和数组），不适用原始类型（Undefined、Null、Boolean、Number 和 String）的值。</li>\n</ul>\n</li>\n<li>\n<p>Object.prototype.toString.call()</p>\n<ul>\n<li>可以通过 Object.prototype.toString 方法准确判断某个对象值属于哪种内置类型。</li>\n</ul>\n</li>\n<li>\n<p>constructor</p>\n<ul>\n<li>\n<p>constructor 属性的作用是，可以得知某个实例对象，到底是哪一个构造函数产生的。</p>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>奇特的～运算符</p>\n<ul>\n<li>~x 大致等同于 -(x+1)</li>\n<li>~ 和 indexOf () 一起可以将结果强制类型转换为真 / 假值，如果 indexOf () 返回 - 1，~ 将其转换为假值 0，其他情况一律转换为真值。</li>\n</ul>\n</li>\n<li>\n<p>~~ 字位截除</p>\n</li>\n<li>\n<p>显式解析数字字符串</p>\n<ul>\n<li>Number()</li>\n<li>parseInt()</li>\n<li>parseFloat()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>显式转换为布尔值</p>\n<ul>\n<li>Boolean()</li>\n<li>(<span class=\"spoiler\" title=\"...\">) 显式强制类型转换为布尔值最常用地方法是</span></li>\n</ul>\n</li>\n<li>\n<p>抽象值操作</p>\n<ul>\n<li>ToString</li>\n<li>ToNumber</li>\n<li>ToBoolean</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"22-隐式强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#22-隐式强制类型转换\">#</a> 2.2、隐式强制类型转换</h3>\n<ol>\n<li>\n<p>转成字符串的</p>\n<ul>\n<li>\n<p>字符串拼接</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"1,23,4\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>因为数组的 valueOf () 操作无法得到简单基本类型值，于是调用 toString ()，因此两个数组变成了 &quot;1,2&quot; 和 &quot;3,4&quot;，+ 将它们拼接后返回。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>隐式强制类型转换为布尔值</p>\n<ul>\n<li>if () 语句中的条件判断表达式</li>\n<li>for (…; …; …) 语句中的条件判断表达式</li>\n<li>while () 和 do … while ()</li>\n<li>? : 中的条件判断表达式</li>\n<li>逻辑运算符 || 和 &amp;&amp; 左边的操作数</li>\n</ul>\n</li>\n<li>\n<p>布尔值到数字</p>\n</li>\n<li>\n<p>|| 和 &amp;&amp;(选择器运算符)</p>\n<ul>\n<li>ES5 规范中说到：&amp;&amp; 和 || 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值。\n<ul>\n<li>对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。</li>\n<li>对于 &amp;&amp; 来说，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"23-和-宽松相等和严格相等\"><a class=\"markdownIt-Anchor\" href=\"#23-和-宽松相等和严格相等\">#</a> 2.3、== 和 ===(宽松相等和严格相等)</h3>\n<blockquote>\n<p>区别：<mark>允许在相等比较中进行强制类型转换，而</mark> = 不允许。</p>\n</blockquote>\n<h4 id=\"231-经典问题-ifa-1-a-2-a-3\"><a class=\"markdownIt-Anchor\" href=\"#231-经典问题-ifa-1-a-2-a-3\">#</a> 2.3.1、经典问题【 if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) 】</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//... 使之成立</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"思考方向-利用隐式转换规则\"><a class=\"markdownIt-Anchor\" href=\"#思考方向-利用隐式转换规则\">#</a> 思考方向 — 【<strong>利用隐式转换规则</strong>】</h4>\n<p><code>==</code>  操作符在左右数据类型不一致时，会先进行隐式转换。</p>\n<p><code>a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3</code>  的值意味着其不可能是基本数据类型。因为如果 a 是 null 或者是 undefined bool 类型，都不可能返回 true。</p>\n<p>因此可以推测 a 是复杂数据类型，JS 中复杂数据类型只有  <code>object</code> ，回忆一下，Object 转换为原始类型会调用什么方法？</p>\n<ul>\n<li>如果部署了  <code>[Symbol.toPrimitive]</code>  接口，那么调用此接口，若返回的不是基本数据类型，抛出错误。</li>\n<li>如果没有部署 [Symbol.toPrimitive] 接口，那么根据要转换的类型，先调用 valueOf/toString\n<ol>\n<li>非 Date 类型对象， <code>hint</code>  是  <code>default</code>  时，调用顺序为： <code>valueOf</code>  &gt;&gt;&gt;  <code>toString</code> ，即 <code>valueOf</code>  返回的不是基本数据类型，才会继续调用  <code>toString</code> ，如果 <code>toString</code>  返回的还不是基本数据类型，那么抛出错误。</li>\n<li>如果  <code>hint</code>  是  <code>string</code>  (Date 对象的 hint 默认是 string) ，调用顺序为： <code>toString</code>  &gt;&gt;&gt;  <code>valueOf</code> ，即 <code>toString</code>  返回的不是基本数据类型，才会继续调用  <code>valueOf</code> ，如果 <code>valueOf</code>  返回的还不是基本数据类型，那么抛出错误。</li>\n<li>如果  <code>hint</code>  是  <code>number</code> ，调用顺序为：  <code>valueOf</code>  &gt;&gt;&gt;  <code>toString</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"7-种解决方案\"><a class=\"markdownIt-Anchor\" href=\"#7-种解决方案\">#</a> 7 种解决方案</h3>\n<ol>\n<li>\n<p>利用 [Symbol.toPrimitive] 接口</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toPrimitive<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">hint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>调用 valueOf 接口</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  valueOf<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>利用 正则</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  reg<span class=\"token operator\">:</span> <span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>利用数据劫持</p>\n<ul>\n<li>\n<p>使用 Object.defineProperty 定义的属性，在获取属性时，会调用 get 方法。利用这个特性，我们在 window 对象上定义 a 属性</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>利用 ES6 Proxy</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    i<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>重写数组的 join</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>join <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>利用 with 关键字</p>\n</li>\n</ol>\n<blockquote>\n<p>注意：0 == ‘\\n’ //true</p>\n</blockquote>\n<h2 id=\"三-相关典型问题\"><a class=\"markdownIt-Anchor\" href=\"#三-相关典型问题\">#</a> 三、相关典型问题</h2>\n<ul>\n<li>JS 中使用 typeof 能得到的哪些类型</li>\n<li>何时使用 === 何时使用 ==\n<ul>\n<li>除了判断 <strong>对象属性是否为空</strong> 和 <strong>看是否函数的参数为空</strong> 的情况 ，其余的都用 === 。</li>\n</ul>\n</li>\n<li>JS 中有哪些 内置函数</li>\n<li>JS 变量按照 存储方式 分为哪些类型，并描述其特点</li>\n<li>如何理解 JSON</li>\n</ul>\n",
            "tags": [
                "面试全面总结"
            ]
        }
    ]
}