{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"运行环境\" category",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/07/19/OperationEnvironment/",
            "url": "http://example.com/2019/07/19/OperationEnvironment/",
            "title": "运行环境",
            "date_published": "2019-07-19T15:06:51.000Z",
            "content_html": "<h1 id=\"运行环境\"><a class=\"markdownIt-Anchor\" href=\"#运行环境\">#</a> 运行环境</h1>\n<blockquote>\n<p>讲解 JS 代码在浏览器中运行的相关问题，例如 <strong>页面加载和渲染</strong>，<strong>性能优化</strong>，<strong>安全性</strong> ，这些类别的题目。</p>\n<p>知识点：</p>\n<p>8-1 页面加载过程</p>\n<p>8-2 性能优化</p>\n</blockquote>\n<ul>\n<li>浏览器就可以通过访问链接来得到页面内容</li>\n<li>通过绘制和渲染，显示出页面的最终的样子</li>\n</ul>\n<h2 id=\"整个过程中我们需要考虑什么问题\"><a class=\"markdownIt-Anchor\" href=\"#整个过程中我们需要考虑什么问题\">#</a> 整个过程中，我们需要考虑什么问题？</h2>\n<h3 id=\"3-个重点\"><a class=\"markdownIt-Anchor\" href=\"#3-个重点\">#</a> 3 个重点</h3>\n<ul>\n<li>页面加载过程</li>\n<li>性能优化</li>\n<li>安全性</li>\n</ul>\n<h2 id=\"8-1-页面加载过程\"><a class=\"markdownIt-Anchor\" href=\"#8-1-页面加载过程\">#</a> 8-1 页面加载过程</h2>\n<blockquote>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<ul>\n<li>从输入 url 到得到 html 的详细过程</li>\n<li>window.onload 和 DOMContentLoaded 的区别？</li>\n</ul>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<ul>\n<li>加载资源的形式</li>\n<li>加载一个资源的过程</li>\n<li>浏览器渲染页面的过程</li>\n</ul>\n<h4 id=\"加载资源的形式\"><a class=\"markdownIt-Anchor\" href=\"#加载资源的形式\">#</a> 加载资源的形式</h4>\n<ul>\n<li>输入 url （或跳转页面）加载 html</li>\n<li>url: <a href=\"https://www.imooc.com/\">https://www.imooc.com/</a></li>\n<li>加载 html 中的静态资源</li>\n<li>script 标签中资源的加载: &lt;<strong>script src=&quot;/static/jsjquery.js&quot;&gt;&lt;/script</strong> &gt;</li>\n</ul>\n<h4 id=\"加载一个资源的过程\"><a class=\"markdownIt-Anchor\" href=\"#加载一个资源的过程\">#</a> 加载一个资源的过程</h4>\n<ol>\n<li>浏览器根据 DNS 服务器得到域名的 IP 地址</li>\n<li>向这个 IP 的机器发送 http 请求</li>\n<li>服务器收到、处理并返回 http 请求</li>\n<li>浏览器得到返回内容</li>\n</ol>\n<h4 id=\"浏览器渲染页面的过程\"><a class=\"markdownIt-Anchor\" href=\"#浏览器渲染页面的过程\">#</a> 浏览器渲染页面的过程：</h4>\n<p>1. 根据 HTML 结构生成 DOM Tree 2. 根据 CSS 生成 CSSOM 3. 将 DOM 和 CSSOM 整合形成 RenderTree 4. 根据 RenderTree 开始渲染和展示 5. 遇到 &lt;<strong>script</strong> &gt; 时，会执行并阻止渲染。</p>\n<h4 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h4>\n<ul>\n<li><strong>为何要把 css 放在 head 中？</strong>\n<ul>\n<li>css 放在 body 标签尾部时，DOMTree 构建完成之后便开始构建 RenderTree, 并计算布局渲染网页，等加载解析完 css 之后，开始构建 CSSOMTree, 并和 DOMTree 重新构建 RenderTree, 重新计算布局渲染网页</li>\n<li>css 放在 head 标签中时，先加载 css, 之后解析 css 构建 CSSOMTree, 于此同时构建 DOMTree, CSSOMTree 和 DOMTree 都构建完毕之后开始构建 RenderTree, 计算布局渲染网页</li>\n</ul>\n</li>\n</ul>\n<p>对比两者，css 放在 head 标签中比 css 放在 body 标签尾部少了一次构建 RenderTree, 一次计算布局和一次渲染网页，因此性能会更好；并且 css 放在 body 标签尾部时会在网页中短暂出现 &quot;裸奔&quot; 的 HTML, 这不利于用户体验</p>\n<hr>\n<ul>\n<li>\n<p><strong>为何要把 js 放在 body 最下面？</strong> ，<u>既然 Dom 树完全生成好后才能显示 “没有图片的首屏”，浏览器又必须读完全部 HTML 才能生成完整的 Dom 树，script 标签不放在 body 底部是不是也一样？</u></p>\n<ul>\n<li>—— JS 放在底部可以保证让浏览器优先渲染完现有的 HTML 内容，让用户先看到内容，体验好。另外，JS 执行如果涉及 DOM 操作，得等待 DOM 解析完成才行，JS 放在底部执行时，HTML 肯定都解析成了 DOM 结构。JS 如果放在 HTML 顶部，JS 执行的时候 HTML 还没来得及转换为 DOM 结构，可能会报错。 <a href=\"https://segmentfault.com/a/1190000004292479\">JS 一定要放在 Body 的最底部么？聊聊浏览器的渲染机制</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"windowonload-和-domcontentloaded\"><a class=\"markdownIt-Anchor\" href=\"#windowonload-和-domcontentloaded\">#</a> window.onload 和 DOMContentLoaded</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/sSK9VYP2CSRd.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"解答\"><a class=\"markdownIt-Anchor\" href=\"#解答\">#</a> 解答</h3>\n<ul>\n<li>\n<p>从输入 url 到得到 html 的详细过程</p>\n<ul>\n<li>浏览器根据 DNS 服务器得到域名的 IP 地址</li>\n<li>向这个 IP 的机器发送 http 请求</li>\n<li>服务器收到、处理并返回 http 请求</li>\n<li>浏览器得到返回内容</li>\n</ul>\n</li>\n<li>\n<p>window.onload 和 DOMContentLoaded 的区别？</p>\n<ul>\n<li>window.onload： 页面的全部资源加载完才会执行，包括图片、视频等</li>\n<li>DOMContentLoaded： DOM 渲染完即可执行，此时图片、视频还没有加载完</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8-2-性能优化\"><a class=\"markdownIt-Anchor\" href=\"#8-2-性能优化\">#</a> 8-2 性能优化</h2>\n<blockquote>\n<p><a href=\"https://juejin.im/post/5a966bd16fb9a0635172a50a\">2018 前端性能优化清单</a></p>\n<p>关于 <strong>性能优化</strong> 是个大的面，这篇文章主要涉及到 <strong>前端</strong> 的几个点，如 <strong>前端性能优化</strong> 的流程、常见技术手段、工具等。</p>\n<p>提及 <strong>前端性能优化</strong> ，大家应该都会想到 <strong>雅虎军规</strong>，本文会结合 <strong>雅虎军规</strong> 融入自己的了解知识，进行的总结和梳理 😜</p>\n</blockquote>\n<h3 id=\"我们先来看看-雅虎军规-的-35-条\"><a class=\"markdownIt-Anchor\" href=\"#我们先来看看-雅虎军规-的-35-条\">#</a> 我们先来看看 👀 雅虎军规 的 35 条 ：</h3>\n<ul>\n<li>尽量减少 HTTP 请求个数 —— 须权衡</li>\n<li>使用 <strong>CDN</strong>（内容分发网络）</li>\n<li>为文件头指定 Expires 或 Cache-Control ，使内容具有缓存性。</li>\n<li>避免空的 src 和 href</li>\n<li>使用 gzip 压缩内容</li>\n<li>把 CSS 放到顶部</li>\n<li>把 JS 放到底部</li>\n<li>避免使用 CSS 表达式</li>\n<li>将 CSS 和 JS 放到外部文件中</li>\n<li>减少 DNS 查找次数</li>\n<li>精简 CSS 和 JS</li>\n<li>避免跳转</li>\n<li>剔除重复的 JS 和 CSS</li>\n<li>配置 ETags</li>\n<li>使 AJAX 可缓存</li>\n<li>尽早刷新输出缓冲</li>\n<li>使用 GET 来完成 AJAX 请求</li>\n<li>延迟加载</li>\n<li>预加载</li>\n<li>减少 DOM 元素个数</li>\n<li>根据域名划分页面内容</li>\n<li>尽量减少 iframe 的个数</li>\n<li>避免 404</li>\n<li>减少 Cookie 的大小</li>\n<li>使用无 cookie 的域</li>\n<li>减少 DOM 访问</li>\n<li>开发智能事件处理程序</li>\n<li>用 代替 @import</li>\n<li>避免使用滤镜</li>\n<li>优化图像</li>\n<li>优化 CSS Spirite</li>\n<li>不要在 HTML 中缩放图像 —— 须权衡</li>\n<li>favicon.ico 要小而且可缓存</li>\n<li>保持单个内容小于 25K</li>\n<li>打包组件成复合文本</li>\n</ul>\n<hr>\n<ul>\n<li>这本身就是一个综合性的问题</li>\n<li>没有标准答案，如果要非常全面，能写一本书</li>\n<li>只关注核心点，针对面试</li>\n</ul>\n<h3 id=\"原则\"><a class=\"markdownIt-Anchor\" href=\"#原则\">#</a> 原则</h3>\n<ul>\n<li>多使用内存、缓存或其他方法</li>\n<li>减少 CPU 计算、减少网络请求</li>\n</ul>\n<h3 id=\"从哪里入手\"><a class=\"markdownIt-Anchor\" href=\"#从哪里入手\">#</a> 从哪里入手</h3>\n<ul>\n<li>加载页面和静态资源</li>\n<li>页面渲染</li>\n</ul>\n<h3 id=\"加载资源优化\"><a class=\"markdownIt-Anchor\" href=\"#加载资源优化\">#</a> 加载资源优化</h3>\n<ul>\n<li>静态资源的压缩合并</li>\n<li>静态资源缓存</li>\n<li>使用 CDN 让资源加载更快</li>\n<li>使用 SSR 后端渲染，数据直接输出到 HTML 中</li>\n</ul>\n<h3 id=\"渲染优化\"><a class=\"markdownIt-Anchor\" href=\"#渲染优化\">#</a> 渲染优化</h3>\n<ul>\n<li>CSS 放前面 ，JS 放后面</li>\n<li>懒加载 （图片懒加载、下拉加载更多）</li>\n<li>减少 DOM 查询 ，对 DOM 查询做缓存</li>\n<li>减少 DOM 操作，多个操作尽量合并 在一起执行</li>\n<li>事件节流</li>\n<li>尽早执行操作 （如 DOMContentLoaded）</li>\n</ul>\n<h3 id=\"优化示例\"><a class=\"markdownIt-Anchor\" href=\"#优化示例\">#</a> 优化示例</h3>\n<blockquote>\n<p>展示几个优化示例</p>\n</blockquote>\n<h4 id=\"资源合并\"><a class=\"markdownIt-Anchor\" href=\"#资源合并\">#</a> 资源合并</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"a.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"b.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"c.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token comment\">//资源合并</span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"abc.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"缓存\"><a class=\"markdownIt-Anchor\" href=\"#缓存\">#</a> 缓存</h4>\n<ul>\n<li>通过连接名字控制缓存</li>\n<li>&lt;<strong>script src=“adc_1.js”&gt;&lt;/script</strong> &gt;</li>\n<li>只有内容改变的时候，连接名称才会改变</li>\n<li>&lt;<strong>script src=“adc_2.js”&gt;&lt;/script</strong> &gt;</li>\n</ul>\n<h4 id=\"cdn\"><a class=\"markdownIt-Anchor\" href=\"#cdn\">#</a> CDN</h4>\n<blockquote>\n<p>2 个在线的好用的 CDN 网站：</p>\n<p><a href=\"https://www.bootcdn.cn/\">https://www.bootcdn.cn/</a></p>\n<p><a href=\"https://cdnjs.com/\">https://cdnjs.com/</a></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/wqVaD4amGTnT.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"使用-ssr-后端渲染\"><a class=\"markdownIt-Anchor\" href=\"#使用-ssr-后端渲染\">#</a> 使用 SSR 后端渲染</h4>\n<ul>\n<li>现在 Vue React 提出了这样的概念</li>\n<li>其实 jsp php asp 都属于后端渲染</li>\n</ul>\n<h4 id=\"懒加载\"><a class=\"markdownIt-Anchor\" href=\"#懒加载\">#</a> 懒加载</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/dNHq1Xfe0Ep5.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"缓存-dom-查询\"><a class=\"markdownIt-Anchor\" href=\"#缓存-dom-查询\">#</a> 缓存 DOM 查询</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/4xj98cKCzJh9.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"合并-dom-插入\"><a class=\"markdownIt-Anchor\" href=\"#合并-dom-插入\">#</a> 合并 DOM 插入</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/S7Fvwi6QNApC.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"事件节流\"><a class=\"markdownIt-Anchor\" href=\"#事件节流\">#</a> 事件节流</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/vHApgiVQan6S.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"尽早操作\"><a class=\"markdownIt-Anchor\" href=\"#尽早操作\">#</a> 尽早操作</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/q8SS7PiiaKI4.png?imageslim\" alt=\"mark\"></p>\n",
            "tags": [
                "性能优化",
                "加载过程"
            ]
        }
    ]
}