{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"课程设计\" category",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/06/15/OperatingSystemCourseDesign/",
            "url": "http://example.com/2019/06/15/OperatingSystemCourseDesign/",
            "title": "操作系统课程设计",
            "date_published": "2019-06-15T05:24:42.000Z",
            "content_html": "<h1 id=\"操作系统课程设计\"><a class=\"markdownIt-Anchor\" href=\"#操作系统课程设计\">#</a> 操作系统课程设计</h1>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/PaXCTq1hgEbO.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/HbzHoGRT91yz.png?imageslim\" alt=\"mark\"></p>\n<table>\n<thead>\n<tr>\n<th>课题</th>\n<th>操作系统</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>院系</td>\n<td>计算机与信息工程学院</td>\n</tr>\n<tr>\n<td>班级</td>\n<td>1701</td>\n</tr>\n<tr>\n<td>姓名</td>\n<td>周琛</td>\n</tr>\n<tr>\n<td>学号</td>\n<td>2017115010124</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"实验一-处理器调度\"><a class=\"markdownIt-Anchor\" href=\"#实验一-处理器调度\">#</a> 实验一 处理器调度</h2>\n<h3 id=\"一-实习内容\"><a class=\"markdownIt-Anchor\" href=\"#一-实习内容\">#</a> 一、实习内容</h3>\n<p>​ 选择一个调度算法，实现处理器调度。</p>\n<h3 id=\"二-实习目的\"><a class=\"markdownIt-Anchor\" href=\"#二-实习目的\">#</a> 二、实习目的</h3>\n<p>​ 在采用多道程序设计的系统中，往往有若干个进程同时处于就绪状态。当就绪进程个数大于处理器数时，就必须依照某种策略来决定哪些进程优先占用处理器。本实习模拟在单处理器情况下的处理器调度，帮助学生加深了解处理器调度的工作。</p>\n<h3 id=\"三-实习题目\"><a class=\"markdownIt-Anchor\" href=\"#三-实习题目\">#</a> 三、实习题目</h3>\n<p>​ 本实习有两个题，学生可选择其中的一题做实习。</p>\n<p>​ 第一题：设计一个<strong>按优先数调度算法</strong>实现处理器调度的程序。</p>\n<h4 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示:</h4>\n<ol>\n<li>\n<p>假定系统有五个进程，每一个进程用一个进程控制块 PCB 来代表，进程控制块的<strong>格式为</strong>：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/BvLSkm8uRm2W.png?imageslim\" alt=\"mark\"></p>\n</li>\n</ol>\n<p>其中，进程名 —— 作为进程的标识，假设五个进程的进程名分别为 P1，P2，P3，P4，P5。</p>\n<ul>\n<li>指针 —— 按优先数的大小把五个进程连成队列，用指针指出下一个进程的进程控制块的首地址，最后一个进程中的指针为 “0”。</li>\n<li>要求运行时间 —— 假设进程需要运行的单位时间数。</li>\n<li>优先数 —— 赋予进程的优先数，调度时总是选取优先数大的进程先执行。</li>\n<li>状态 —— 可假设有两种状态，“就绪” 状态和 “结束” 状态。五个进程的初始状态都为 “就绪”，用 “R” 表示，当一个进程运行结束后，它的状态为 “结束”，用 “E” 表示。</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>在每次运行你所设计的处理器调度程序之前，为每个进程任意确定它的 “优先数” 和 “要求运行时间”。</p>\n</li>\n<li>\n<p>为了调度方便，把五个进程按给定的优先数从大到小连成队列。用一单元指出队首进程，用指针指出队列的连接情况。例：</p>\n<p><strong>队首标志</strong></p>\n</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/cAeym1O3lvaj.png?imageslim\" alt=\"mark\"></p>\n<ol start=\"4\">\n<li>处理器调度总是选队首进程运行。采用动态改变优先数的办法，进程每运行一次优先数就减 “1”。由于本实习是模拟处理器调度，所以，对被选中的进程并不实际的启动运行，而是执行：</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/nEAGCE9sJJqJ.png?imageslim\" alt=\"mark\"></p>\n<p>** 提醒注意的是：** 在实际的系统中，当一个进程被选中运行时，必须恢复进程的现场，让它占有处理器运行，直到出现等待事件或运行结束。在这里省去了这些工作。</p>\n<ol start=\"5\">\n<li>进程运行一次后，若要求运行时间 ¹0，则再将它加入队列（按优先数大小插入，且置队首标志）；若要求运行时间 = 0，则把它的状态修改成 “结束”（E），且退出队列。</li>\n<li>若 “就绪” 状态的进程队列不为空，则重复上面（4）和（5）的步骤，直到所有进程都成为 “结束” 状态。</li>\n<li>在所设计的程序中应有显示或打印语句，能显示或打印每次被选中进程的进程名以及运行一次后进程队列的变化。</li>\n<li>为五个进程任意确定一组 “优先数” 和 “要求运行时间”，启动所设计的处理器调度程序，显示或打印逐次被选中进程的进程名以及进程控制块的动态变化过程。</li>\n</ol>\n<p><strong>源代码:</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">#include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\n#include <span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span> <span class=\"token comment\">//strcpy()</span>\n#include<span class=\"token operator\">&lt;</span>stdlib<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span><span class=\"token comment\">//malloc()</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntypedef struct process\n<span class=\"token punctuation\">&#123;</span>\n    char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    int Priority<span class=\"token punctuation\">;</span>\n    int Time<span class=\"token punctuation\">;</span>\n    int processState<span class=\"token punctuation\">;</span>\n    struct process <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>nodelist<span class=\"token punctuation\">;</span>\n\nnodelist <span class=\"token operator\">*</span>pHead<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//存放调度的首节点地址</span>\n\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// view();</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//添加问题</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    int Priority<span class=\"token punctuation\">;</span>\n    int Time<span class=\"token punctuation\">;</span>\n    int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d %d\"</span><span class=\"token punctuation\">,</span>ProcessName<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Priority<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>ProcessName<span class=\"token punctuation\">,</span>Priority<span class=\"token punctuation\">,</span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//将数据插入链表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//申请存储空间</span>\n    nodelist <span class=\"token operator\">*</span>pNew<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>nodelist <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>nodelist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nodelist <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">,</span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority <span class=\"token operator\">=</span> Priority<span class=\"token punctuation\">;</span>\n    pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">;</span>\n    pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>processState<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//插入前链表为空，新插入的节点为头节点</span>\n        <span class=\"token punctuation\">&#123;</span>\n            pHead<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                q<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n                p<span class=\"token operator\">=</span>q<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n                pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n                p<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n                pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//显示链表中的数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* 显示所有的结果 */</span>\n    nodelist <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程名\\t优先数\\t时间\\t就绪状态\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>processState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                p<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"链表中啥都没有！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//相关算法实现</span>\n    nodelist <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n    nodelist <span class=\"token operator\">*</span>q<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n    nodelist <span class=\"token operator\">*</span>m<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n    int max<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">;</span>\n    int flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int i<span class=\"token punctuation\">;</span>\n    int sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    char firstName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    char ReturnProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ReturnProcessName<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        sum<span class=\"token operator\">+=</span>m<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">=</span>m<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> max <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    max<span class=\"token operator\">=</span> p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ReturnProcessName<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n\n                p<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">&#125;</span>\n                      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">,</span>ReturnProcessName<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                            \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"被选中进程的进程名:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>q<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                q<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                                q<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">&#125;</span>\n\t                              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t                <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t                \tq<span class=\"token operator\">-</span><span class=\"token operator\">></span>processState<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t                <span class=\"token punctuation\">&#125;</span>\n                            q<span class=\"token operator\">=</span>q<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n                    q<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n                    max<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行一次后进程队列的变化:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ReturnProcessName<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果:</strong></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/1Xn16500J847.jpg?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/qCGSz0Azzdif.jpg?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/FMiq4WyNObOV.gif\" alt=\"mark\"></p>\n<h2 id=\"实验二-主存储器空间的分配和回收\"><a class=\"markdownIt-Anchor\" href=\"#实验二-主存储器空间的分配和回收\">#</a> 实验二 主存储器空间的分配和回收</h2>\n<h3 id=\"一-实习内容-2\"><a class=\"markdownIt-Anchor\" href=\"#一-实习内容-2\">#</a> 一、实习内容</h3>\n<p>​ 主存储器空间的分配和回收。</p>\n<h3 id=\"二-实习目的-2\"><a class=\"markdownIt-Anchor\" href=\"#二-实习目的-2\">#</a> 二、实习目的</h3>\n<p>​ 一个好的计算机系统不仅要有一个足够容量的、存取速度高的、稳定可靠的主存储器，而且要能合理地分配和使用这些存储空间。当用户提出申请存储器空间时，存储管理必须根据申请者的要求，按一定的策略分析主存空间的使用情况，找出足够的空闲区域分配给申请者。当作业撤离或主动归还主存资源时，则存储管理要收回作业占用的主存空间或归还部分主存空间。主存的分配和回收的实现虽与主存储器的管理方式有关的，通过本实习帮助学生理解在不同的存储管理方式下应怎样实现主存空间的分配和回收。</p>\n<h3 id=\"三-实习题目-2\"><a class=\"markdownIt-Anchor\" href=\"#三-实习题目-2\">#</a> 三、实习题目</h3>\n<p>​ 模拟在分页式管理方式下采用位示图来表示主存分配情况，实现主存空间的分配和回收。</p>\n<h4 id=\"提示-2\"><a class=\"markdownIt-Anchor\" href=\"#提示-2\">#</a> 提示：</h4>\n<ol>\n<li>\n<p>分页式存储器把主存分成大小相等的若干块，作业的信息也按块的大小分页，作业装入主存时可把作业的信息按页分散存放在主存的空闲块中，为了说明主存中哪些块已经被占用，哪些块是尚未分配的空闲块，可用一张位示图来指出。位示图可由若干存储单元来构成，其中每一位与一个物理块对应，用 0/1 表示对应块为空闲 / 已占用。</p>\n</li>\n<li>\n<p>假设某系统的主存被分成大小相等的 64 块，则位示图可用 8 个字节来构成，另用一单元记录当前空闲块数。如果已有第 0，1，4，5，6，9，11，13，24，31，共 10 个主存块被占用了，那么位示图情况如下：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/y2yBXTmrC7SP.png?imageslim\" alt=\"mark\"></p>\n</li>\n<li>\n<p>当要装入一个作业时，根据作业对主存的需要量，先查当前空闲块数是否能满足作业要求，若不能满足则输出分配不成功。若能满足，则查位示图，找出为 “0” 的一些位，置上占用标志 “1”，从 “当前空闲块数” 中减去本次占用块数。</p>\n</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/Wq5YpOTIc25K.png?imageslim\" alt=\"mark\"></p>\n<p>其中，j 表示找到的是第 n 个字节，I 表示对应的是第 n 位。</p>\n<p>根据分配给作业的块号，为作业建立一张<strong>页表</strong>，页表格式：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/fWnQmUT7up8x.png?imageslim\" alt=\"mark\"></p>\n<ol start=\"4\">\n<li>\n<p>当一个作业执行结束，归还主存时，根据该作业的页表可以知道应归还的块号，由块号可计算出在位示图中的对应位置，把对应位的占用标志清成 “0”，表示对应的块已成为空闲块。归还的块数加入到当前空闲块数中。由块号计算在位示图中的位置的公式如下：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/0zJ5vnMejiNd.png?imageslim\" alt=\"mark\"></p>\n</li>\n<li>\n<p>设计实现主存分配和回收的程序。假定位示图的初始状态如（2）所述，现有一信息量为 5 页的作业要装入，运行你所设计的分配程序，为作业分配主存且建立页表（格式如（3）所述）。然后假定有另一作业执行结束，它占用的块号为第 4，5，6 和 31 块，运行你所设计的回收程序，收回作业归还的主存块。</p>\n</li>\n</ol>\n<p>要求能显示和打印分配或回收前后的位示图和当前空闲块数，对完成一次分配后还要显示或打印为作业建立的页表。</p>\n<h3 id=\"四-实习报告\"><a class=\"markdownIt-Anchor\" href=\"#四-实习报告\">#</a> 四、实习报告</h3>\n<ol>\n<li>实习题目。</li>\n<li>程序中使用的数据结构及符号说明。</li>\n<li>流程图。</li>\n<li>打印一份源程序并附上注释。</li>\n<li>打印程序运行时的初值和运行结果，要求如下：</li>\n</ol>\n<h4 id=\"输出要求\"><a class=\"markdownIt-Anchor\" href=\"#输出要求\">#</a> 输出要求:</h4>\n<p>​ 打印位示图和当前空闲块数的初值；要求装入的作业对主存的申请量，为作业分配后的位示图、当前空闲块数和页表；作业归还的块号、回收作业所占主存后的位示图和当前空闲块数。</p>\n<p><strong>源代码:</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">#include <span class=\"token string\">\"stdio.h\"</span>\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  int arr<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  int n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  int sumsheng<span class=\"token operator\">=</span><span class=\"token number\">54</span><span class=\"token punctuation\">;</span>\n  int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  int count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  int indexI<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  int flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  int arr1<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  int finallyIndex<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  int arrindex<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  int arrindex2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  int indexflag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  int x<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  int ReturnNum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  int term<span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"装入的作业对主存的申请量:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// printf(\"%d\\n\", sumsheng);</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始位示图:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前空闲块数的初值:%d\\n\"</span><span class=\"token punctuation\">,</span>sumsheng <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsumsheng<span class=\"token operator\">=</span>sumsheng<span class=\"token operator\">-</span>n<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span>sumsheng<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分配不成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#123;</span>\n            indexI<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            goto <span class=\"token constant\">LOOP</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n       <span class=\"token constant\">LOOP</span><span class=\"token operator\">:</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>indexI<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">64</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#123;</span>\n            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            arr1<span class=\"token punctuation\">[</span>indexflag<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            indexflag<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                 finallyIndex<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n                 goto <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token constant\">A</span><span class=\"token operator\">:</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为作业分配后的位示图:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为作业分配后的空闲块数:%d\\n\"</span><span class=\"token punctuation\">,</span>sumsheng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"页表:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"页号\\t块号\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%d\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入作业归还的块号的数量:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ReturnNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入作业归还的块号:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>ReturnNum <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ReturnNum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n       term<span class=\"token operator\">=</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       arr<span class=\"token punctuation\">[</span>term<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"回收作业所占主存后的位示图:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前空闲块数:%d\\n\"</span><span class=\"token punctuation\">,</span>sumsheng<span class=\"token operator\">+</span>ReturnNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果:</strong></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/oPYSHAezbqWC.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/5tuH6MxvT5cc.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/Mhg1pbnGuPwe.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190615/DePT3qGywNBk.gif\" alt=\"mark\"></p>\n",
            "tags": [
                "学习实训"
            ]
        },
        {
            "id": "http://example.com/2019/05/13/ProcessScheduling/",
            "url": "http://example.com/2019/05/13/ProcessScheduling/",
            "title": "操作系统进程调度作业",
            "date_published": "2019-05-13T04:52:54.000Z",
            "content_html": "<h1 id=\"操作系统进程调度作业\"><a class=\"markdownIt-Anchor\" href=\"#操作系统进程调度作业\">#</a> 操作系统进程调度作业</h1>\n<blockquote>\n<p>操作系统进程调度作业</p>\n<p>锻炼下思维！</p>\n</blockquote>\n<h2 id=\"进程调度-1\"><a class=\"markdownIt-Anchor\" href=\"#进程调度-1\">#</a> 进程调度 1</h2>\n<p><strong>问题描述</strong>：</p>\n<p>​ 要求输入 3 个进程，找出最先执行的那个进程的进程名。（如果遇到优先级一样，按照输入顺序执行。），本题中，优先数数值大的表示优先级比较高。</p>\n<p><strong>输入格式</strong>：</p>\n<p>​ 程序要求输入 3 行，以回车符号作为分隔，每行有 3 个数据，以空格作为分隔。首先输入一个字符串（长度小于等于 10），为进程名，第 2 个数据类型为整型，表示进程的优先数，第 3 个数据类型为整型，表示进程的运行时间。</p>\n<p><strong>输出格式</strong>：</p>\n<p>​ 输出一个字符串，为最先执行进程的进程名。</p>\n<p><em>样例输入 1：</em></p>\n<p>P1 1 1</p>\n<p>P2 2 2</p>\n<p>P3 3 3</p>\n<p>样例输出 1：</p>\n<p>P3</p>\n<p><em>样例输入 2：</em></p>\n<p>P1 130 10</p>\n<p>P2 100 100</p>\n<p>P3 100 100</p>\n<p>样例输出 2：</p>\n<p>P2</p>\n<p><strong>链表实现：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">#include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\n#include <span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span> <span class=\"token comment\">//strcpy()</span>\n#include <span class=\"token operator\">&lt;</span>stdlib<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span><span class=\"token comment\">//malloc()</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntypedef struct process\n<span class=\"token punctuation\">&#123;</span>\n\tchar ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tint Priority<span class=\"token punctuation\">;</span>\n\tint Time<span class=\"token punctuation\">;</span>\n\tstruct process <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>nodelist<span class=\"token punctuation\">;</span>\n\nnodelist <span class=\"token operator\">*</span>pHead<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//存放调度的首节点地址</span>\n\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//添加问题</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tint Priority<span class=\"token punctuation\">;</span>\n\tint Time<span class=\"token punctuation\">;</span>\n    int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>ProcessName<span class=\"token punctuation\">,</span>Priority<span class=\"token punctuation\">,</span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//将数据插入链表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//申请存储空间</span>\n\tnodelist <span class=\"token operator\">*</span>pNew<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>nodelist <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>nodelist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnodelist <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">,</span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority <span class=\"token operator\">=</span> Priority<span class=\"token punctuation\">;</span>\n\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">;</span>\n\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// printf(\"5\\n\");</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//插入前链表为空，新插入的节点为头节点</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tpHead<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//p1=pHead;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tp<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\t\t\t    p<span class=\"token operator\">=</span>q<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t    p<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//显示链表中的数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/* 显示所有的结果 */</span>\n\tnodelist <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"链表中啥都没有！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//相关算法实现</span>\n\tnodelist <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\tint max<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">;</span>\n\tint flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tchar firstName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tchar ReturnProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> max <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    max<span class=\"token operator\">=</span> p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ReturnProcessName<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tflag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>ReturnProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190513/liF2w98LPKem.gif\" alt=\"mark\"></p>\n<p>​ <img src=\"http://static.zxinc520.com/blog/20190513/XXOxTOQJ8P0H.gif\" alt=\"mark\"></p>\n<h2 id=\"进程调度-2\"><a class=\"markdownIt-Anchor\" href=\"#进程调度-2\">#</a> 进程调度 2</h2>\n<p><strong>问题描述</strong>：</p>\n<p>​ 要求输入 N 个进程（0&lt;N&lt;=100），找出最后执行的那个进程的进程名。（如果遇到优先级一样，按照输入顺序执行。），本题中，优先数数值较高的优先级也较高。</p>\n<p><strong>输入格式</strong>：</p>\n<p>​ 程序首先要求输入一个整型值 N，接下来输入为 N 行，以回车符号作为分隔，每行有 3 个数据，以空格作为分隔。首先输入一个字符串（长度小于等于 10），该字符串为进程名。第 2 个数据类型为整型，表示进程的优先数。第 3 个数据类型为整型，表示进程的运行时间。</p>\n<p><strong>输出格式：</strong></p>\n<p>​ 输出一个字符串，为最后执行进程的进程名。</p>\n<p><em>样例输入 1：</em></p>\n<p>3</p>\n<p>P1 1 1</p>\n<p>P2 2 2</p>\n<p>P3 3 3</p>\n<p>样例输出 1：</p>\n<p>P3</p>\n<p><em>样例输入 2：</em></p>\n<p>2</p>\n<p>P1 10 10</p>\n<p>P2 100 100</p>\n<p>样例输出 2：</p>\n<p>P2</p>\n<p><strong>源代码：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">#include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\n#include <span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span> <span class=\"token comment\">//strcpy()</span>\n#include <span class=\"token operator\">&lt;</span>stdlib<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span><span class=\"token comment\">//malloc()</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntypedef struct process\n<span class=\"token punctuation\">&#123;</span>\n\tchar ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tint Priority<span class=\"token punctuation\">;</span>\n\tint Time<span class=\"token punctuation\">;</span>\n\tstruct process <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>nodelist<span class=\"token punctuation\">;</span>\n\nnodelist <span class=\"token operator\">*</span>pHead<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//存放调度的首节点地址</span>\n\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// view();</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//添加问题</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tint Priority<span class=\"token punctuation\">;</span>\n\tint Time<span class=\"token punctuation\">;</span>\n    int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d %d\"</span><span class=\"token punctuation\">,</span>ProcessName<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Priority<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>ProcessName<span class=\"token punctuation\">,</span>Priority<span class=\"token punctuation\">,</span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//将数据插入链表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//申请存储空间</span>\n\tnodelist <span class=\"token operator\">*</span>pNew<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>nodelist <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>nodelist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnodelist <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">,</span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority <span class=\"token operator\">=</span> Priority<span class=\"token punctuation\">;</span>\n\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">;</span>\n\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// printf(\"5\\n\");</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//插入前链表为空，新插入的节点为头节点</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tpHead<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//p1=pHead;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//将地址为pNew的节点插入到首地址为pHead的链表的尾部</span>\n\t\t\t<span class=\"token comment\">/*p1->next=pNew;\n\t\t\tp1=pNew;\n\t\t\tpNew->next=NULL;*/</span>\n\t\t\tp<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//q=(nodelist *)malloc(sizeof(nodelist));</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//文件不为空，即pHead后面有数据</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\t\t\t    p<span class=\"token operator\">=</span>q<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//只有头结点，即pHead后面无数据</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">//将地址为pNew的节点插入到首地址为pHead的链表的尾部</span>\n\t\t\t\tp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t    p<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//显示链表中的数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/* 显示所有的结果 */</span>\n\tnodelist <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"链表中啥都没有！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//相关算法实现</span>\n\tnodelist <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\tnodelist <span class=\"token operator\">*</span>q<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\tnodelist <span class=\"token operator\">*</span>m<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\tint max<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">;</span>\n\tint flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tint i<span class=\"token punctuation\">;</span>\n\tint sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tchar firstName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tchar ReturnProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tchar FinallProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ReturnProcessName<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token operator\">+=</span>m<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token punctuation\">;</span>\n\t    m<span class=\"token operator\">=</span>m<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> max <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    max<span class=\"token operator\">=</span> p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ReturnProcessName<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tflag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t  \t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">,</span>ReturnProcessName<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                                <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>FinallProcessName<span class=\"token punctuation\">,</span>q<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\tq<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\tq<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\tq<span class=\"token operator\">=</span>q<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\tp<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\t\t\t\t\tq<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmax<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ReturnProcessName<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>FinallProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190513/HbsJqnfhPfHR.gif\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190513/Ge7alyBXmauM.gif\" alt=\"mark\"></p>\n<h2 id=\"进程调度-3\"><a class=\"markdownIt-Anchor\" href=\"#进程调度-3\">#</a> 进程调度 3</h2>\n<p><strong>问题描述</strong>：</p>\n<p>​ 要求输入 N 个进程（N 为正整型数，0&lt;N&lt;=25535），输出按照优先级从高到低执行的进程名字符串序列，直至结束。（如果遇到优先级一样，按照输入顺序先后执行。），本题中，优先数数值较高的进程，优先级也较高。</p>\n<p><strong>输入格式</strong>：</p>\n<p>​ 程序首先要求输入一个整型变量 N，接下来输入为 N 行，以回车符号作为分隔，每行有 3 个数据，以空格作为分隔。首先输入一个字符串（长度小于等于 10），该字符串为进程名。第 2 个数据类型为整型，表示进程的优先数。第 3 个数据类型为整型，表示进程的运行时间。</p>\n<p><strong>输出格式</strong>：</p>\n<p>​ 输出 1 行，M 个字符串，字符串之间用空格作为分隔。</p>\n<p>样例输入 1：</p>\n<p>3</p>\n<p>P1 1 1</p>\n<p>P2 2 2</p>\n<p>P3 3 3</p>\n<p>样例输出 1：</p>\n<p>P3 P2 P3 P1 P2 P3</p>\n<p>样例输入 2：</p>\n<p>2</p>\n<p>P1 3 3</p>\n<p>P2 1 1</p>\n<p>样例输出 2：</p>\n<p>P1 P1 P1 P2</p>\n<p>样例输入 3：</p>\n<p>100</p>\n<p>P0 0 1 P1 1 1 P2 2 1 P3 3 1 P4 4 1 P5 5 1 P6 6 1 P7 7 1 P8 8 1 P9 9 1 P10 10 1 P11 11 1 P12 12 1 P13 13 1 P14 14 1 P15 15 1 P16 16 1 P17 17 1 P18 18 1 P19 19 1 P20 20 1 P21 21 1 P22 22 1 P23 23 1 P24 24 1 P25 25 1 P26 26 1 P27 27 1 P28 28 1 P29 29 1 P30 30 1 P31 31 1 P32 32 1 P33 33 1 P34 34 1 P35 35 1 P36 36 1 P37 37 1 P38 38 1 P39 39 1 P40 40 1 P41 41 1 P42 42 1 P43 43 1 P44 44 1 P45 45 1 P46 46 1 P47 47 1 P48 48 1 P49 49 1 P50 50 1 P51 51 1 P52 52 1 P53 53 1 P54 54 1 P55 55 1 P56 56 1 P57 57 1 P58 58 1 P59 59 1 P60 60 1 P61 61 1 P62 62 1 P63 63 1 P64 64 1 P65 65 1 P66 66 1 P67 67 1 P68 68 1 P69 69 1 P70 70 1 P71 71 1 P72 72 1 P73 73 1 P74 74 1 P75 75 1 P76 76 1 P77 77 1 P78 78 1 P79 79 1 P80 80 1 P81 81 1 P82 82 1 P83 83 1 P84 84 1 P85 85 1 P86 86 1 P87 87 1 P88 88 1 P89 89 1 P90 90 1 P91 91 1 P92 92 1 P93 93 1 P94 94 1 P95 95 1 P96 96 1 P97 97 1 P98 98 1 P99 99 1</p>\n<p>样例输出 3：</p>\n<p>P100 P99 P98 P97 P96 P95 P94 P93 P92 P91 P90 P89 P88 P87 P86 P85 P84 P83 P82 P81 P80 P79 P78 P77 P76 P75 P74 P73 P72 P71 P70 P69 P68 P67 P66 P65 P64 P63 P62 P61 P60 P59 P58 P57 P56 P55 P54 P53 P52 P51 P50 P49 P48 P47 P46 P45 P44 P43 P42 P41 P40 P39 P38 P37 P36 P35 P34 P33 P32 P31 P30 P29 P28 P27 P26 P25 P24 P23 P22 P21 P20 P19 P18 P17 P16 P15 P14 P13 P12 P11 P10 P9 P8 P7 P6 P5 P4 P3 P2 P1</p>\n<p><strong>源代码：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">#include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\n#include <span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span> <span class=\"token comment\">//strcpy()</span>\n#include<span class=\"token operator\">&lt;</span>stdlib<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span><span class=\"token comment\">//malloc()</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntypedef struct process\n<span class=\"token punctuation\">&#123;</span>\n\tchar ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tint Priority<span class=\"token punctuation\">;</span>\n\tint Time<span class=\"token punctuation\">;</span>\n\tstruct process <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>nodelist<span class=\"token punctuation\">;</span>\n\nnodelist <span class=\"token operator\">*</span>pHead<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//存放调度的首节点地址</span>\n\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// view();</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//添加问题</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tint Priority<span class=\"token punctuation\">;</span>\n\tint Time<span class=\"token punctuation\">;</span>\n    int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d %d\"</span><span class=\"token punctuation\">,</span>ProcessName<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Priority<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>ProcessName<span class=\"token punctuation\">,</span>Priority<span class=\"token punctuation\">,</span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//将数据插入链表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Priority<span class=\"token punctuation\">,</span>int Time</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//申请存储空间</span>\n\tnodelist <span class=\"token operator\">*</span>pNew<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>nodelist <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>nodelist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnodelist <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">,</span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority <span class=\"token operator\">=</span> Priority<span class=\"token punctuation\">;</span>\n\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">;</span>\n\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// printf(\"5\\n\");</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//插入前链表为空，新插入的节点为头节点</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tpHead<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//p1=pHead;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//将地址为pNew的节点插入到首地址为pHead的链表的尾部</span>\n\t\t\t<span class=\"token comment\">/*p1->next=pNew;\n\t\t\tp1=pNew;\n\t\t\tpNew->next=NULL;*/</span>\n\t\t\tp<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//q=(nodelist *)malloc(sizeof(nodelist));</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//文件不为空，即pHead后面有数据</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\t\t\t    p<span class=\"token operator\">=</span>q<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//只有头结点，即pHead后面无数据</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">//将地址为pNew的节点插入到首地址为pHead的链表的尾部</span>\n\t\t\t\tp<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t    p<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n\t\t\t\tpNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//显示链表中的数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/* 显示所有的结果 */</span>\n\tnodelist <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"链表中啥都没有！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//相关算法实现</span>\n\tnodelist <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\tnodelist <span class=\"token operator\">*</span>q<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\tnodelist <span class=\"token operator\">*</span>m<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\tint max<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">;</span>\n\tint flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tint i<span class=\"token punctuation\">;</span>\n\tint sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tchar firstName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tchar ReturnProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ReturnProcessName<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token operator\">+=</span>m<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token punctuation\">;</span>\n\t    m<span class=\"token operator\">=</span>m<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// printf(\"1\\n\");</span>\n    <span class=\"token comment\">// printf(\"%d\\n\",sum);</span>\n    <span class=\"token comment\">// printf(\"2\\n\");</span>\n\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> max <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    max<span class=\"token operator\">=</span> p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ReturnProcessName<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tflag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t<span class=\"token comment\">// printf(\"ReturnProcessName:%s\\n\", ReturnProcessName);</span>\n                    <span class=\"token comment\">//printf(\"q->ProcessName:%s\\n\",q->ProcessName);</span>\n                    <span class=\"token comment\">//printf(\"\\n\");</span>\n\t\t\t\t  \t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t <span class=\"token comment\">// printf(\"ReturnProcessName:%s\\n\", ReturnProcessName);</span>\n      \t\t\t\t\t\t <span class=\"token comment\">// printf(\"q->ProcessName:%s\\n\",q->ProcessName);</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">,</span>ReturnProcessName<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span>q<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\tq<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\tq<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\tq<span class=\"token operator\">=</span>q<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\tp<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\t\t\t\t\tq<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmax<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Priority<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token comment\">// printf(\"\\n\");</span>\n\t\t\t\t\t<span class=\"token comment\">// view();</span>\n\t\t\t\t\t<span class=\"token comment\">// printf(\"\\n\");</span>\n\n\t\t\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ReturnProcessName<span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190513/fWvr6o5WnCac.gif\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190513/UBx2BDfscUbD.gif\" alt=\"mark\"></p>\n<h2 id=\"进程调度-4时间片轮转\"><a class=\"markdownIt-Anchor\" href=\"#进程调度-4时间片轮转\">#</a> 进程调度 4：时间片轮转</h2>\n<p><strong>问题描述</strong>：</p>\n<p>​ 要求输入 N 个进程（0&lt;N&lt;=100），输入时间片 M（0&lt;M〈=5），按照进程输入的顺序以时间片轮转的方法输出指定的第 K 轮（K&gt;0）执行的那个进程的进程名。</p>\n<p><strong>输入格式</strong>：</p>\n<p>​ 程序首先输入一个正整数 M（0&lt;M〈=5）作为时间片，下一行输入一个正整数 N（0&lt;N&lt;=100），接下来输入为 N 行，以回车符号作为分隔，每行有 2 个数据，以空格作为分隔。第一个数据是字符串（长度小于等于 10），该字符串为进程名，第 2 个数据类型为整型，表示该进程需要的运行时间。最后输入一个正整数 K，作为时间片轮转的次数（次数从 1 开始计数）。</p>\n<p><strong>输出格式</strong>：</p>\n<p>​ 输出一个字符串，为最后执行进程的进程名；若无进程运行，则输出 “over”（不含双引号，所有字母皆为小写）。</p>\n<p>样例输入 1：</p>\n<p>1</p>\n<p>3</p>\n<p>P1 1</p>\n<p>P2 2</p>\n<p>P3 3</p>\n<p>3</p>\n<p>样例输出 1：P3</p>\n<p>样例输入 2：</p>\n<p>1</p>\n<p>3</p>\n<p>P1 1</p>\n<p>P2 2</p>\n<p>P3 3</p>\n<p>10</p>\n<p>样例输出 2：over</p>\n<p>样例输入 3：</p>\n<p>2</p>\n<p>3</p>\n<p>P1 1</p>\n<p>P2 2</p>\n<p>P3 3</p>\n<p>4</p>\n<p>样例输出 3：P3</p>\n<p><em>代码展示：</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">#include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\n#include <span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span> <span class=\"token comment\">//strcpy()</span>\n#include<span class=\"token operator\">&lt;</span>stdlib<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span><span class=\"token comment\">//malloc()</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span>int <span class=\"token constant\">M</span><span class=\"token punctuation\">,</span>int n<span class=\"token punctuation\">,</span>int count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntypedef struct process\n<span class=\"token punctuation\">&#123;</span>\n    char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    int Priority<span class=\"token punctuation\">;</span>\n    int Time<span class=\"token punctuation\">;</span>\n    struct process <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>nodelist<span class=\"token punctuation\">;</span>\n\nnodelist <span class=\"token operator\">*</span>pHead<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//存放调度的首节点地址</span>\n\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// view();</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//添加问题</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span>int <span class=\"token constant\">M</span><span class=\"token punctuation\">,</span>int n<span class=\"token punctuation\">,</span>int count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    int Priority<span class=\"token punctuation\">;</span>\n    int Time<span class=\"token punctuation\">;</span>\n    int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int n<span class=\"token punctuation\">;</span>\n\tint <span class=\"token constant\">M</span><span class=\"token punctuation\">;</span>\n\tint count<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span><span class=\"token constant\">M</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d\"</span><span class=\"token punctuation\">,</span>ProcessName<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span>ProcessName<span class=\"token punctuation\">,</span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token constant\">M</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//将数据插入链表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char ProcessName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int Time</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//申请存储空间</span>\n    nodelist <span class=\"token operator\">*</span>pNew<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>nodelist <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>nodelist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nodelist <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">,</span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">;</span>\n    pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// printf(\"5\\n\");</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//插入前链表为空，新插入的节点为头节点</span>\n        <span class=\"token punctuation\">&#123;</span>\n            pHead<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//p1=pHead;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//将地址为pNew的节点插入到首地址为pHead的链表的尾部</span>\n            <span class=\"token comment\">/*p1->next=pNew;\n            p1=pNew;\n            pNew->next=NULL;*/</span>\n            p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//q=(nodelist *)malloc(sizeof(nodelist));</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//文件不为空，即pHead后面有数据</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                q<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n                p<span class=\"token operator\">=</span>q<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n                pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//只有头结点，即pHead后面无数据</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//将地址为pNew的节点插入到首地址为pHead的链表的尾部</span>\n                p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n                p<span class=\"token operator\">=</span>pNew<span class=\"token punctuation\">;</span>\n                pNew<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//显示链表中的数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* 显示所有的结果 */</span>\n    nodelist <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pHead<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                p<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"链表中啥都没有！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">arithmetic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">int <span class=\"token constant\">M</span><span class=\"token punctuation\">,</span>int n<span class=\"token punctuation\">,</span>int count</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//相关算法实现</span>\n    nodelist <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n    int index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int forcount<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int Numcount<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int finallyNum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token comment\">// printf(\"%d %d %d\\n\",M,n,count);</span>\n     <span class=\"token comment\">// printf(\"%d\\n\",count/n);</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">%</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        forcount<span class=\"token operator\">=</span>count<span class=\"token operator\">/</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        forcount<span class=\"token operator\">=</span>count<span class=\"token operator\">/</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token comment\">// printf(\"forcount:%d\\n\", forcount);</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> forcount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#123;</span>\n\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n                            p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>Time <span class=\"token operator\">-</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token comment\">// printf(\"%s\\n\",p->ProcessName);</span>\n                            <span class=\"token comment\">// view();</span>\n                            <span class=\"token comment\">// printf(\"\\n\");</span>\n                            Numcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token comment\">// printf(\"%d\\n\",Numcount);</span>\n                            finallyNum<span class=\"token operator\">=</span>Numcount<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Numcount<span class=\"token operator\">==</span>count<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">&#123;</span>\n                              <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n\n                         p<span class=\"token operator\">=</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    p<span class=\"token operator\">=</span>pHead<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>finallyNum <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"over\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190522/EE00fbgzk6Ho.gif\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190522/FAQDVGbxoawJ.gif\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190522/ddwSvMe4TwsW.gif\" alt=\"mark\"></p>\n<hr>\n<h2 id=\"存储管理-1\"><a class=\"markdownIt-Anchor\" href=\"#存储管理-1\">#</a> 存储管理 1</h2>\n<p><strong>问题描述</strong>：</p>\n<p>​ 现有一个 8*8 的存储器，要对其空间进行分配。（下标从 0 开始，最后一个内存块下标为 63）。现已有块号为 1、7、13、23、47、59 的几个内存块被占用。现操作系统要求申请 N 块内存空间（0&lt;N&lt;=64），当输入的块数 N 超出其剩余空闲块数的时候，输出为 “false”，当输入为合理范围的时候，就输出其以行主序分配的最后一个内存空间的下标。</p>\n<p><strong>输入格式：</strong></p>\n<p>​ 程序要求输入一个整型数 N，表示要申请分配空间的大小。</p>\n<p><strong>输出格式</strong>：</p>\n<p>​ 输出为一个整型数，表示最后一个被分配空间的下标。</p>\n<p>样例输入 1：</p>\n<p>3</p>\n<p>样例输出 1：</p>\n<p>3</p>\n<p>样例输入 2：</p>\n<p>100</p>\n<p>样例输出 2：</p>\n<p>false</p>\n<p>样例输入 3：</p>\n<p>50</p>\n<p>样例输出 3：</p>\n<p>54</p>\n<p><em>源代码</em>：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">#include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    int arr<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int n<span class=\"token punctuation\">;</span>\n    int count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">47</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">59</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span><span class=\"token number\">58</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"false\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    \t <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t    <span class=\"token punctuation\">&#123;</span>\n\t\t    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t    \t<span class=\"token punctuation\">&#123;</span>\n\t\t    \t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t   \t\t<span class=\"token punctuation\">&#125;</span>\n\t\t \t<span class=\"token punctuation\">&#125;</span>\n \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token operator\">+</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190522/fhJf38dsniWT.gif\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190522/G8b9fg3D0LVM.gif\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190522/cy8XL8vNxJrJ.gif\" alt=\"mark\"></p>\n<h2 id=\"存储管理-2\"><a class=\"markdownIt-Anchor\" href=\"#存储管理-2\">#</a> 存储管理 2</h2>\n<p><strong>问题描述</strong>：</p>\n<p>​ 现有一个 8*8 的存储器，要对其空间进行分配。（下标从 0 开始，最后一个内存块下标为 63）。现已有块号为 2、7、13、23、37、47、59、61 的几个内存块被占用。要求输入需分配的进程数 M（0&lt;M&lt;=56），接下来输入为 M 个整型数，每个数为各个进程需占用的内存块数。当分配到某进程时，其剩余空闲块数可以分配，就输出当前进程分配的最后一个内存空间的下标。当分配到某进程时，其进程块数超出剩余空闲块数无法分配，输出为 “false”（不含双引号，且为全小写）。输出的多个下标（或 &quot;false&quot;）之间用空格隔开。</p>\n<p><strong>输入格式</strong>：</p>\n<p>​ 程序输入分为两行，第一行要求输入一个整型数 M，表示要所需分配空间的进程数，接下来的第二行输入 M 个整型数，每个数之间用空格隔开，表示 M 个进程每个进程占用的内存空间大小。</p>\n<p><strong>输出格式：</strong></p>\n<p>​ 输出为 M 组整型数（或 &quot;false&quot;），每个整型数表示该进程最后一个被分配的内存空间的下标（或 &quot;false&quot;），下标（或 &quot;false&quot;）之间用空格隔开。</p>\n<p>样例输入 1：</p>\n<p>3</p>\n<p>3 3 3</p>\n<p>样例输出 1：</p>\n<p>3 6 10</p>\n<p>样例输入 2：</p>\n<p>4</p>\n<p>3 3 64 3</p>\n<p>样例输出 2：</p>\n<p>3 6 false 10</p>\n<p><em>源代码：</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">#include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\n#include <span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">funsave</span><span class=\"token punctuation\">(</span>int n<span class=\"token punctuation\">,</span>int arr<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int residue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    int arr<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    int num<span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    int inputnum<span class=\"token punctuation\">;</span>\n    int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int x<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    int sumsheng<span class=\"token operator\">=</span><span class=\"token number\">56</span><span class=\"token punctuation\">;</span>\n    char thirdName<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    char str<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    int getInTStr<span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">37</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">41</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">47</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">59</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">61</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>inputnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inputnum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sumsheng<span class=\"token operator\">></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n           sumsheng<span class=\"token operator\">=</span>sumsheng<span class=\"token operator\">-</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sumsheng<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inputnum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">funsave</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">funsave</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">int n<span class=\"token punctuation\">,</span>int arr<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int residue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int indexI<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int arr1<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    int arr2<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    int finallyIndex<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int arrindex<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int arrindex2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// printf(\"start n:%d\\n\",n);</span>\n    <span class=\"token comment\">// printf(\"getInTStr:%d\\n\",getInTStr);</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span>residue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"false \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#123;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token operator\">+</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                arr2<span class=\"token punctuation\">[</span>arrindex2<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n                arrindex2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span>count<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#123;</span>\n            indexI<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            goto <span class=\"token constant\">LOOP</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n       <span class=\"token constant\">LOOP</span><span class=\"token operator\">:</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>indexI<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>indexI<span class=\"token operator\">+</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#123;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> indexI<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> indexI<span class=\"token operator\">+</span>count<span class=\"token operator\">+</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#123;</span>\n            finallyIndex<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            arr1<span class=\"token punctuation\">[</span>arrindex<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n          arrindex<span class=\"token operator\">=</span>arrindex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token punctuation\">&#125;</span>\n            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> finallyIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190523/iyJhP4Rqt9KS.gif\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190523/ri4eCOgCqxI1.gif\" alt=\"mark\"></p>\n<h2 id=\"储存管理-3\"><a class=\"markdownIt-Anchor\" href=\"#储存管理-3\">#</a> 储存管理 3</h2>\n<p><strong>问题描述：</strong></p>\n<p>​ 现有一个 8*8 的存储器，要对其已分配的空间进行分配及回收。（下标从 0 开始，最后一个内存块下标为 63）。现已有块号为 2、7、13、23、37、41、47、59、61 的几个内存块被占用。要求输入需分配的进程数 M（0&lt;M&lt;=55），接下来输入为 M 个整型数，每个数为各个进程需占用的内存块数。当分配到某进程时，其剩余空闲块数可以分配，就输出当前进程分配的最后一个内存空间的下标。当分配到某进程时，其进程块数超出剩余空闲块数无法分配，输出为 “false”（不含双引号，且为全小写）。输出的多个下标（或 &quot;false&quot;）之间用空格隔开。以上进程不管是否分配成功，按照输入顺序依次命名为 p1、p2、p3………pM。回收的时候输入进程名 pN，则返回进程名为 pN 的所有占用内存块号下标，如果该进程名不存在或输入的数值为不合理范围，则返回 “false”。</p>\n<p><strong>输入格式：</strong></p>\n<p>​ 程序输入分为三行，第一行是一个整型数 M，表示要所需分配空间的进程数，第二行为 M 个整型数，每个数之间用空格隔开，表示 M 个进程每个进程占用的内存空间大小。第三行为需要回收的进程名 pN，p 为小写字母，N 为正整型数。</p>\n<p><strong>输出格式：</strong></p>\n<p>​ 输出为两行，第一行为一组整型数，每个整型数表示该进程最后一个被分配的内存空间的下标，下标之间用空格隔开。第二行为一组整型数，表示被回收的进程的内存块下标，多个下标之间用空格隔开。</p>\n<p>样例输入 1：</p>\n<p>3</p>\n<p>3 3 3</p>\n<p>p3</p>\n<p>样例输出 1：</p>\n<p>3 6 10</p>\n<p>8 9 10</p>\n<p>样例输入 2：</p>\n<p>4</p>\n<p>3 3 64 3</p>\n<p>p3</p>\n<p>样例输出 2：</p>\n<p>3 6 false 10</p>\n<p>false</p>\n<p><em>源代码：</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">#include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\n#include <span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tint <span class=\"token operator\">*</span><span class=\"token function\">funsave</span><span class=\"token punctuation\">(</span>int n<span class=\"token punctuation\">,</span>int arr<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int residue<span class=\"token punctuation\">,</span>int getInTStr<span class=\"token punctuation\">,</span>int indexflag<span class=\"token punctuation\">,</span>int num<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    int arr<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    int num<span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    int inputnum<span class=\"token punctuation\">;</span>\n    int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int x<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    int sumsheng<span class=\"token operator\">=</span><span class=\"token number\">56</span><span class=\"token punctuation\">;</span>\n    char thirdName<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    char str<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    int getInTStr<span class=\"token punctuation\">;</span>\n     int <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n     int indexflag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">37</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">41</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">47</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">59</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">61</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>inputnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inputnum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sumsheng<span class=\"token operator\">></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n        \t sumsheng<span class=\"token operator\">=</span>sumsheng<span class=\"token operator\">-</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n \t\t\tx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sumsheng<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>thirdName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> thirdName<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tgetInTStr<span class=\"token operator\">=</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inputnum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">&#123;</span>\n     \tp<span class=\"token operator\">=</span><span class=\"token function\">funsave</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>getInTStr<span class=\"token punctuation\">,</span>indexflag<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     \t\tindexflag<span class=\"token operator\">=</span>indexflag<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token comment\">// printf(\"sumsheng:%d\\n\", sumsheng);</span>\n     <span class=\"token comment\">// for(i=0;i&lt;inputnum;i++)&#123;</span>\n     <span class=\"token comment\">//       printf(\"%d \",num[i]);</span>\n     <span class=\"token comment\">//   &#125;</span>\n       <span class=\"token comment\">// printf(\"\\n\");</span>\n       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>inputnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>sumsheng<span class=\"token operator\">&amp;&amp;</span>getInTStr<span class=\"token operator\">==</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           \t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"false\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getInTStr<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">&#123;</span>\n\t       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n\t\t   <span class=\"token punctuation\">&#123;</span>\n\t\t       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n\n\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nint <span class=\"token operator\">*</span><span class=\"token function\">funsave</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">int n<span class=\"token punctuation\">,</span>int arr<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>int residue<span class=\"token punctuation\">,</span>int getInTStr<span class=\"token punctuation\">,</span>int indexflag<span class=\"token punctuation\">,</span>int num<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    int i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int indexI<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span>  int arr1<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span>  int arr2<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    int finallyIndex<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int arrindex<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    int arrindex2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// printf(\"start n:%d\\n\",n);</span>\n    <span class=\"token comment\">// printf(\"getInTStr:%d\\n\",getInTStr);</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// for(i=0;i&lt;10;i++)&#123;</span>\n    <span class=\"token comment\">// \tprintf(\"%d \", num[i]);</span>\n    <span class=\"token comment\">// &#125;</span>\n    <span class=\"token comment\">// printf(\"\\n\");</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span>residue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"false \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    \t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    \t <span class=\"token punctuation\">&#123;</span>\n    \t \t <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t    <span class=\"token punctuation\">&#123;</span>\n\t\t    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t    \t<span class=\"token punctuation\">&#123;</span>\n\t\t    \t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t   \t\t<span class=\"token punctuation\">&#125;</span>\n\t\t \t<span class=\"token punctuation\">&#125;</span>\n\t\t \t <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token operator\">+</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t   <span class=\"token punctuation\">&#123;</span>\n\t\t\t   \t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t   \t  <span class=\"token punctuation\">&#123;</span>\n\t\t\t   \t      arr2<span class=\"token punctuation\">[</span>arrindex2<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\t   \t      arrindex2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t   \t  <span class=\"token punctuation\">&#125;</span>\n\t\t\t   \t  arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t   <span class=\"token punctuation\">&#125;</span>\n\t\t\t   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span>count<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    \t <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    \t \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    \t \t<span class=\"token punctuation\">&#123;</span>\n    \t \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    \t \t\t<span class=\"token punctuation\">&#123;</span>\n    \t \t\t\tindexI<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n    \t \t\t\tgoto <span class=\"token constant\">LOOP</span><span class=\"token punctuation\">;</span>\n    \t \t\t<span class=\"token punctuation\">&#125;</span>\n    \t \t<span class=\"token punctuation\">&#125;</span>\n\n    \t <span class=\"token constant\">LOOP</span><span class=\"token operator\">:</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>indexI<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>indexI<span class=\"token operator\">+</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t    \t<span class=\"token punctuation\">&#123;</span>\n\t\t    \t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t   \t\t<span class=\"token punctuation\">&#125;</span>\n    \t \t<span class=\"token punctuation\">&#125;</span>\n    \t \t<span class=\"token comment\">// printf(\"indexflag:%d\\n\", indexflag);</span>\n    \t \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> indexI<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> indexI<span class=\"token operator\">+</span>count<span class=\"token operator\">+</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t   <span class=\"token punctuation\">&#123;</span>\n\t\t\t   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t   \t<span class=\"token punctuation\">&#123;</span>\n\t\t\t   \t\tfinallyIndex<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\t   \t\tarr1<span class=\"token punctuation\">[</span>indexflag<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>arrindex<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\t\t\tarrindex<span class=\"token operator\">=</span>arrindex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t   \t<span class=\"token punctuation\">&#125;</span>\n\t\t\t   \t  arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t   <span class=\"token punctuation\">&#125;</span>\n\t\t\t    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> finallyIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\t\t<span class=\"token punctuation\">&#125;</span>\n    \t <span class=\"token punctuation\">&#125;</span>\n\n\n\n    \t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getInTStr<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \t <span class=\"token punctuation\">&#123;</span>\n    \t \t<span class=\"token keyword\">return</span> arr2<span class=\"token punctuation\">;</span>\n    \t <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\n    \t \t<span class=\"token comment\">// printf(\"getInTStr:%d\\n\", getInTStr);</span>\n       <span class=\"token comment\">//       printf(\"n:%d\\n\",n );</span>\n       <span class=\"token comment\">//       printf(\"indexflag:%d\\n\",indexflag );</span>\n    \t \t<span class=\"token comment\">// for(i=0;i&lt;10;i++)</span>\n\t\t\t    <span class=\"token comment\">// &#123;</span>\n\t\t\t    <span class=\"token comment\">//     for(j=0;j&lt; 10;j++)</span>\n\t\t\t    <span class=\"token comment\">//     &#123;</span>\n\t\t\t    <span class=\"token comment\">//         printf(\"%d\\t\",arr1[i][j]);//访问i行j列的二维数组元素</span>\n\t\t\t    <span class=\"token comment\">//     &#125;</span>\n\t\t\t    <span class=\"token comment\">//     printf(\"\\n\");</span>\n\t\t\t    <span class=\"token comment\">// &#125;</span>\n\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span>residue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n\n             \t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>indexflag<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">>=</span>n<span class=\"token punctuation\">)</span>\n\t\t\t\t <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t \t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">[</span>getInTStr<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t\t        <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t        \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>getInTStr<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n \t\t\t\t\t\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>arr1<span class=\"token punctuation\">[</span>getInTStr<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//访问i行j列的二维数组元素</span>\n\t\t\t\t        \t<span class=\"token punctuation\">&#125;</span>\n\n\t\t\t\t        <span class=\"token punctuation\">&#125;</span>\n\t\t\t\t <span class=\"token punctuation\">&#125;</span>\n\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\n\n    \t <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190602/famTkQ0URtAP.gif\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190602/u7GSImrnET42.gif\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190602/upFLuGwWxBsR.gif\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190602/KXkISHw5iD2s.gif\" alt=\"mark\"></p>\n",
            "tags": [
                "学习实训",
                "进程调度"
            ]
        }
    ]
}