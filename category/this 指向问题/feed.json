{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"this 指向问题\" category",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/03/23/getOfferthis/",
            "url": "http://example.com/2020/03/23/getOfferthis/",
            "title": "this 指向问题",
            "date_published": "2020-03-23T09:35:29.000Z",
            "content_html": "<h2 id=\"专题总结this-指向问题\"><a class=\"markdownIt-Anchor\" href=\"#专题总结this-指向问题\">#</a> 专题总结：this 指向问题</h2>\n<blockquote>\n<p>拿到 字节跳动实习生 offer 总结</p>\n<p>回馈分享一波自己的知识点总结</p>\n</blockquote>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【this 指向问题】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h2 id=\"一-this-的四条绑定规则\"><a class=\"markdownIt-Anchor\" href=\"#一-this-的四条绑定规则\">#</a> 一、this 的四条绑定规则</h2>\n<ol>\n<li>\n<p>默认绑定</p>\n<ul>\n<li>独立函数调用时，this 指向全局对象（window），如果使用严格模式，那么全局对象无法使用默认绑定， this 绑定至 undefined。</li>\n</ul>\n</li>\n<li>\n<p>隐式绑定</p>\n<ul>\n<li>\n<p>函数 this 是指向调用者 （隐式指向）</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>obj1.obj2.foo (); //foo 中的 this 与 obj2 绑定</li>\n</ul>\n</li>\n<li>\n<p>问题：隐式丢失</p>\n<ul>\n<li>描述：隐式丢失指的是函数中的 this 丢失绑定对象，即它会应用第 1 条的默认绑定规则，从而将 this 绑定到全局对象或者 undefined 上，取决于是否在严格模式下运行。</li>\n<li>以下情况会发生隐式丢失\n<ol>\n<li>绑定至上下文对象的函数被赋值给一个新的函数，然后调用这个新的函数时</li>\n<li>传入回调函数时</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>显式绑定</p>\n<ul>\n<li>显式绑定的核心是 JavaScript 内置的 call (…) 和 apply (…) 方法，call 和 apply bind 的 this 第一个参数 （显示指向）</li>\n</ul>\n</li>\n<li>\n<p>new 绑定</p>\n<ul>\n<li>构造函数的 this 是 new 之后的新对象 （构造器）</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"二-call-bind-apply\"><a class=\"markdownIt-Anchor\" href=\"#二-call-bind-apply\">#</a> 二、call bind apply</h2>\n<blockquote>\n<p>改变函数执行时的上下文（改变函数运行时的 this 指向）</p>\n</blockquote>\n<h3 id=\"21-apply\"><a class=\"markdownIt-Anchor\" href=\"#21-apply\">#</a> 2.1、apply</h3>\n<ul>\n<li>\n<p>第二个参数为数组</p>\n</li>\n<li>\n<p>自定义实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 自定义apply函数</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">apply1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//context为null或者是undefined时,设置默认值</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> global <span class=\"token operator\">:</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  obj<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//undefined 或者 是 null 不是 Iterator 对象，不能被 ...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> arg <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"22-call\"><a class=\"markdownIt-Anchor\" href=\"#22-call\">#</a> 2.2、call</h3>\n<ul>\n<li>\n<p>第二个参数为参数列表</p>\n</li>\n<li>\n<p>自定义实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">call1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> global <span class=\"token operator\">:</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  obj<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"23-bind\"><a class=\"markdownIt-Anchor\" href=\"#23-bind\">#</a> 2.3、bind</h3>\n<ul>\n<li>\n<p>特点</p>\n<ul>\n<li>返回一个函数</li>\n<li>可以传入参数（使用 bind 时和 bind 新生成的函数都可以传参）</li>\n<li>当 bind 返回的函数作为构造函数的时候，bind 时指定的 this 值会失效，但传入的参数依然生效</li>\n</ul>\n</li>\n<li>\n<p>注意：bind 这个方法在 IE6~8 下不兼容</p>\n</li>\n<li>\n<p>自定义实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bind1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> global <span class=\"token operator\">:</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  f<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">bound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">f</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  bound<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> bound<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"24-区别\"><a class=\"markdownIt-Anchor\" href=\"#24-区别\">#</a> 2.4、区别</h3>\n<blockquote>\n<p>call 和 apply 改变了函数的 this 上下文后便执行该函数，而 bind 则是返回改变了上下文后的一个函数。</p>\n</blockquote>\n<h2 id=\"三-相关题目\"><a class=\"markdownIt-Anchor\" href=\"#三-相关题目\">#</a> 三、相关题目</h2>\n<ol>\n<li>\n<p>怎么利用 call、apply 来求一个数组中最大或者最小值</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如何利用 call、apply 来做继承</p>\n</li>\n<li>\n<p>apply、call、bind 的区别和主要应用场景</p>\n<ol>\n<li>将类数组 / 含有 length 属性的对象转化为数组</li>\n<li>求数组中的最大和最小值</li>\n<li>数组追加</li>\n<li>利用 call 和 apply 做继承</li>\n<li>判断变量类型</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "面试全面总结"
            ]
        }
    ]
}