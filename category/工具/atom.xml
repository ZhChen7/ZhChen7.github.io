<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>sunflower • Posts by &#34;工具&#34; category</title>
    <link href="http://example.com" />
    <updated>2019-10-10T06:19:47.000Z</updated>
    <category term="blog" />
    <category term="个人博客" />
    <category term="rem" />
    <category term="less" />
    <category term="art-template" />
    <category term="算法面试" />
    <category term="算法" />
    <category term="大 O？" />
    <category term="复杂度分析" />
    <category term="大二" />
    <category term="数据库实训" />
    <category term="IDE" />
    <category term="Git" />
    <category term="模块化" />
    <category term="构建工具" />
    <category term="上线和回滚" />
    <category term="ES6 模块化语法" />
    <category term="babel" />
    <category term="webpack" />
    <category term="rollup" />
    <category term="ES6" />
    <category term="hybrid" />
    <category term="虚拟 DOM" />
    <category term="知识点概述" />
    <category term="JS" />
    <category term="实用工具" />
    <category term="面试全面总结" />
    <category term="JS 三座大山" />
    <category term="学习实训" />
    <category term="性能优化" />
    <category term="加载过程" />
    <category term="promise" />
    <category term="异步解决方案" />
    <category term="回调地狱" />
    <category term="React" />
    <category term="React源码" />
    <category term="Vue3" />
    <category term="vue" />
    <category term="跑马灯" />
    <category term="父子组件间通信" />
    <category term="路由" />
    <category term="监听事件（keyup ，watch ，computed ）" />
    <category term="nrm" />
    <category term="Mint-UI" />
    <category term="MUI" />
    <category term="MVVM" />
    <category term="响应式、模板解析、渲染" />
    <category term="微信小程序" />
    <category term="单线程" />
    <category term="event loop" />
    <category term="异步的 Deferred" />
    <category term="Promise" />
    <category term="html" />
    <category term="hexo" />
    <category term="redux" />
    <category term="UTC时间问题" />
    <category term="正则表达式" />
    <category term="虚拟DOM" />
    <category term="博文" />
    <category term="React-Router" />
    <category term="React-Hooks" />
    <category term="DOM" />
    <category term="BOM" />
    <category term="事件绑定" />
    <category term="ajax 请求" />
    <category term="储存" />
    <category term="进程调度" />
    <category term="过滤器" />
    <category term="按键修饰符" />
    <category term="指令" />
    <category term="生命周期" />
    <category term="过渡效果" />
    <category term="组件" />
    <category term="webpack 后续问题" />
    <category term="数组" />
    <category term="API" />
    <category term="跨域" />
    <category term="动画" />
    <category term="事件" />
    <category term="React基础面试题-50" />
    <category term="数组相关操作" />
    <category term="手撕代码" />
    <category term="牛人面试题" />
    <entry>
        <id>http://example.com/2019/10/10/regular_expression/</id>
        <title>正则表达式</title>
        <link rel="alternate" href="http://example.com/2019/10/10/regular_expression/"/>
        <content type="html">&lt;h1 id=&#34;正则表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#正则表达式&#34;&gt;#&lt;/a&gt; 正则表达式&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。这些模式被用于 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp&#34;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 的 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec&#34;&gt; &lt;code&gt;exec&lt;/code&gt; &lt;/a&gt; 和 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test&#34;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt; 方法，以及 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String&#34;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 的 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match&#34;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt;、&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll&#34;&gt; &lt;code&gt;matchAll&lt;/code&gt; &lt;/a&gt;、&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace&#34;&gt; &lt;code&gt;replace&lt;/code&gt; &lt;/a&gt;、&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search&#34;&gt; &lt;code&gt;search&lt;/code&gt; &lt;/a&gt; 和 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split&#34;&gt; &lt;code&gt;split&lt;/code&gt; &lt;/a&gt; 方法。本章介绍 JavaScript &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions&#34;&gt;正则表达式&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;辅助正则可视化网站：&lt;a href=&#34;https://regexper.com/&#34;&gt;https://regexper.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用正则表达式的方法&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec&#34;&gt; &lt;code&gt;exec&lt;/code&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个在字符串中执行查找匹配的 RegExp 方法，它返回一个数组（未匹配到则返回 null）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test&#34;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个在字符串中测试是否匹配的 RegExp 方法，它返回 true 或 false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match&#34;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个在字符串中执行查找匹配的 String 方法，它返回一个数组，在未匹配到时会返回 null。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll&#34;&gt; &lt;code&gt;matchAll&lt;/code&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个在字符串中执行查找所有匹配的 String 方法，它返回一个迭代器（iterator）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search&#34;&gt; &lt;code&gt;search&lt;/code&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回 - 1。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace&#34;&gt; &lt;code&gt;replace&lt;/code&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split&#34;&gt; &lt;code&gt;split&lt;/code&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的  &lt;code&gt;String&lt;/code&gt;  方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;regexp-对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#regexp-对象&#34;&gt;#&lt;/a&gt; REGEXP 对象&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 通过内置函数对象 RegExp 支持正则表达式&lt;/li&gt;
&lt;li&gt;有两种方法实例化 RegExp 对象
&lt;ul&gt;
&lt;li&gt;字面量&lt;/li&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字面量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字面量&#34;&gt;#&lt;/a&gt; 字面量&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; reg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;/\bis\b/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;he is dog ,he love she how are you is&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;reg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;IS&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;// he IS dog ,he love she how are you IS&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;构造函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造函数&#34;&gt;#&lt;/a&gt; 构造函数&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; reg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RegExp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;\\bis\\b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;g&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;he is dog ,he love she how are you is&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;reg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;IS&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;// he IS dog ,he love she how are you IS&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;修饰符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修饰符&#34;&gt;#&lt;/a&gt; 修饰符&lt;/h4&gt;
&lt;p&gt;在 JavaScript 中，&lt;strong&gt;正则表达式标志&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不区分大小写搜索。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;全局搜索。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;m&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;多行搜索。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;u&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 unicode 码的模式进行匹配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;执行 “粘性” 搜索，匹配从目标字符串的当前位置开始，可以使用 y 标志。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;允许  &lt;code&gt;.&lt;/code&gt;  匹配换行符。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;元字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元字符&#34;&gt;#&lt;/a&gt; 元字符&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式由两种基本字符类型组成：
&lt;ul&gt;
&lt;li&gt;原义文本字符&lt;/li&gt;
&lt;li&gt;元字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;元字符是在正则表达式中有特殊含义的非字母字符&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;元字符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;td&gt;将下一个字符标记为特殊字符或字面值。例如，n 匹配字符 &lt;em&gt;n&lt;/em&gt;，而 \n 匹配换行符。序列 \ 匹配 \，而 ( 匹配 (。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;匹配输入的开始部分。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;匹配输入的结束部分。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;零次或更多次匹配前面的字符。例如，zo* 匹配 &lt;em&gt;z&lt;/em&gt; 或 *zoo*。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;一次或更多次匹配前面的字符。例如，zo+ 匹配 &lt;em&gt;zoo&lt;/em&gt;，但是不匹配 &lt;em&gt;z&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;零次或一次匹配前面的字符。例如，a?ve? 匹配 &lt;em&gt;never&lt;/em&gt; 中的 &lt;em&gt;ve&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;匹配任何单个字符，但换行符除外。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(pattern)&lt;/td&gt;
&lt;td&gt;匹配模式并记住匹配项。通过使用以下代码，匹配的子串可以检索自生成的匹配项集合：Item [0]…[n]。要匹配圆括号字符 ( )，请使用 ( 或 )。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x|y&lt;/td&gt;
&lt;td&gt;匹配 x 或 y。 例如，z|wood 匹配 &lt;em&gt;z&lt;/em&gt; 或 &lt;em&gt;wood&lt;/em&gt;。(z|w) oo 匹配 &lt;em&gt;zoo&lt;/em&gt; 或 &lt;em&gt;wood&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td n=&#34;&#34;&gt;&lt;/td&gt;
&lt;td&gt;n 是一个非负整数。精确匹配 n 次。例如，o {2} 不匹配 &lt;em&gt;Bob&lt;/em&gt; 中的 &lt;em&gt;o&lt;/em&gt;，但是匹配 &lt;em&gt;foooood&lt;/em&gt; 中的前两个 &lt;em&gt;o&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td n,=&#34;&#34;&gt;&lt;/td&gt;
&lt;td&gt;在此表达式中，n 是一个非负整数。至少 n 次匹配前面的字符。例如，o {2,} 不匹配 &lt;em&gt;Bob&lt;/em&gt; 中的 &lt;em&gt;o&lt;/em&gt;，但是匹配 &lt;em&gt;foooood&lt;/em&gt; 中的所有 &lt;em&gt;o&lt;/em&gt;。o {1,} 表达式等效于 o+，o {0,} 等效于 o*。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td n,m=&#34;&#34;&gt;&lt;/td&gt;
&lt;td&gt;m 和 n 变量是非负整数。至少 n 次且至多 m 次匹配前面的字符。例如，o {1,3} 匹配 &lt;em&gt;fooooood&lt;/em&gt; 中的前三个 &lt;em&gt;o&lt;/em&gt;。o {0,1} 表达式等效于 o?。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[xyz]&lt;/td&gt;
&lt;td&gt;一个字符集。匹配任意一个包含的字符。例如，[abc] 匹配 &lt;em&gt;plain&lt;/em&gt; 中的 &lt;em&gt;a&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^xyz]&lt;/td&gt;
&lt;td&gt;一个否定字符集。匹配任何未包含的字符。例如，[^abc] 匹配 &lt;em&gt;plain&lt;/em&gt; 中的 &lt;em&gt;p&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-z]&lt;/td&gt;
&lt;td&gt;字符范围。匹配指定范围中的任何字符。例如，[a-z] 匹配英语字母中的任何小写的字母字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^m-z]&lt;/td&gt;
&lt;td&gt;一个否定字符范围。匹配未在指定范围中的任何字符。例如，[m-z] 匹配未在范围 &lt;em&gt;m&lt;/em&gt; 到 &lt;em&gt;z&lt;/em&gt; 之间的任何字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\A&lt;/td&gt;
&lt;td&gt;仅匹配字符串的开头。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;匹配某个单词边界，即，某个单词和空格之间的位置。例如，er\b 匹配 &lt;em&gt;never&lt;/em&gt; 中的 &lt;em&gt;er&lt;/em&gt;，但是不匹配 &lt;em&gt;verb&lt;/em&gt; 中的 &lt;em&gt;er&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\B&lt;/td&gt;
&lt;td&gt;匹配非单词边界。ea*r\B 表达式匹配 &lt;em&gt;never early&lt;/em&gt; 中的 *ear*。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;匹配数字字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;匹配非数字字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\f&lt;/td&gt;
&lt;td&gt;匹配换页字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;匹配换行符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;匹配回车字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;匹配任何空格，包括空白、制表符、换页字符等等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;td&gt;匹配任何非空格字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;匹配跳进字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\v&lt;/td&gt;
&lt;td&gt;匹配垂直跳进字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;匹配任何单词字符，包括下划线。此表达式等效于 [A-Za-z0-9_]。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;匹配任何非单词字符。此表达式等效于 [^a-za-z0-9__]。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\z&lt;/td&gt;
&lt;td&gt;仅匹配字符串的结尾。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\Z&lt;/td&gt;
&lt;td&gt;仅匹配字符串的结尾，或者结尾的换行符之前。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;字符类：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a1b2c3d4&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/[abc]/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;X&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;X1X2X3d4&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a1b2c3d4&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/[^abc]/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;X&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;aXbXcXXX&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;范围类：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a1b2c3d4zcczx&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/[a-z]/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Q&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;Q1Q2Q3Q4QQQQQ&#34;&lt;/span&gt;

&lt;span class=&#34;token string&#34;&gt;&#34;a1b2c3d4zcczxAAAAAAA&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/[a-zA-Z]/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Q&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;Q1Q2Q3Q4QQQQQQQQQQQQ&#34;&lt;/span&gt;

&lt;span class=&#34;token string&#34;&gt;&#34;2016-09-12&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/[0-9]/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;A&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;AAAA-AA-AA&#34;&lt;/span&gt;

&lt;span class=&#34;token string&#34;&gt;&#34;2016-09-12&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/[0-9-]/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;A&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;AAAAAAAAAA&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;预定义类：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20191009/FsMlDwV4Kfrh.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//匹配一个 ab + 数字 + 任意字符 的字符串&lt;/span&gt;
ab\d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;边界：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20191009/UQyV6XeWDuqI.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;this is a boy&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/\bis\b/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;IS&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;this IS a boy&#34;&lt;/span&gt;

&lt;span class=&#34;token string&#34;&gt;&#34;@13@12331&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/@./g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Q&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;Q3Q2331&#34;&lt;/span&gt;

&lt;span class=&#34;token string&#34;&gt;&#34;@13@12331&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/^@./g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Q&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;Q3@12331&#34;&lt;/span&gt;

&lt;span class=&#34;token string&#34;&gt;&#34;@13@12331@&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/.@$/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Q&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;@13@1233Q&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;量词：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20191009/KsjXw8IGYwJD.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;贪婪模式：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;12345678&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/\d&amp;#123;3,6&amp;#125;/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;a78&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;非贪婪模式：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;12345678&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/\d&amp;#123;3,6&amp;#125;?/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;aa78&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;分组：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a1b2c3d4&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/([a-zA-z]\d)&amp;#123;3&amp;#125;/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;A&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;Ad4&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;或：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;123456789122312&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/(123|456)/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;A&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;AA789122312&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;反向引用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2019-10-09&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/(\d&amp;#123;4&amp;#125;)-(\d&amp;#123;2&amp;#125;)-(\d&amp;#123;2&amp;#125;)/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;$3/$2/$1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;09/10/2019&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;前瞻：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式从文本头部向尾部开始解析，文本尾部方向，称为 “前”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前瞻&lt;/strong&gt; 就是正则表达式匹配到规则的时候，向前检查是否符合断言，后顾 / 后瞻 方向相反&lt;/li&gt;
&lt;li&gt;JavaScript 不支持 后顾&lt;/li&gt;
&lt;li&gt;符合和不符合特定断言称为 &lt;strong&gt;肯定 / 正向&lt;/strong&gt; 匹配 和 &lt;strong&gt;否定 / 负向&lt;/strong&gt; 匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20191009/VS8ezfIwVH95.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a2*3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/\w(?=\d)/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;A&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//&#34;A2*3&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;对象属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象属性&#34;&gt;#&lt;/a&gt; 对象属性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;global：是否全文搜索，默认 false&lt;/li&gt;
&lt;li&gt;ignore case：是否大小写敏感，默认是 false&lt;/li&gt;
&lt;li&gt;multiline：多行搜索，默认值是 false&lt;/li&gt;
&lt;li&gt;lastIndex: 是当前表达式匹配内容的最后一个字符的下一个位置&lt;/li&gt;
&lt;li&gt;source：正则表达式的文本字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;regexpprototypetest&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#regexpprototypetest&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test&#34;&gt;RegExp.prototype.test()&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;test()&lt;/code&gt;  方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回  &lt;code&gt;true&lt;/code&gt;  或  &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; reg1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;/\w/&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
reg1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//true&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：/g（全局匹配 ） 使用 test 方法，结果不稳定！&lt;/p&gt;
&lt;h2 id=&#34;regexpprototypeexec&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#regexpprototypeexec&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec&#34;&gt;RegExp.prototype.exec()&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;exec() &lt;/code&gt; 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null&#34;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你只是为了判断是否匹配（true 或 false），可以使用 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test&#34;&gt; &lt;code&gt;RegExp.test()&lt;/code&gt; &lt;/a&gt; 方法，或者 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search&#34;&gt; &lt;code&gt;String.search()&lt;/code&gt; &lt;/a&gt; 方法。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="正则表达式" />
        <updated>2019-10-10T06:19:47.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2019/07/12/gitLearning/</id>
        <title>Git 学习</title>
        <link rel="alternate" href="http://example.com/2019/07/12/gitLearning/"/>
        <content type="html">&lt;h1 id=&#34;git-学习&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-学习&#34;&gt;#&lt;/a&gt; Git 学习&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Git 学习&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git 的优势&lt;/p&gt;
&lt;p&gt;Git 与 SVN 的主要区别&lt;/p&gt;
&lt;p&gt;安装 Git&lt;/p&gt;
&lt;p&gt;初始化 Git 仓储 /（仓库）&lt;/p&gt;
&lt;p&gt;配置使用者的用户名和邮箱&lt;/p&gt;
&lt;p&gt;把代码 存储到仓库中&lt;/p&gt;
&lt;p&gt;Git 查看日志&lt;/p&gt;
&lt;p&gt;Git 版本回退&lt;/p&gt;
&lt;p&gt;Git 分支的新建与合并&lt;/p&gt;
&lt;p&gt;上传至 github&lt;/p&gt;
&lt;p&gt;通过 ssh 方式 上传 代码&lt;/p&gt;
&lt;p&gt;push 和 pull 简写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;什么是-git&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是-git&#34;&gt;#&lt;/a&gt; 什么是 Git？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;git – fast 版本控制&lt;/p&gt;
&lt;p&gt;Git 是由 “Linux 之父” &lt;strong&gt;Linus Torvalds&lt;/strong&gt; 创建的。因为他发现找不到满意的方案来管理 Linux Kernel 联合开发的版本控制，就自己写了 Git。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;官方网站&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Git 是一个&lt;a href=&#34;https://git-scm.com/about/free-and-open-source&#34;&gt;免费的开源&lt;/a&gt; 分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有事务&lt;/li&gt;
&lt;li&gt;Git &lt;a href=&#34;https://git-scm.com/doc&#34;&gt;易于学习&lt;/a&gt;， &lt;a href=&#34;https://git-scm.com/about/small-and-fast&#34;&gt;占地面积小，具有闪电般快速的性能&lt;/a&gt;。它超越了 Subversion，CVS，Perforce 和 ClearCase 等 SCM 工具，具有&lt;a href=&#34;https://git-scm.com/about/branching-and-merging&#34;&gt;廉价本地分支&lt;/a&gt;，便捷的&lt;a href=&#34;https://git-scm.com/about/staging-area&#34;&gt;临时区域&lt;/a&gt;和 &lt;a href=&#34;https://git-scm.com/about/distributed&#34;&gt;多个工作流程等功能&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;git-的优势&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-的优势&#34;&gt;#&lt;/a&gt; Git 的优势&lt;/h3&gt;
&lt;p&gt;说到优势，那么自然是相对与 SVN 而言的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;** 版本库本地化，支持离线提交，相对独立不影响协同开发。** 每个开发者都拥有自己的版本控制库，在自己的版本库上可以任意的执行提交代码、创建分支等行为。例如，开发者认为自己提交的代码有问题？没关系，因为版本库是自己的，回滚历史、反复提交、归并分支并不会影响到其他开发者。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 更少的 “仓库污染”。**git 对于每个工程只会产生一个.git 目录，这个工程所有的版本控制信息都在这个目录中，不会像 SVN 那样在每个目录下都产生.svn 目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 把内容按元数据方式存储，完整克隆版本库。** 所有版本信息位于.git 目录中，它是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签、分支、版本记录等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 支持快速切换分支方便合并，比较合并性能好。** 在同一目录下即可切换不同的分支，方便合并，且合并文件速度比 SVN 快。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 分布式版本库，无单点故障，内容完整性好。** 内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;git-与-svn-的主要区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-与-svn-的主要区别&#34;&gt;#&lt;/a&gt; Git 与 SVN 的主要区别&lt;/h3&gt;
&lt;p&gt;Git 是&lt;strong&gt;分布式&lt;/strong&gt; SCM，而 SVN 是基于&lt;strong&gt;服务器&lt;/strong&gt;的，也就是说每个开发者本地都有一套 git 库，每个人维护自己的版本（或者合并其他人的版本），而 SVN 是每个人写完代码后都及时的 checkin 到服务器上，进行合并。&lt;/p&gt;
&lt;h3 id=&#34;安装-git&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装-git&#34;&gt;#&lt;/a&gt; 安装 Git&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496&#34;&gt;廖雪峰的官方网站 git 安装&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;鼠标 &lt;strong&gt;右键&lt;/strong&gt;，选中  &lt;code&gt;Git Bash Here&lt;/code&gt;  在里面输入相关命令：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/litoDVMJqNVb.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用-git&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用-git&#34;&gt;#&lt;/a&gt; 使用 Git&lt;/h2&gt;
&lt;h3 id=&#34;初始化-git-仓储仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初始化-git-仓储仓库&#34;&gt;#&lt;/a&gt; 初始化 Git 仓储 /（仓库）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;新建&lt;/strong&gt;一个文件夹&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/9NbV1d2Bf3H2.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;进入&lt;/strong&gt;文件夹，鼠标&lt;strong&gt;右键&lt;/strong&gt; 选中  &lt;code&gt;Git Bash Here&lt;/code&gt; ，输入命令  &lt;code&gt;git init&lt;/code&gt;  回车。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/PApIqKpihnsJ.gif&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;配置使用者的用户名和邮箱&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置使用者的用户名和邮箱&#34;&gt;#&lt;/a&gt; 配置使用者的用户名和邮箱&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;配置使用者的用户名和邮箱 （自报家门）, 每一次备份都会把当前备份者的信息存储起来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置用户名&lt;/strong&gt; ：  &lt;code&gt;git config --global user.name &amp;quot;zhouchen&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置邮箱&lt;/strong&gt;：  &lt;code&gt;git config --global user.email &amp;quot;1583741285@qq.com&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;配置使用者的&lt;strong&gt;用户名&lt;/strong&gt;：&lt;strong&gt;进入&lt;/strong&gt;文件夹，鼠标&lt;strong&gt;右键&lt;/strong&gt; 选中  &lt;code&gt;Git Bash Here&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;输入命令  &lt;code&gt;git config --global user.name &amp;quot;zhouchen&amp;quot;&lt;/code&gt;  回车 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/FUG7gTH6S2Mh.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;同样的配置使用者的 &lt;strong&gt;邮箱&lt;/strong&gt;：&lt;strong&gt;进入&lt;/strong&gt;文件夹，鼠标&lt;strong&gt;右键&lt;/strong&gt; 选中  &lt;code&gt;Git Bash Here&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;输入命令  &lt;code&gt;git config --global user.email &amp;quot;1583741285@qq.com&amp;quot;&lt;/code&gt;  回车 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/p62Mz0UPYcY9.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;把代码-存储到仓库中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#把代码-存储到仓库中&#34;&gt;#&lt;/a&gt; 把代码 存储到仓库中&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;把代码 存储到仓库中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：将 &lt;a href=&#34;http://readme.md&#34;&gt;readme.md&lt;/a&gt; 文件 存储到仓库中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/KwUDn18LHU1f.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;进入&lt;/strong&gt;文件夹，鼠标&lt;strong&gt;右键&lt;/strong&gt; 选中  &lt;code&gt;Git Bash Here&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;输入命令  &lt;code&gt;git add ./readme.md&lt;/code&gt;  回车 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/P1DnSzDuSOBO.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;紧接上一步，输入命令  &lt;code&gt;git commit -m &amp;quot;add Introductions&amp;quot;&lt;/code&gt;  回车 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;u&gt;add Introductions&lt;/u&gt;----- 可以自定义，一个辅助的解释 &lt;strong&gt;说明&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/FqHM4n7stzsF.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;查看提交状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看提交状态&#34;&gt;#&lt;/a&gt; 查看提交状态&lt;/h4&gt;
&lt;p&gt;命令： &lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/85IXkLM5Wusf.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-补充-添加到大门口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#add-补充-添加到大门口&#34;&gt;#&lt;/a&gt; add 补充 – 添加到大门口&lt;/h4&gt;
&lt;p&gt;命令 ： &lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;一次性-放入仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一次性-放入仓库&#34;&gt;#&lt;/a&gt; 一次性 – 放入仓库&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;合并 add 和 commit 命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;命令： &lt;code&gt;git commit --all -m &amp;quot;这是一次性的操作&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;git-查看日志&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-查看日志&#34;&gt;#&lt;/a&gt; Git 查看日志&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;查看日志 ---- 能够查看自己提交的信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; ：查看历史提交的日志&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log --oneline&lt;/code&gt;  可以看到精简版的日志&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;命令： &lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/PBubR1jYW0fX.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;命令： &lt;code&gt;git log --oneline&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/bDLltWMjdSo2.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;git-版本回退&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-版本回退&#34;&gt;#&lt;/a&gt; Git 版本回退&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;git 版本回退&lt;/p&gt;
&lt;p&gt;场景：如果最后一次提交的代码有误，可以通过 git 版本回退，回到代码无误的那一个状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;根据索引回退&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据索引回退&#34;&gt;#&lt;/a&gt; 根据索引回退&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;使用命令  &lt;code&gt;git log --oneline&lt;/code&gt;  查看状态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/3RDzcU0Fo8Vy.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;命令： &lt;code&gt;git reset --hard Head~0 &lt;/code&gt;  ( 向后退 &lt;strong&gt;0&lt;/strong&gt; 次)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/Uobb7X1EwPUd.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;命令： &lt;code&gt;git reset --hard Head~1&lt;/code&gt;  （向后退 &lt;strong&gt;1&lt;/strong&gt; 次）；此时代码回退了&lt;strong&gt;一次&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/3lM4UYpv7mQw.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190711/rwuTTeqbAFNc.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;通过版本号回退&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过版本号回退&#34;&gt;#&lt;/a&gt; 通过版本号回退&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;通过版本号回退&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/VsLjP0uf8h8D.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;命令： &lt;code&gt;git reset --hard ac97cbc &lt;/code&gt;  回车执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/puqQzAUO57un.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/4b2kofXa5m3B.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;git-reflog&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-reflog&#34;&gt;#&lt;/a&gt; git reflog&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看到每一次切换版本记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;命令： &lt;code&gt;git reflog&lt;/code&gt;  查看总体记录&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/rIsddoYu54q2.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;git-分支的新建与合并&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-分支的新建与合并&#34;&gt;#&lt;/a&gt; Git 分支的新建与合并&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;git 创建分支&lt;/p&gt;
&lt;p&gt;运用场景：放开发者只开发完成部分代码，想保存代码，为了能够后续继续开发，可以创建分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;现在让我们来看一个简单的分支与合并的例子，实际工作中大体也会用到这样的工作流程：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发某个网站。&lt;/li&gt;
&lt;li&gt;为实现某个新的需求，创建一个分支。&lt;/li&gt;
&lt;li&gt;在这个分支上开展工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;假设此时，你突然接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回到原先已经发布到生产服务器上的分支。&lt;/li&gt;
&lt;li&gt;为这次紧急修补建立一个新分支，并在其中修复问题。&lt;/li&gt;
&lt;li&gt;通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。&lt;/li&gt;
&lt;li&gt;切换到之前实现新需求的分支，继续工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;git-分支的新建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-分支的新建&#34;&gt;#&lt;/a&gt; Git 分支的新建&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;新建分支&lt;/strong&gt; ：命令： &lt;code&gt;git branch &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/vCIxtjnYlgsu.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看分支信息&lt;/strong&gt; ：命令： &lt;code&gt;git branch&lt;/code&gt;  （ &lt;strong&gt;绿色&lt;/strong&gt; --&amp;gt; 代表正处于此分支）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/R3t4POgEphiO.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;切换分支&lt;/strong&gt; ：命令  &lt;code&gt;git checkout dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/MQQVVoNGu41k.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;在分支中提交部分代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在分支中提交部分代码&#34;&gt;#&lt;/a&gt; 在分支中提交部分代码&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;类似于主分支 提交（一样）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/gBcACkrl5Gxf.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;git-合并分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-合并分支&#34;&gt;#&lt;/a&gt; Git 合并分支&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;合并分支&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：将 dev 分支 合并到主分支（master 分支）上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;切换到 &lt;strong&gt;master&lt;/strong&gt; 分支：命令： &lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/bKIzXXwv3Xnm.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;合并 dev 分支 到 master 分支上：命令： &lt;code&gt;git merge dev&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/uMQR0k4u6qTT.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;查看自己的提交记录 命令： &lt;code&gt;git log --oneline&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/gu7FKi6tGBkf.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;上传至-github&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上传至-github&#34;&gt;#&lt;/a&gt; 上传至 github&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git push [地址] master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.liaoxuefeng.com/wiki/896043488029600/900937935629664&#34;&gt;参考廖雪峰的官方网站 github 篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【地址】：例如：&lt;a href=&#34;https://github.com/ZhChen7/Travel.git&#34;&gt;https://github.com/ZhChen7/Travel.git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;git push&lt;/strong&gt; 推项目到 github： &lt;code&gt;git push [地址] master&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;从-github-拉下项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#从-github-拉下项目&#34;&gt;#&lt;/a&gt; 从 github 拉下项目&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;github 拉下项目&lt;/p&gt;
&lt;p&gt;【地址】：例如：&lt;a href=&#34;https://github.com/ZhChen7/Travel.git&#34;&gt;https://github.com/ZhChen7/Travel.git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;git pull&lt;/strong&gt; 从 github 拉下项目 ： &lt;code&gt;git pull [地址] master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git clone&lt;/strong&gt; 从 github 复制项目（往往在第一次使用）： &lt;code&gt;git clone [地址]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;通过-ssh-方式-上传-代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过-ssh-方式-上传-代码&#34;&gt;#&lt;/a&gt; 通过 ssh 方式 上传 代码&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;公钥 和 私钥 ；两者之间是有关联的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成 &lt;strong&gt;公钥&lt;/strong&gt; 和 &lt;strong&gt;私钥&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令： &lt;code&gt;ssh-keygen -t rsa -C &amp;lt;邮箱&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/2GKvEKipn11B.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/9qHzNoUvBgy2.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找到生成的文件&lt;/strong&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/DPxGphRT9AXv.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给自己的 github 配置 ssh&lt;/strong&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190712/eK9KUtgXVIrN.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;提交冲突&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#提交冲突&#34;&gt;#&lt;/a&gt; 提交冲突&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;先 &lt;strong&gt;pull&lt;/strong&gt; 还是 先 &lt;strong&gt;push&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用场景：多人共同提交时，产生提交冲突时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：&lt;strong&gt;先 pull&lt;/strong&gt; 然后 &lt;strong&gt;后 push&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;push-和-pull-简写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#push-和-pull-简写&#34;&gt;#&lt;/a&gt; push 和 pull 简写&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;push 和 pull 简写&lt;/p&gt;
&lt;p&gt;【地址简写】： &lt;code&gt;git remote add &amp;lt;变量名&amp;gt; &amp;lt;远程地址&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;配置远程地址&lt;/strong&gt;（设置别名）：方便每一次不用输入很长的地址&lt;/p&gt;
&lt;p&gt;命令： &lt;code&gt;git remote add origin git@github.com:ZhChen7/Travel.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即：为  &lt;code&gt;git@github.com:ZhChen7/Travel.git&lt;/code&gt;  设置别名： **origin **&lt;/p&gt;
&lt;h4 id=&#34;默认关联&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#默认关联&#34;&gt;#&lt;/a&gt; 默认关联&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;当我们在 push 时，加上 &lt;strong&gt;-u 参数&lt;/strong&gt; ，那么在&lt;strong&gt;下次 push 时&lt;/strong&gt;；只用 写  &lt;code&gt;git push&lt;/code&gt;  即可上传代码。&lt;/p&gt;
&lt;p&gt;（加上 &lt;strong&gt;-u&lt;/strong&gt; 之后，git 会把当前分支 与 远程指定的分支 进行&lt;strong&gt;关联&lt;/strong&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下次 直接写  &lt;code&gt;git push&lt;/code&gt;  相当于 写  &lt;code&gt;git push origin master&lt;/code&gt;  。&lt;/p&gt;
</content>
        <category term="Git" />
        <updated>2019-07-12T09:59:30.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2019/03/15/MarkdownToHTML/</id>
        <title>MarkdownToHtml</title>
        <link rel="alternate" href="http://example.com/2019/03/15/MarkdownToHTML/"/>
        <content type="html">&lt;h1 id=&#34;markdowntohtml&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#markdowntohtml&#34;&gt;#&lt;/a&gt; MarkdownToHtml&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;将 Markdown 文档转换为 HTML 显示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明&#34;&gt;#&lt;/a&gt; 说明&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本应用是采用 node.js + Express 搭建的&lt;/p&gt;
&lt;p&gt;运用的模板：art-template&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aui.github.io/art-template/zh-cn/docs/index.html&#34;&gt;art-template&lt;/a&gt; 是一个简约、超快的模板引擎。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h1&gt;
&lt;p&gt;我把 &lt;em&gt;&lt;a href=&#34;http://MarkdownToHTML.md&#34;&gt;MarkdownToHTML.md&lt;/a&gt;&lt;/em&gt; 放在目录 &lt;strong&gt;public/doc&lt;/strong&gt; 下（放在那里看你心情咯！）&lt;/p&gt;
&lt;h2 id=&#34;安装-marked&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装-marked&#34;&gt;#&lt;/a&gt; 安装 marked&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install marked --save&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;关键步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关键步骤&#34;&gt;#&lt;/a&gt; 关键步骤&lt;/h1&gt;
&lt;p&gt;路由部分关键代码：router.js （ 里面的部分代码是关键 ）&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Javascript&#34; data-language=&#34;Javascript&#34;&gt;&lt;code class=&#34;language-Javascript&#34;&gt;src

router.get(&amp;quot;&amp;#x2F;:docName&amp;quot;, function (req, res, next) &amp;#123;
    docId &amp;#x3D; req.params.docName.replace(&amp;#x2F;&amp;quot;&amp;#x2F;g, &amp;#39;&amp;#39;)
    publish.findById(docId, function (err, publish) &amp;#123;
        if (err) &amp;#123;
            return next(err)
        &amp;#125;
        fs.readFile(__dirname + src + publish.publishMainBodyUrl + &amp;#39;.md&amp;#39;,           &amp;#39;utf-8&amp;#39;, function (err, data) &amp;#123;
            if (err) &amp;#123;
                console.log(err);
            &amp;#125; else &amp;#123;
                htmlStr &amp;#x3D; marked(data.toString());
                res.type(&amp;#39;html&amp;#39;)
                message.find(&amp;#123;
                    message_type: publish.publishMainBodyUrl
                &amp;#125;, function (err, message) &amp;#123;
                    if (err) &amp;#123;
                        return next(err)
                    &amp;#125;
                    message.forEach(function (e) &amp;#123;
                        e.UTCtodata &amp;#x3D; new Date(e.message_time).toLocaleString()
                    &amp;#125;)
                    res.render(&amp;#39;MainBody.html&amp;#39;, &amp;#123;
                        doc: htmlStr,
                        publish: publish,
                        message: message
                    &amp;#125;);
                &amp;#125;)
            &amp;#125;
        &amp;#125;);
    &amp;#125;)
&amp;#125;)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;MainBody.html: 用 art-template 模板渲染后台传来的数据&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-HTML&#34; data-language=&#34;HTML&#34;&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!--
   &amp;#123;&amp;#123;@ doc &amp;#125;&amp;#125;或者  &amp;lt;%- doc %&amp;gt;
 （ @和- 很关键 &amp;#x3D;&amp;#x3D;&amp;gt;原文输出语句不会对 HTML 内容进行转义处理，可能存在安全风险，请谨慎使用。这个坑害我多走了好多弯路。）
--&amp;gt;
&amp;lt;div id&amp;#x3D;&amp;quot;markfs&amp;quot;&amp;gt;
    &amp;#123;&amp;#123;@ doc &amp;#125;&amp;#125; &amp;lt;!-- 或者  &amp;lt;%- doc %&amp;gt; --&amp;gt;
&amp;lt;&amp;#x2F;div&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;效果展示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#效果展示&#34;&gt;#&lt;/a&gt; 效果展示&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blogimage/20190314/x6s26FzHS5go.png?imageslim&#34; alt=&#34;g&#34;&gt;&lt;/p&gt;
</content>
        <category term="art-template" />
        <updated>2019-03-15T08:44:07.000Z</updated>
    </entry>
</feed>
