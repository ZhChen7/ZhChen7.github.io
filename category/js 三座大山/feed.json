{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"js 三座大山\" category",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/03/23/getOfferScopeandclosure/",
            "url": "http://example.com/2020/03/23/getOfferScopeandclosure/",
            "title": "作用域和闭包",
            "date_published": "2020-03-23T09:18:21.000Z",
            "content_html": "<h2 id=\"专题总结作用域和闭包\"><a class=\"markdownIt-Anchor\" href=\"#专题总结作用域和闭包\">#</a> 专题总结：作用域和闭包</h2>\n<blockquote>\n<p>拿到 字节跳动实习生 offer 总结</p>\n<p>回馈分享一波自己的知识点总结</p>\n</blockquote>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【作用域和闭包】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h2 id=\"一-作用域和作用域链概念\"><a class=\"markdownIt-Anchor\" href=\"#一-作用域和作用域链概念\">#</a> 一、作用域和作用域链概念</h2>\n<h3 id=\"11-作用域\"><a class=\"markdownIt-Anchor\" href=\"#11-作用域\">#</a> 1.1、作用域</h3>\n<h4 id=\"111-作用域是什么\"><a class=\"markdownIt-Anchor\" href=\"#111-作用域是什么\">#</a> 1.1.1、作用域是什么</h4>\n<p>作用域本质就是程序源代码中定义变量的区域，它可以解释为一套规则，是关于 JS 引擎如何寻找变量以及会在何处找到变量的规则。</p>\n<h4 id=\"112-作用域分为哪些\"><a class=\"markdownIt-Anchor\" href=\"#112-作用域分为哪些\">#</a> 1.1.2、作用域分为哪些</h4>\n<ul>\n<li>词法作用域（静态作用域）\n<ul>\n<li>词法作用域是在写代码时就确定了作用域（不使用 eval 和 with 的前提下，这两个现在基本不使用，因此不讲了），即静态作用域</li>\n</ul>\n</li>\n<li>动态作用域\n<ul>\n<li>而动态作用域是在代码运行时动态确定的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-作用域链\"><a class=\"markdownIt-Anchor\" href=\"#12-作用域链\">#</a> 1.2、作用域链</h3>\n<h4 id=\"121-作用域链是什么\"><a class=\"markdownIt-Anchor\" href=\"#121-作用域链是什么\">#</a> 1.2.1、作用域链是什么</h4>\n<p>作用域链实际上是指向变量对象的指针列表，它只引用但不实际包含变量对象，它的用途是保证对执行环境有权访问的所有变量和函数的有序访问。</p>\n<p>简单来说：作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是作用域链。</p>\n<h5 id=\"两个重要概念\"><a class=\"markdownIt-Anchor\" href=\"#两个重要概念\">#</a> 两个重要概念：</h5>\n<ul>\n<li>\n<p>变量对象</p>\n<p>每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中（变量对象其实就是作用域这个抽象概念的具体值），比如一个函数中包含的局部变量，它的参数，它里面声明的函数都存在变量对象中。（一个当前执行函数的变量对象最开始时就包含一个 arguments 对象，这个对象用来装函数括号内的参数，所以全局环境的变量对象没有这个）</p>\n</li>\n<li>\n<p>执行环境</p>\n<p>也可以叫执行上下文，这里定义了变量或函数有权访问的其他数据，当一个函数被执行时，他的执行环境会被推入环境栈，执行之后才会被弹出，把控制权返回给之前的执行环境。</p>\n</li>\n</ul>\n<h2 id=\"二-闭包\"><a class=\"markdownIt-Anchor\" href=\"#二-闭包\">#</a> 二、闭包</h2>\n<h3 id=\"21-闭包是什么\"><a class=\"markdownIt-Anchor\" href=\"#21-闭包是什么\">#</a> 2.1、闭包是什么</h3>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包最常用的方式就是在一个函数内部创建另一个函数。</p>\n<h3 id=\"22-闭包的作用\"><a class=\"markdownIt-Anchor\" href=\"#22-闭包的作用\">#</a> 2.2、闭包的作用</h3>\n<ol>\n<li>\n<p>能够访问函数定义时所在的词法作用域 (阻止其被回收)。</p>\n</li>\n<li>\n<p>私有化变量</p>\n</li>\n<li>\n<p>模拟块级作用域</p>\n</li>\n<li>\n<p>创建模块</p>\n<ul>\n<li>两个必备的条件 (来自《你不知道的 JavaScript》)\n<ul>\n<li>必须有外部的封闭函数，该函数必须至少被调用一次 (每次调用都会创建一个新的模块实例)</li>\n<li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">coolModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Yvette\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">sayAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    sayName<span class=\"token punctuation\">,</span>\n    sayAge<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> info <span class=\"token operator\">=</span> <span class=\"token function\">coolModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninfo<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'Yvette'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"23-闭包的缺点\"><a class=\"markdownIt-Anchor\" href=\"#23-闭包的缺点\">#</a> 2.3、闭包的缺点</h3>\n<p>闭包会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏</p>\n<p>2.4、经典题目（闭包）</p>\n<blockquote>\n<p>函数自增</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "面试全面总结",
                "JS 三座大山"
            ]
        },
        {
            "id": "http://example.com/2020/03/23/getOfferPrototypesandprototypechains/",
            "url": "http://example.com/2020/03/23/getOfferPrototypesandprototypechains/",
            "title": "原型和原型链",
            "date_published": "2020-03-23T09:18:21.000Z",
            "content_html": "<h2 id=\"javascript-原型和原型链\"><a class=\"markdownIt-Anchor\" href=\"#javascript-原型和原型链\">#</a> JavaScript 原型和原型链</h2>\n<blockquote>\n<p>拿到 字节跳动实习生 offer 总结</p>\n<p>回馈分享一波自己的知识点总结</p>\n</blockquote>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【原型和原型链】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h2 id=\"一-原型和原型定义\"><a class=\"markdownIt-Anchor\" href=\"#一-原型和原型定义\">#</a> 一、原型和原型定义</h2>\n<h3 id=\"11-背景\"><a class=\"markdownIt-Anchor\" href=\"#11-背景\">#</a> 1.1、背景</h3>\n<p>JavaScript 中除了基础类型外的数据类型，都是对象（引用类型）。但是由于其没有 类（class，ES6 引入了 class，但其只是语法糖）的概念，如何将所有对象联系起来就成立一个问题，于是就有了原型和原型链的概念。</p>\n<h3 id=\"12-原型是什么\"><a class=\"markdownIt-Anchor\" href=\"#12-原型是什么\">#</a> 1.2、原型是什么？</h3>\n<blockquote>\n<p>原型是一个 prototype 对象，用于表示对象之间的关系。</p>\n</blockquote>\n<h3 id=\"13-原型链\"><a class=\"markdownIt-Anchor\" href=\"#13-原型链\">#</a> 1.3、原型链</h3>\n<p>每个实例对象（ object ）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（prototype ）。该原型对象也有一个自己的原型对象 ( <strong>proto</strong> ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。以上一整个原型与原型层层相链接的过程即为原型链</p>\n<h3 id=\"14-公式\"><a class=\"markdownIt-Anchor\" href=\"#14-公式\">#</a> 1.4、公式</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> 对象 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">函数</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n对象<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">对象的构造函数</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"二-7-大继承写法\"><a class=\"markdownIt-Anchor\" href=\"#二-7-大继承写法\">#</a> 二、7 大继承写法</h2>\n<blockquote>\n<p>常考点【熟练掌握】</p>\n</blockquote>\n<h3 id=\"21-原型链继承\"><a class=\"markdownIt-Anchor\" href=\"#21-原型链继承\">#</a> 2.1、原型链继承</h3>\n<ul>\n<li>\n<p>原型链继承的基本思想：是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p>\n<p>如 SubType.prototype = new SuperType ();</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Yvette\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">SubType</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>通过原型来实现继承时，原型会变成另一个类型的实例，原先的实例属性变成了现在的原型属性，该原型的引用类型属性会被所有的实例共享</li>\n<li>在创建子类型的实例时，不能向超类型的构造函数中传递参数</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"22-借用构造函数\"><a class=\"markdownIt-Anchor\" href=\"#22-借用构造函数\">#</a> 2.2、借用构造函数</h3>\n<ul>\n<li>\n<p>其基本思想为：在子类型的构造函数中调用超类型构造函数。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">SuperType</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>可以向超类传递参数</li>\n<li>解决了原型中包含引用类型值被所有实例共享的问题</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>方法都在构造函数中定义，函数复用无从谈起</li>\n<li>另外超类型原型中定义的方法对于子类型而言都是不可见的</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"23-组合继承\"><a class=\"markdownIt-Anchor\" href=\"#23-组合继承\">#</a> 2.3、组合继承</h3>\n<ul>\n<li>\n<p>组合继承指的是将原型链和借用构造函数技术组合到一块，从而发挥二者之长的一种继承模式。基本思路：使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承，既通过在原型上定义方法来实现了函数复用，又保证了每个实例都有自己的属性。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zc\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pink\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">SuperType</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">SubType</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SubType</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> SubType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[ 'pink', 'blue', 'green', 'red' ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[ 'pink', 'blue', 'green' ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>可以向超类传递参数</li>\n<li>每个实例都有自己的属性</li>\n<li>实现了函数复用</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>无论什么情况下，都会调用两次超类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"24-原型式继承\"><a class=\"markdownIt-Anchor\" href=\"#24-原型式继承\">#</a> 2.4、原型式继承</h3>\n<ul>\n<li>\n<p>原型式继承继承的基本思想：在 object () 函数内部，先创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例，从本质上讲，object () 对传入的对象执行了一次浅拷贝。</p>\n<p>ECMAScript5 通过新增 Object.create () 方法规范了原型式继承。这个方法接收两个参数：一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象 (可以覆盖原型对象上的同名属性)，在传入一个参数的情况下，Object.create () 和 object () 方法的行为相同。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>同原型链实现继承一样，包含引用类型值的属性会被所有实例共享</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"25-寄生式继承\"><a class=\"markdownIt-Anchor\" href=\"#25-寄生式继承\">#</a> 2.5、寄生式继承</h3>\n<ul>\n<li>\n<p>寄生式继承是与原型式继承紧密相关的一种思路。寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部已某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAnother</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//通过调用函数创建一个新对象</span>\n  clone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//以某种方式增强这个对象</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回这个对象</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>基于 person 返回了一个新对象 -—— person2，新对象不仅具有 person 的所有属性和方法，而且还有自己的 sayHi () 方法。在考虑对象而不是自定义类型和构造函数的情况下，寄生式继承也是一种有用的模式。</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>使用寄生式继承来为对象添加函数，会由于不能做到函数复用而效率低下。</li>\n<li>同原型链实现继承一样，包含引用类型值的属性会被所有实例共享。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"26-寄生组合式继承\"><a class=\"markdownIt-Anchor\" href=\"#26-寄生组合式继承\">#</a> 2.6、寄生组合式继承</h3>\n<ul>\n<li>\n<p>所谓寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法，基本思路：</p>\n<p>不必为了指定子类型的原型而调用超类型的构造函数，我们需要的仅是超类型原型的一个副本，本质上就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subType<span class=\"token punctuation\">,</span> superType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> prototype <span class=\"token operator\">=</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span>superType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建对象</span>\n  prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> subType<span class=\"token punctuation\">;</span> <span class=\"token comment\">//增强对象</span>\n  subType<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指定对象</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pink\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SuberType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">SuperType</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>SuberType<span class=\"token punctuation\">,</span> SuperType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>步骤</p>\n<p>第一步：创建超类型原型的一个副本</p>\n<p>第二步：为创建的副本添加 constructor 属性</p>\n<p>第三步：将新创建的对象赋值给子类型的原型</p>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>只调用了一次超类构造函数，效率更高。避免在 SuberType.prototype 上面创建不必要的、多余的属性，与其同时，原型链还能保持不变。因此寄生组合继承是引用类型最理性的继承范式。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"27-es6-继承\"><a class=\"markdownIt-Anchor\" href=\"#27-es6-继承\">#</a> 2.7、ES6 继承</h3>\n<ul>\n<li>\n<p>Class 可以通过 extends 关键字实现继承</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperType</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubType</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperType</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类的constructor(x, y)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>对于 ES6 的 class 需要做以下几点说明</p>\n<ol>\n<li>class 声明会提升，但不会初始化赋值。Foo 进入暂时性死区，类似于 let、const 声明变量。</li>\n<li>class 声明内部会启用严格模式。</li>\n<li>class 的所有方法（包括静态方法和实例方法）都是不可枚举的。</li>\n<li>class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有 [[construct]]，不能使用 new 来调用。</li>\n<li>必须使用 new 调用 class</li>\n<li>class 内部无法重写类名</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"使用-extends-关键字实现继承有几点需要特别说明\"><a class=\"markdownIt-Anchor\" href=\"#使用-extends-关键字实现继承有几点需要特别说明\">#</a> 使用 extends 关键字实现继承，有几点需要特别说明</h4>\n<ul>\n<li>子类必须在 constructor 中调用 super 方法，否则新建实例时会报错。如果没有子类没有定义 constructor 方法，那么这个方法会被默认添加。在子类的构造函数中，只有调用 super 之后，才能使用 this 关键字，否则报错。这是因为子类实例的构建，基于父类实例，只有 super 方法才能调用父类实例。</li>\n<li>ES5 的继承，实质是先创造子类的实例对象 this，然后再将父类的方法添加到 this 上面（Parent.apply (this)）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到 this 上面（所以必须先调用 super 方法），然后再用子类的构造函数修改 this</li>\n</ul>\n<h2 id=\"三-相关题目\"><a class=\"markdownIt-Anchor\" href=\"#三-相关题目\">#</a> 三、相关题目</h2>\n<h3 id=\"31-写一个原型链继承的例子\"><a class=\"markdownIt-Anchor\" href=\"#31-写一个原型链继承的例子\">#</a> 3.1、写一个原型链继承的例子</h3>\n<ul>\n<li>详细请观看上文。</li>\n</ul>\n<h3 id=\"32-描述-new-一个对象的过程\"><a class=\"markdownIt-Anchor\" href=\"#32-描述-new-一个对象的过程\">#</a> 3.2、描述 new 一个对象的过程</h3>\n<h4 id=\"321-思路分析\"><a class=\"markdownIt-Anchor\" href=\"#321-思路分析\">#</a> 3.2.1、思路分析</h4>\n<ol>\n<li>创建一个新对象 obj</li>\n<li>把 obj 的<strong> proto</strong> 指向 构造函数.prototype 实现继承</li>\n<li>执行构造函数，传递参数，改变 this 指向</li>\n<li>最后把 obj 返回</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">伪代码：<span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\tobj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果无返回值或者返回一个非对象值，则将obj返回作为新对象</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"322-优秀的写法\"><a class=\"markdownIt-Anchor\" href=\"#322-优秀的写法\">#</a> 3.2.2、优秀的写法</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">_new</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ret <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">?</span> ret <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>或</strong> 【个人倾向于后面一种】</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">_new</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ret <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">?</span> ret <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"323-为什么-return-ret-instanceof-object-ret-obj-需要存在这一步骤\"><a class=\"markdownIt-Anchor\" href=\"#323-为什么-return-ret-instanceof-object-ret-obj-需要存在这一步骤\">#</a> 3.2.3、为什么  <code>return ret instanceof Object ? ret : obj;</code>  需要存在这一步骤？</h4>\n<blockquote>\n<p>这是因为 new 一个实例的时候，如果没有 return，</p>\n<p>就会根据构造函数内部 this 绑定的值生成对象，如果有返回值，</p>\n<p>就会根据返回值生成对象，为了模拟这一效果，就需要判断 apply 后是否有返回值。</p>\n</blockquote>\n<h4 id=\"324-总结-new-的过程中发生了什么\"><a class=\"markdownIt-Anchor\" href=\"#324-总结-new-的过程中发生了什么\">#</a> 3.2.4、总结 new 的过程中发生了什么</h4>\n<ol>\n<li>\n<p>令 john 的<strong> proto</strong> 属性指向 Person.prototype，确立了这条原型链， 导致 john 能通过原型链继承 Person.prototype 中的部分属性，可以简单地视 john 和 Person.prototype 是继承关系。</p>\n</li>\n<li>\n<p>john 是 Person 构造函数 的实例 john instanceof Person; //true</p>\n</li>\n<li>\n<p>我们再来了解一下 instanceof 的内部原理，以应证我们的图是正确的</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token constant\">L</span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">R</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">L</span> <span class=\"token operator\">===</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n",
            "tags": [
                "面试全面总结",
                "JS 三座大山"
            ]
        },
        {
            "id": "http://example.com/2020/03/23/getOfferSinglethreadedandasynchronous/",
            "url": "http://example.com/2020/03/23/getOfferSinglethreadedandasynchronous/",
            "title": "单线程和异步",
            "date_published": "2020-03-23T09:18:21.000Z",
            "content_html": "<h2 id=\"专题总结单线程和异步\"><a class=\"markdownIt-Anchor\" href=\"#专题总结单线程和异步\">#</a> 专题总结：单线程和异步</h2>\n<blockquote>\n<p>拿到 字节跳动实习生 offer 总结</p>\n<p>回馈分享一波自己的知识点总结</p>\n</blockquote>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【单线程和异步】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h2 id=\"一-单线程和异步\"><a class=\"markdownIt-Anchor\" href=\"#一-单线程和异步\">#</a> 一、单线程和异步</h2>\n<h3 id=\"11-同步-vs-异步\"><a class=\"markdownIt-Anchor\" href=\"#11-同步-vs-异步\">#</a> 1.1、同步 vs 异步</h3>\n<ul>\n<li>同步是什么？\n<ul>\n<li>简单来说：一定要等任务执行完了，得到结果，才执行下一个任务。</li>\n<li>指某段程序执行时会阻塞其它程序执行，其表现形式为程序的执行顺序依赖程序本身的书写顺序</li>\n</ul>\n</li>\n<li>异步是什么？\n<ul>\n<li>指某段程序执行时不会阻塞其它程序执行，其表现形式为程序的执行顺序不依赖程序本身的书写顺序</li>\n<li>实现方式：event loop【事件轮询】</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-异步和单线程\"><a class=\"markdownIt-Anchor\" href=\"#12-异步和单线程\">#</a> 1.2、异步和单线程</h3>\n<ul>\n<li>\n<p>单线程</p>\n<ul>\n<li>是什么？单线程就是同时只做一件事，两段 JS 不能同时 执行</li>\n<li>为什么是单线程？\n<ul>\n<li>避免 DOM 渲染的冲突\n<ol>\n<li>浏览器需要渲染 DOM</li>\n<li>JS 可以修改 DOM 结构</li>\n<li>JS 执行的时候，浏览器 DOM 渲染会暂停</li>\n<li>两段 JS 也不能同时执行（都修改 DOM 就冲突了）</li>\n<li>webworker 支持多线程，但是不能访问 DOM</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>单线程的解决方案 ？</p>\n<ul>\n<li>异步\n<ul>\n<li>异步暴露出的问题\n<ol>\n<li>没按照书写方式执行，可读性差</li>\n<li>callback 中不容易模块化</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>event loop</p>\n<ul>\n<li>是什么？</li>\n<li>事件轮询， JS 实现异步 的具体解决方案</li>\n<li>具体\n<ul>\n<li>同步代码，直接执行</li>\n<li>异步函数先放在 异步队列 中</li>\n<li>待同步函数执行完毕，轮询执行 异步队列 的函数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"13-宏队列和微队列\"><a class=\"markdownIt-Anchor\" href=\"#13-宏队列和微队列\">#</a> 1.3、宏队列和微队列</h3>\n<blockquote>\n<p><code>macrotask</code> （宏任务） 和  <code>microtask</code> （微任务）</p>\n<p>面试常考题【promise 回调函数和定时器任务的顺序问题】</p>\n</blockquote>\n<ul>\n<li>\n<p>宏任务：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">script</span><span class=\"token punctuation\">(</span>整体代码<span class=\"token punctuation\">)</span>\nsetTimeout\nsetInterval\n<span class=\"token constant\">I</span><span class=\"token operator\">/</span><span class=\"token constant\">O</span>\n<span class=\"token constant\">UI</span>交互事件\npostMessage\nMessageChannel\n<span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">.</span>js 环境<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>微任务</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span>then\nObject<span class=\"token punctuation\">.</span>observe\nMutaionObserver\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">.</span>js 环境<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<p>执行机制：</p>\n<ol>\n<li>执行一个宏任务（栈中没有就从事件队列中获取）</li>\n<li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>\n<li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>\n<li>当前宏任务执行完毕，开始检查渲染，然后 GUI 线程接管渲染</li>\n<li>渲染完毕后，JS 引擎线程继续，开始下一个宏任务（从宏任务队列中获取）</li>\n</ol>\n<h4 id=\"经典面试题\"><a class=\"markdownIt-Anchor\" href=\"#经典面试题\">#</a> 经典面试题</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"promise1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"promise1 end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"promise2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settimeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"async1 start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"async1 end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"async2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出顺序：script start->async1 start->async2->script end->async1 end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"14-前端异步的场景\"><a class=\"markdownIt-Anchor\" href=\"#14-前端异步的场景\">#</a> 1.4、前端异步的场景</h3>\n<ul>\n<li>简单来说：所有的 “等待情况” 都需要异步</li>\n<li>定时任务：setTimeout，setInterval</li>\n<li>网络请求：ajax 请求，动态 &lt;<em>img</em> &gt; 加载</li>\n<li>事件绑定</li>\n</ul>\n<h3 id=\"15-web-worker\"><a class=\"markdownIt-Anchor\" href=\"#15-web-worker\">#</a> 1.5、Web Worker</h3>\n<blockquote>\n<p>就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p>\n</blockquote>\n<h3 id=\"16-模块化发展历程\"><a class=\"markdownIt-Anchor\" href=\"#16-模块化发展历程\">#</a> 1.6、模块化发展历程</h3>\n<blockquote>\n<p>可从 IIFE、AMD、CMD、CommonJS、UMD、webpack (require.ensure)、ES Module、&lt;<em>script type=“module”</em> &gt; 这几个角度考虑。</p>\n<p><strong>作用</strong> ：模块化主要是用来抽离公共代码，隔离作用域，避免变量冲突等。</p>\n</blockquote>\n<ol>\n<li>\n<p>IIFE</p>\n<ul>\n<li>\n<p>使用自执行函数来编写模块化</p>\n</li>\n<li>\n<p>特点：</p>\n<p>在一个单独的函数作用域中执行代码，避免变量冲突。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>AMD</p>\n<ul>\n<li>\n<p>使用 requireJS 来编写模块化</p>\n</li>\n<li>\n<p>特点：依赖必须提前声明好</p>\n</li>\n<li>\n<p>简单实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// code 就是index.js 返回的内容</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>CMD</p>\n<ul>\n<li>\n<p>使用 seaJS 来编写模块化</p>\n</li>\n<li>\n<p>特点：支持动态引入依赖文件</p>\n</li>\n<li>\n<p>简单实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> indexCode <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>CommonJS</p>\n<ul>\n<li>nodejs 中自带的模块化</li>\n<li>var fs = require(‘fs’);</li>\n</ul>\n</li>\n<li>\n<p>UMD</p>\n<ul>\n<li>兼容 AMD，CommonJS 模块化语法</li>\n</ul>\n</li>\n<li>\n<p>webpack(require.ensure)</p>\n<ul>\n<li>webpack 2.x 版本中的代码分割</li>\n</ul>\n</li>\n<li>\n<p>ES Modules</p>\n<ul>\n<li>ES6 引入的模块化，支持 import 来引入另一个 js</li>\n<li>import a from ‘a’;</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"161-amd-与-cmd-的比较\"><a class=\"markdownIt-Anchor\" href=\"#161-amd-与-cmd-的比较\">#</a> 1.6.1、AMD 与 CMD 的比较</h4>\n<ul>\n<li>\n<p>定义</p>\n<p>AMD 和 CMD 都是用于浏览器端的模块规范</p>\n</li>\n<li>\n<p>AMD</p>\n<ul>\n<li>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出</li>\n<li>其主要内容就是定义了 define 函数该如何书写，只要你按照这个规范书写模块和依赖，require.js 就能正确的进行解析。</li>\n</ul>\n</li>\n<li>\n<p>CMD</p>\n<ul>\n<li>CMD 其实就是 SeaJS 在推广过程中对模块定义的规范化产出</li>\n<li>主要内容就是描述该如何定义模块，如何引入模块，如何导出模块，只要你按照这个规范书写代码，sea.js 就能正确的进行解析</li>\n</ul>\n</li>\n<li>\n<p>AMD 与 CMD 的区别</p>\n<ol>\n<li>AMD 推崇依赖前置，CMD 推崇依赖就近</li>\n<li>AMD 是提前执行，CMD 是延迟执行。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"162-commonjs-与-amd-的比较\"><a class=\"markdownIt-Anchor\" href=\"#162-commonjs-与-amd-的比较\">#</a> 1.6.2、CommonJS 与 AMD 的比较</h4>\n<blockquote>\n<p>在服务器端比如 node，采用的则是 CommonJS 规范。</p>\n<p>AMD 和 CMD 都是用于浏览器端的模块规范</p>\n</blockquote>\n<ol>\n<li>\n<p>CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</p>\n</li>\n<li>\n<p>AMD 规范则是非同步加载模块，允许指定回调函数。</p>\n<p>由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。</p>\n</li>\n<li>\n<p>但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用 AMD 规范。</p>\n</li>\n</ol>\n<h4 id=\"163-es6-与-commonjs-的比较\"><a class=\"markdownIt-Anchor\" href=\"#163-es6-与-commonjs-的比较\">#</a> 16.3、ES6 与 CommonJS 的比较</h4>\n<blockquote>\n<p>注意！浏览器加载 ES6 模块，也使用 &lt;<em>script</em> &gt; 标签，但是要加入 type=“module” 属性。</p>\n</blockquote>\n<ol>\n<li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li>\n<li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</li>\n</ol>\n<h3 id=\"17-async-和-defer\"><a class=\"markdownIt-Anchor\" href=\"#17-async-和-defer\">#</a> 1.7、async 和 defer</h3>\n<ul>\n<li>\n<p>共同点</p>\n<p>两者都会并行下载，不会影响页面的解析。</p>\n</li>\n<li>\n<p>defer：defer 会按照顺序在 DOMContentLoaded 前按照页面出现顺序依次执行。</p>\n</li>\n<li>\n<p>async ：async 则是下载完立即执行</p>\n</li>\n<li>\n<p>具体解析【剖析】</p>\n<ul>\n<li>\n<p>先来看一个普通的 script 标签。&lt;<em>script src=“a.js”&gt;&lt;/script</em> &gt;</p>\n<ul>\n<li>\n<p>浏览器会做如下处理：</p>\n<p>1、停止解析 document.</p>\n<p>2、请求 a.js</p>\n<p>3、执行 a.js 中的脚本</p>\n<p>4、继续解析 document</p>\n</li>\n</ul>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"d.js\"</span> defer<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"e.js\"</span> defer<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">6</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>不阻止解析 document<span class=\"token punctuation\">,</span> 并行下载 b<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>js</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>当脚本下载完后立即执行。（两者执行顺序不确定，执行阶段不确定，可能在 DOMContentLoaded 事件前或者后 ）</pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"async-和-defer-总结\"><a class=\"markdownIt-Anchor\" href=\"#async-和-defer-总结\">#</a> async 和 defer 总结</h4>\n<ul>\n<li>\n<p>两者都不会阻止 document 的解析</p>\n</li>\n<li>\n<p>defer 会在 DOMContentLoaded 前依次执行 （可以利用这两点哦！）</p>\n</li>\n<li>\n<p>async 则是下载完立即执行，不一定是在 DOMContentLoaded 前</p>\n</li>\n<li>\n<p>async 因为顺序无关，所以很适合像 Google Analytics 这样的无依赖脚本</p>\n</li>\n</ul>\n<h3 id=\"18-异步编程-6-种解决方案\"><a class=\"markdownIt-Anchor\" href=\"#18-异步编程-6-种解决方案\">#</a> 1.8、异步编程 6 种解决方案</h3>\n<ol>\n<li>\n<p>回调函数（Callback）</p>\n<ul>\n<li>\n<p>回调函数是异步操作最基本的方法</p>\n</li>\n<li>\n<p>ajax(url, () =&gt; {</p>\n<p>​ // 处理逻辑</p>\n<p>})</p>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>容易写出回调地狱（Callback hell）</li>\n<li>不能使用 try catch 捕获错误，不能直接 return</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>事件监听</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">f1<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>发布订阅</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">jQuery<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>Promise</p>\n<ul>\n<li>\n<p>是什么？</p>\n<ul>\n<li>promise 是目前 JS 异步编程的主流解决方案，遵循 Promises/A+ 方案。Promise 用于异步操作，表示一个还未完成但是预期会完成的操作。</li>\n<li>Promise 是 ES6 引入的一个新的对象，他的主要作用是用来解决 JS 异步机制里，回调机制产生的 “回调地狱”。它并不是什么突破性的 API，只是封装了异步回调形式，使得异步回调可以写的更加优雅，可读性更高，而且可以链式调用。</li>\n</ul>\n</li>\n<li>\n<p>剖析</p>\n<ul>\n<li>\n<p>promise 本身相当于一个状态机，拥有三种状态</p>\n<ul>\n<li>pending</li>\n<li>fulfilled</li>\n<li>rejected</li>\n</ul>\n<p>一个 promise 对象初始化时的状态是 pending，调用了 resolve 后会将 promise 的状态扭转为 fulfilled，调用 reject 后会将 promise 的状态扭转为 rejected，这两种扭转一旦发生便不能再扭转该 promise 到其他状态。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Promise 如何使用</p>\n<p>构造一个 promise 对象，并将要执行的异步函数传入到 promise 的参数中执行，并且在异步执行结束后调用 resolve ( ) 函数，就可以在 promise 的 then 方法中获取到异步函数的执行结果</p>\n</li>\n<li>\n<p>Promise 原型上的方法</p>\n<ol>\n<li>Promise.prototype.then(onFulfilled, onRejected)</li>\n<li>Promise.prototype.catch(onRejected)</li>\n<li>Promise.prototype.finally(onFinally)</li>\n</ol>\n</li>\n<li>\n<p>Promise 静态方法</p>\n<ol>\n<li>\n<p>Promise.all()</p>\n<p>Promise.all 接收一个 promise 对象数组作为参数，只有全部的 promise 都已经变为 fulfilled 状态后才会继续后面的处理</p>\n</li>\n<li>\n<p>Promise.race()</p>\n<p>这个函数会在 promises 中第一个 promise 的状态扭转后就开始后面的处理（fulfilled、rejected 均可）</p>\n</li>\n<li>\n<p>Promise.resolve()</p>\n</li>\n<li>\n<p>Promise.reject()</p>\n</li>\n</ol>\n</li>\n<li>\n<p>优点</p>\n<p>将异步操作以同步操作的流程表达出来，promise 链式调用，更好地解决了层层嵌套的回调地狱</p>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>不能取消执行。</li>\n<li>无法获取当前执行的进度信息（比如，要在用户界面展示进度条）。</li>\n<li>外部无法捕捉 Promise 内部抛出的错误</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>generator 函数</p>\n<ul>\n<li>\n<p>是什么</p>\n<ul>\n<li>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。</li>\n<li>如果说 JavaScript 是 ECMAScript 标准的一种具体实现、Iterator 遍历器是 Iterator 的具体实现，那么 Generator 函数可以说是 Iterator 接口的具体实现方式。</li>\n<li>Generator 函数可以通过配合 Thunk 函数更轻松更优雅的实现异步编程和控制流管理</li>\n</ul>\n</li>\n<li>\n<p>描述</p>\n<ul>\n<li>执行 Generator 函数会返回一个遍历器对象，每一次 Generator 函数里面的 yield 都相当一次遍历器对象的 next () 方法，并且可以通过 next (value) 方法传入自定义的 value, 来改变 Generator 函数的行为。</li>\n</ul>\n</li>\n<li>\n<p>能封装异步任务的根本原因</p>\n<ul>\n<li>最大特点就是可以交出函数的执行权（即暂停执行）。Generator 函数可以暂停执行和恢复执行</li>\n</ul>\n</li>\n<li>\n<p>两个特征</p>\n<ul>\n<li>function 关键字与函数名之间有一个星号</li>\n<li>函数体内部使用 yield 表达式，定义不同的内部状态（yield 在英语里的意思就是 “产出”）。</li>\n</ul>\n</li>\n<li>\n<p>过程</p>\n<p>Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）</p>\n</li>\n<li>\n<p>Generator 及其异步方面的应用</p>\n<ul>\n<li>Generator 函数将 JavaScript 异步编程带入了一个全新的阶段</li>\n</ul>\n</li>\n<li>\n<p>总结</p>\n<p>调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的 next 方法，就会返回一个有着 value 和 done 两个属性的对象。value 属性表示当前的内部状态的值，是 yield 表达式后面那个表达式的值；done 属性是一个布尔值，表示是否遍历结束。</p>\n</li>\n<li>\n<p>demo</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fetch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node-fetch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.github.com/users/github\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>bio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>async 和 await</p>\n<ul>\n<li>\n<p>含义</p>\n<p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p>\n</li>\n<li>\n<p>是什么？</p>\n<ul>\n<li>一句话，它就是 Generator 函数的语法糖。</li>\n<li>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。</li>\n<li>async 函数可以理解为内置自动执行器的 Generator 函数语法糖，它配合 ES6 的 Promise 近乎完美的实现了异步编程解决方案。</li>\n</ul>\n</li>\n<li>\n<p>相对于 Promise，优势体现在</p>\n<ol>\n<li>处理 then 的调用链，能够更清晰准确的写出代码</li>\n<li>并且也能优雅地解决回调地狱问题</li>\n</ol>\n</li>\n<li>\n<p>相对 Generator 函数，体现在以下 4 点</p>\n<ol>\n<li>内置执行器。 Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行</li>\n<li>更好的语义。 async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果</li>\n<li>更广的适用性。 co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）</li>\n<li>返回值是 Promise。async 函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用 then 方法指定下一步的操作。</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<p>当然 async/await 函数也存在一些缺点，因为 await 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 await 会导致性能上的降低，代码没有依赖性的话，完全可以使用 Promise.all 的方式。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h4>\n<ol>\n<li>JS 异步编程进化史：callback -&gt; promise -&gt; generator -&gt; async + await</li>\n<li>async/await 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里</li>\n<li>async/await 可以说是异步终极解决方案了</li>\n</ol>\n<h2 id=\"二-相关面试问题\"><a class=\"markdownIt-Anchor\" href=\"#二-相关面试问题\">#</a> 二、相关面试问题</h2>\n<ol>\n<li>\n<p>什么是单线程，和异步有什么关系？</p>\n<ul>\n<li>单线程就是同时只做一件事，两段 JS 不能同时 执行</li>\n<li>原因就是 为了避免 DOM 渲染的冲突</li>\n<li>异步是一种 “无奈” 的解决方案，虽然有很多问题</li>\n</ul>\n</li>\n<li>\n<p>是否用过 jQuery 的 Deferred</p>\n<ul>\n<li>\n<p>步骤</p>\n<p>可以 jQuery 1.5 对 ajax 的改变举例</p>\n<p>说明如何简单的封装，使用 Deferred</p>\n<p>说明 ES6 promise 和 Deferred 的区别</p>\n</li>\n<li>\n<p>jQuery 1.5 的变化</p>\n<ul>\n<li>\n<p>无法改变 JS 异步和单线程的本质</p>\n</li>\n<li>\n<p>只能从写法上杜绝 callback 这种形式</p>\n</li>\n<li>\n<p>它是一种语法糖形式，但是解耦了代码</p>\n</li>\n<li>\n<p>很好的体现：开放封闭原则</p>\n</li>\n<li>\n<p>ajax 为例</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ajax <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\najax\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ajax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回一个 deferred 对象</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>使用 jQuery Deferred</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">waitHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> dtd <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">Deferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建一个 Deferred 对象</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">wait</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dtd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//要求传入一个 Deferred 对象</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">task</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      dtd<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//表示异步任务已经完成</span>\n      <span class=\"token comment\">// dtd.reject()  //表示异步任务失败或出错</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dtd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要求返回 Deferred 对象</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 注意，这里一定要有返回值</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>dtd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "面试全面总结",
                "JS 三座大山"
            ]
        },
        {
            "id": "http://example.com/2019/08/14/asynchronization/",
            "url": "http://example.com/2019/08/14/asynchronization/",
            "title": "异步",
            "date_published": "2019-08-14T07:30:31.000Z",
            "content_html": "<h1 id=\"异步\"><a class=\"markdownIt-Anchor\" href=\"#异步\">#</a> 异步</h1>\n<blockquote>\n<p>本章全面讲解了 JS 异步的知识点。先从<strong>原理开始</strong> ，讲解什么是 <strong>单线程</strong>、什么是 <strong>event loop</strong> ；然后讲解 jQuery 中解决 <strong>异步的 Deferred</strong> 以及 jQuery 初次展示出来的 <strong>Promise 的用法</strong>；最后再讲解 ES6 中 <strong>Promise 的用法和标准</strong> 。</p>\n<p><strong>基础篇请看</strong> ：<a href=\"http://zxinc520.com/lcj/%225d2eeda9d797f0309cf6ab02%22\">异步和单线程</a></p>\n</blockquote>\n<h2 id=\"异步-2\"><a class=\"markdownIt-Anchor\" href=\"#异步-2\">#</a> 异步</h2>\n<blockquote>\n<p>高级面试</p>\n</blockquote>\n<ul>\n<li>《<a href=\"http://zxinc520.com/lcj/%225d2eeda9d797f0309cf6ab02%22\">前端 JS 面试技巧</a>》讲到异步的基础</li>\n<li>高级面试会问到更多的内容</li>\n<li>如 event-loop Promise Async/Await 等</li>\n</ul>\n<h3 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\">#</a> 问题</h3>\n<ul>\n<li>什么是单线程，和异步有什么关系？ <a href=\"http://zxinc520.com/lcj/%225d2eeda9d797f0309cf6ab02%22\">参考 </a></li>\n<li>什么是 event-loop？</li>\n<li>是否用过 jQuery 的 Deferred</li>\n<li>Promise 的基本使用和原理</li>\n<li>介绍一下 async/await（ES7）（和 Promise 的区别、联系）</li>\n<li>总结一下当前 JS 解决异步的方案</li>\n</ul>\n<h2 id=\"4-1-单线程和异步\"><a class=\"markdownIt-Anchor\" href=\"#4-1-单线程和异步\">#</a> 4-1 单线程和异步</h2>\n<blockquote>\n<p><a href=\"http://zxinc520.com/lcj/%225d2eeda9d797f0309cf6ab02%22\">单线程和异步基础篇 </a></p>\n</blockquote>\n<ul>\n<li>为什么是单线程？\n<ul>\n<li>原因 - 避免 DOM 渲染冲突\n<ul>\n<li>浏览器需要渲染 DOM</li>\n<li>JS 可以修改 DOM 结构</li>\n<li>JS 执行的时候，浏览器 DOM 渲染会暂停</li>\n<li>两段 JS 也不能同时执行 （ 都修改 DOM 就冲突了）</li>\n<li>webworker 支持多线程 ，但是不能 访问 DOM</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>单线程的解决方案</strong> ： <strong>异步</strong></p>\n<p><em>暴露出的问题</em> ：</p>\n<ul>\n<li>问题一：没按照书写方式执行，可读性差</li>\n<li>问题二：callback 中不容易模块化</li>\n</ul>\n<h3 id=\"问题解答\"><a class=\"markdownIt-Anchor\" href=\"#问题解答\">#</a> 问题解答</h3>\n<ul>\n<li>什么是单线程，和异步有什么关系？\n<ul>\n<li>单线程就是同时只做一件事，两段 JS 不能同时 执行</li>\n<li>原因就是 为了避免 DOM 渲染的冲突</li>\n<li>异步是一种 “无奈” 的解决方案，虽然有很多问题</li>\n</ul>\n</li>\n</ul>\n<p><strong>承上启下：</strong></p>\n<ul>\n<li>单线程 - 同时间只能做一件事</li>\n<li>原因 - 避免 DOM 渲染冲突</li>\n<li>解决方案 - 异步</li>\n<li>异步的实现方式 - event loop</li>\n</ul>\n<h2 id=\"4-2-什么是-event-loop\"><a class=\"markdownIt-Anchor\" href=\"#4-2-什么是-event-loop\">#</a> 4-2 什么是 event-loop</h2>\n<blockquote>\n<p>主线程从 &quot;任务队列&quot; 中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为 Event Loop（事件循环）。 <a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\">再谈 Event Loop</a></p>\n</blockquote>\n<h3 id=\"文字解释\"><a class=\"markdownIt-Anchor\" href=\"#文字解释\">#</a> 文字解释</h3>\n<blockquote>\n<p>event-loop</p>\n</blockquote>\n<ul>\n<li>事件轮询， JS 实现异步 的具体解决方案</li>\n<li>同步代码，直接执行</li>\n<li>异步函数先放在 异步队列 中</li>\n<li>待同步函数执行完毕，轮询执行 异步队列 的函数</li>\n</ul>\n<h3 id=\"实例分析\"><a class=\"markdownIt-Anchor\" href=\"#实例分析\">#</a> 实例分析</h3>\n<p><em>示例一：</em></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190813/mxsAJyrO4cLE.png?imageslim\" alt=\"mark\"></p>\n<p><em>示例二：</em></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190813/kftHfWYaHL80.png?imageslim\" alt=\"mark\"></p>\n<p><em>示例三：</em></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190813/j3lPm5VCfcSB.png?imageslim\" alt=\"mark\"></p>\n<p><strong>上图有 2 种结果</strong>：(a 是在 ajax 请求成功时放入异步队列，所以时间不确定)</p>\n<ol>\n<li>d -&gt; c -&gt; a -&gt; b</li>\n<li>d -&gt; c -&gt; b -&gt; a</li>\n</ol>\n<h3 id=\"问题解答-2\"><a class=\"markdownIt-Anchor\" href=\"#问题解答-2\">#</a> 问题解答</h3>\n<ul>\n<li>什么是 event-loop？\n<ul>\n<li>事件轮询， JS 实现异步 的具体解决方案</li>\n<li>什么是异步队列，何时被放入 异步队列</li>\n<li>轮询的过程</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-3-jquery-的-deferred\"><a class=\"markdownIt-Anchor\" href=\"#4-3-jquery-的-deferred\">#</a> 4-3 jQuery 的 Deferred</h2>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\">jQuery 的 deferred 对象详解</a></p>\n<p>jQuery 1.5.0 版本开始引入的一个新功能 ----<a href=\"http://api.jquery.com/category/deferred-object/\">deferred 对象</a>。</p>\n<p>针对的读者是那些已经具备 jQuery 使用经验的开发者。如果你想了解 jQuery 的基本用法，请阅读 <a href=\"http://www.ruanyifeng.com/\">阮一峰</a> 编写的<a href=\"http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html\">《jQuery 设计思想》</a>和<a href=\"http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html\">《jQuery 最佳实践》</a>。</p>\n</blockquote>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<ul>\n<li>jQuery 1.5 的变化</li>\n<li>使用 jQuery Deferred</li>\n<li>初步引入 Promise 概念</li>\n</ul>\n<p><strong>注意</strong> ：不要以为所有的网站 都是 vue 和 React 开发的</p>\n<h4 id=\"jquery-15-之前\"><a class=\"markdownIt-Anchor\" href=\"#jquery-15-之前\">#</a> jQuery 1.5 之前</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ajax <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">\"data.json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ajax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回一个 XHR 对象</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"jquery-15-之后\"><a class=\"markdownIt-Anchor\" href=\"#jquery-15-之后\">#</a> jQuery 1.5 之后</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ajax <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\najax\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ajax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回一个 deferred 对象</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"jquery-15-的变化\"><a class=\"markdownIt-Anchor\" href=\"#jquery-15-的变化\">#</a> jQuery 1.5 的变化</h4>\n<ul>\n<li>无法改变 JS 异步和单线程的本质</li>\n<li>只能从写法上杜绝 callback 这种形式</li>\n<li>它是一种语法糖形式，但是解耦了代码</li>\n<li>很好的体现：<strong>开放封闭原则</strong></li>\n</ul>\n<h3 id=\"使用-jquery-deferred\"><a class=\"markdownIt-Anchor\" href=\"#使用-jquery-deferred\">#</a> 使用 jQuery Deferred</h3>\n<blockquote>\n<p>使用 jQuery Deferred</p>\n<p>对比 说明</p>\n</blockquote>\n<p><em>未使用情况：</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 给出一段非常简单的异步操作代码，使用 setTimeout 函数</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">wait</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">task</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 新增需求：要在执行完成之后进行某些特别复杂的操作，代码可能会很多，而且分好几个步骤</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>使用 jQuery Deferred</em>：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">waitHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> dtd <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">Deferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建一个 Deferred 对象</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">wait</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dtd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//要求传入一个 Deferred 对象</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">task</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      dtd<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//表示异步任务已经完成</span>\n      <span class=\"token comment\">// dtd.reject()  //表示异步任务失败或出错</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dtd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要求返回 Deferred 对象</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 注意，这里一定要有返回值</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>dtd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//区别于promise，好像不能链式调用</span>\n<span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> <span class=\"token function\">waitHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nw<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nw<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 还有 w.done w.fail</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li>总结，dtd 的 API 可分成两类，用意不同</li>\n<li>第一类：dtd.resolve dtd.reject</li>\n<li>第二类：dtd.then dtd.done dtd.fail</li>\n<li>这两类应该分开，否则后果很严重</li>\n</ul>\n<h3 id=\"问题解答-3\"><a class=\"markdownIt-Anchor\" href=\"#问题解答-3\">#</a> 问题解答</h3>\n<ul>\n<li>\n<p>是否用过 jQuery 的 Deferred</p>\n<ul>\n<li>可以 jQuery 1.5 对 ajax 的改变举例</li>\n<li>说明如何简单的封装，使用 Deferred</li>\n<li>说明 ES6 promise 和 Deferred 的区别</li>\n</ul>\n</li>\n</ul>\n<p><strong>想要深入理解它，就需要知道它的前世今生。</strong></p>\n<h2 id=\"4-4-promise\"><a class=\"markdownIt-Anchor\" href=\"#4-4-promise\">#</a> 4-4 Promise</h2>\n<blockquote>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案 —— 回调函数和事件 —— 更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了 <code>Promise</code>  对象。</p>\n<p>所谓 <code>Promise</code> ，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/promise\">ECMAScript 6 Promise 对象</a></p>\n<p><strong>基础语法</strong> 请参考我的另一篇博客： <a href=\"http://zxinc520.com/lcj/%225cbb3bf05733fa0a66088c80%22\">Promise 详细分析</a></p>\n</blockquote>\n<p><code>Promise</code> <strong> 对象有以下两个特点</strong>。</p>\n<ol>\n<li>对象的状态不受外界影响。 <code>Promise</code>  对象代表一个异步操作，有三种状态： <code>pending</code> （进行中）、 <code>fulfilled</code> （已成功）和 <code>rejected</code> （已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 <code>Promise</code>  这个名字的由来，它的英语意思就是 “承诺”，表示其他手段无法改变。</li>\n<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。 <code>Promise</code>  对象的状态改变，只有两种可能：从 <code>pending</code>  变为 <code>fulfilled</code>  和从 <code>pending</code>  变为 <code>rejected</code> 。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对 <code>Promise</code>  对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</li>\n</ol>\n<p>注意，为了行文方便，本章后面的 <code>resolved</code>  统一只指 <code>fulfilled</code>  状态，不包含 <code>rejected</code>  状态。</p>\n<p>有了 <code>Promise</code>  对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外， <code>Promise</code>  对象提供统一的接口，使得控制异步操作更加容易。</p>\n<p><code>Promise</code>  也有一些缺点。首先，无法取消 <code>Promise</code> ，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数， <code>Promise</code>  内部抛出的错误，不会反应到外部。第三，当处于 <code>pending</code>  状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>\n<p>如果某些事件不断地反复发生，一般来说，使用 <a href=\"https://nodejs.org/api/stream.html\">Stream</a> 模式是比部署 <code>Promise</code>  更好的选择。</p>\n<h3 id=\"异常捕获\"><a class=\"markdownIt-Anchor\" href=\"#异常捕获\">#</a> 异常捕获</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"https://edu-image.nosdn.127.net/B34DC36428D2D51B8EF5EE2C83CE9BF2.png?imageView&amp;thumbnail=241y34&amp;quality=100\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//规定 ： then 只接受一个参数，最后统一用 catch 捕获异常</span>\nresult\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> img<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 最后统一 catch</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"promiseall-promiserace\"><a class=\"markdownIt-Anchor\" href=\"#promiseall-promiserace\">#</a> Promise.all &amp; Promise.race</h3>\n<blockquote>\n<p><strong>Promise.all</strong> 可以将多个 Promise 实例包装成一个新的 Promise 实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被 reject 失败状态的值。</p>\n<p><strong>Promse.race</strong> 就是赛跑的意思，意思就是说，Promise.race ([p1, p2, p3]) 里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p>\n<p><a href=\"https://www.jianshu.com/p/7e60fc1be1b2\">理解和使用 Promise.all 和 Promise.race</a></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190814/LoF987DaE10r.png?imageslim\" alt=\"mark\"></p>\n<p><em>演示</em> ：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> src1 <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"https://edu-image.nosdn.127.net/B34DC36428D2D51B8EF5EE2C83CE9BF2.png?imageView&amp;thumbnail=241y34&amp;quality=100\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> src2 <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.imooc.com/static/img/index/logo.png\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>result1<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">datas</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//谁快谁先执行</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>result1<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">datas</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Promise.all 的执行结果</strong> ：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190814/ITqccL9zhyE0.png?imageslim\" alt=\"mark\"></p>\n<p><strong>Promise.race 的执行结果</strong> ：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190814/PP76XFiW0S3V.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"promise-标准\"><a class=\"markdownIt-Anchor\" href=\"#promise-标准\">#</a> promise 标准</h3>\n<ul>\n<li>关于 “标准” 的闲谈</li>\n<li>状态变化</li>\n<li>then</li>\n</ul>\n<h4 id=\"关于-标准-的闲谈\"><a class=\"markdownIt-Anchor\" href=\"#关于-标准-的闲谈\">#</a> 关于 “标准” 的闲谈</h4>\n<ul>\n<li>任何技术推广使用都需要一套标准来支撑</li>\n<li>如 html js css http 等，无规矩不成方圆</li>\n<li>任何不符合标准的东西，终将会被用户抛弃</li>\n<li>不要挑战标准，不要自造标准</li>\n</ul>\n<h4 id=\"状态变化\"><a class=\"markdownIt-Anchor\" href=\"#状态变化\">#</a> 状态变化</h4>\n<ul>\n<li>三种状态：pending fulfilled rejected</li>\n<li>初始状态：pending</li>\n<li><strong>成功</strong>：pending 变成 fulfilled ，<strong>失败</strong>：pending 变成 rejected</li>\n<li>状态变化不可逆</li>\n</ul>\n<h4 id=\"then\"><a class=\"markdownIt-Anchor\" href=\"#then\">#</a> then</h4>\n<ul>\n<li>\n<p>Promise 实例必须实现 then 这个方法</p>\n</li>\n<li>\n<p>then () 必须可以接受两个函数作为参数</p>\n</li>\n<li>\n<p>then () 返回的必须是一个 Promise 实例</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190814/p2zjIfnNkjIp.png?imageslim\" alt=\"mark\"></p>\n</li>\n</ul>\n<h3 id=\"问题解答-4\"><a class=\"markdownIt-Anchor\" href=\"#问题解答-4\">#</a> 问题解答</h3>\n<p><strong>问题：Promise 的基本使用和原理？</strong></p>\n<ul>\n<li>基本语法 （复习）</li>\n<li>如何异常捕获 （ error 和 reject 都要考虑）</li>\n<li>多个串联 - 链式执行的好处</li>\n<li>Promise.all 和 Promise.race</li>\n<li>Promise 标准 - 状态变化，then 函数</li>\n</ul>\n<h2 id=\"4-5-asyncawait\"><a class=\"markdownIt-Anchor\" href=\"#4-5-asyncawait\">#</a> 4-5 async/await</h2>\n<blockquote>\n<p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p>\n<p>async 函数是什么？一句话，它就是 Generator 函数的语法糖。</p>\n<p><a href=\"http://es6.ruanyifeng.com/\">ECMAScript 6 入门</a> <a href=\"http://es6.ruanyifeng.com/#docs/async\">async 函数</a></p>\n</blockquote>\n<ul>\n<li>then 只是将 callback 拆分了</li>\n<li>async/await 是最直接的同步写法</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190815/B2MsvoDMkq7B.png?imageslim\" alt=\"mark\"></p>\n<p><strong>最直接的同步写法：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">load</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\">#</a> 用法</h3>\n<ul>\n<li>使用 await，函数必须用 async 标识</li>\n<li>await 后面跟的是一个 Promise 实例</li>\n<li>需要 babel-polyfill</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> src1 <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"https://edu-image.nosdn.127.net/B34DC36428D2D51B8EF5EE2C83CE9BF2.png?imageView&amp;thumbnail=241y34&amp;quality=100\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> src2 <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.imooc.com/static/img/index/logo.png\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">load</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"问题解答-5\"><a class=\"markdownIt-Anchor\" href=\"#问题解答-5\">#</a> 问题解答</h3>\n<ul>\n<li>介绍一下 async/await（ES7）（和 Promise 的区别、联系）\n<ul>\n<li>基本语法</li>\n<li>使用了 Promise，并没有和 Promise 冲突</li>\n<li>完全是同步的写法，再也没有回调函数</li>\n<li>但是：改变不了 JS 单线程、异步的本质</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "JS 三座大山",
                "单线程",
                "event loop",
                "异步的 Deferred",
                "Promise"
            ]
        },
        {
            "id": "http://example.com/2019/08/10/NewPrototype/",
            "url": "http://example.com/2019/08/10/NewPrototype/",
            "title": "原型",
            "date_published": "2019-08-10T07:52:24.000Z",
            "content_html": "<h1 id=\"原型\"><a class=\"markdownIt-Anchor\" href=\"#原型\">#</a> 原型</h1>\n<blockquote>\n<p>本章将结合 <strong>jQuery</strong> 和 <strong>zepto</strong> 源码来讲解原型的实际应用。通过 <strong>源码来分析</strong> jQuery 和 zepto 是如何使用原型的，以及通过它们的 <strong>插件机制</strong>，讲解 <strong>原型的扩展性</strong> 。</p>\n<p>《前端 JS 面试技巧》请参考我之前的博客： <a href=\"http://zxinc520.com/lcj/%225d2df2cdda85353d5ca8b83f%22\">前端 JS 基础面试技巧</a></p>\n</blockquote>\n<h3 id=\"关于原型\"><a class=\"markdownIt-Anchor\" href=\"#关于原型\">#</a> 关于原型</h3>\n<ul>\n<li>《前端 JS 面试技巧》已经讲解过原型的 <a href=\"http://zxinc520.com/lcj/%225d2df2cdda85353d5ca8b83f%22\">基础知识</a></li>\n<li>高级面试题，光会原型基础还不够，还要实际应用</li>\n<li>zepto jquery 中如何用原型</li>\n<li>顺便也算是解读了 zepto 和 jquery 的部分源码</li>\n</ul>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<ul>\n<li>说一个原型的实际应用</li>\n<li>原型如何体现它的扩展性</li>\n</ul>\n<h2 id=\"原型的实际应用\"><a class=\"markdownIt-Anchor\" href=\"#原型的实际应用\">#</a> 原型的实际应用</h2>\n<blockquote>\n<p>原型的实际应用</p>\n</blockquote>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<ul>\n<li>jquery 和 zepto 的简单使用</li>\n<li>zepto 如何使用原型</li>\n<li>jquery 如何使用原型</li>\n</ul>\n<h4 id=\"简单使用\"><a class=\"markdownIt-Anchor\" href=\"#简单使用\">#</a> 简单使用</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Title<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>jquery test <span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>jquery test <span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>jquery test <span class=\"token number\">3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"div1\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>jquery test <span class=\"token keyword\">in</span> dev<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token keyword\">var</span> $p <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>\n    $p<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'40px'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//css 是原型方法</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>$p<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \t\t    <span class=\"token comment\">//html 是原型方法</span>\n\n    <span class=\"token keyword\">var</span> $div1 <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#div1'</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">//css 是原型方法</span>\n    $div1<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//html 是原型方法</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>$div1<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"zepto-如何使用原型\"><a class=\"markdownIt-Anchor\" href=\"#zepto-如何使用原型\">#</a> zepto 如何使用原型</h4>\n<blockquote>\n<p>源码中，这里的处理情况比较复杂。但因为本次只针对原型，因此这里就弱化了</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">window</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//空对象</span>\n  <span class=\"token keyword\">var</span> zepto <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  zepto<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//源码中，这里的处理情况比较复杂。但因为本次只针对原型，因此这里就弱化了</span>\n    <span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> dom <span class=\"token operator\">=</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> zepto<span class=\"token punctuation\">.</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 即使用 zepto 时候的 $</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">$</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> zepto<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 这就是构造函数</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dom<span class=\"token punctuation\">,</span> selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span>\n      len <span class=\"token operator\">=</span> dom <span class=\"token operator\">?</span> dom<span class=\"token punctuation\">.</span>length <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selector <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  zepto<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Z</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dom<span class=\"token punctuation\">,</span> selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 注意，出现了 new 关键字</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  $<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    constructor<span class=\"token operator\">:</span> zepto<span class=\"token punctuation\">.</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">css</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">html</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  zepto<span class=\"token punctuation\">.</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n\n  window<span class=\"token punctuation\">.</span>$ <span class=\"token operator\">=</span> $<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"jquery-如何使用原型\"><a class=\"markdownIt-Anchor\" href=\"#jquery-如何使用原型\">#</a> jquery 如何使用原型</h4>\n<blockquote>\n<p>简化了源码，重在讲解 jquery 如何使用原型</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//简化了源码，真实源码分支很多,选取部分代码</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">window</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">jQuery</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//注意 new 关键字，第一步就找到了 构造函数</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">jQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span>init</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//定义构造函数</span>\n  <span class=\"token keyword\">var</span> init <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> dom <span class=\"token operator\">=</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span>\n      len <span class=\"token operator\">=</span> dom <span class=\"token operator\">?</span> dom<span class=\"token punctuation\">.</span>length <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selector <span class=\"token operator\">=</span> selector <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  init<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//初始化 jQuery.fn</span>\n  jQuery<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    constructor<span class=\"token operator\">:</span> jQuery<span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">//其他函数...</span>\n    <span class=\"token function-variable function\">css</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">html</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//定义原型</span>\n  init<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span>$ <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"问题解答\"><a class=\"markdownIt-Anchor\" href=\"#问题解答\">#</a> 问题解答</h3>\n<ul>\n<li>描述一下 jquery 如何使用原型</li>\n<li>描述一下 zepto 如何使用原型</li>\n<li>再结合自己的项目经验，说一下自己开发的例子</li>\n</ul>\n<h2 id=\"如何体现原型的扩展性\"><a class=\"markdownIt-Anchor\" href=\"#如何体现原型的扩展性\">#</a> 如何体现原型的扩展性</h2>\n<blockquote>\n<p>体现原型的扩展性</p>\n</blockquote>\n<h3 id=\"知识点-2\"><a class=\"markdownIt-Anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<ul>\n<li>总结 zepto 和 jquery 原型的使用</li>\n<li>插件机制</li>\n</ul>\n<h3 id=\"总结-zepto-和-jquery-原型的使用\"><a class=\"markdownIt-Anchor\" href=\"#总结-zepto-和-jquery-原型的使用\">#</a> 总结 zepto 和 jquery 原型的使用</h3>\n<blockquote>\n<p>总结 zepto 和 jquery 原型的使用</p>\n<p>相关 <strong>代码实现</strong> 请看上文 ：zepto 如何使用原型 和 jquery 如何使用原型</p>\n</blockquote>\n<p><em>问题一：为何要把原型方法放在 $.fn ?</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//初始化 jQuery.fn</span>\njQuery<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  constructor<span class=\"token operator\">:</span> jQuery<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">//其他函数...</span>\n  <span class=\"token function-variable function\">css</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">html</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//定义原型</span>\ninit<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>解答</strong> ：<u>因为要扩展插件</u> ，做一个简单的插件的例子</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 因为要扩展插件，做一个简单的插件的例子</span>\n$<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getNodeName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>好处</strong>：</p>\n<ol>\n<li>只有 $ 会暴露在 window 全局变量</li>\n<li>将插件扩展统一到 $.fn.xxx 这一接口，方便使用</li>\n</ol>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>\n<p>说一个原型的实际应用</p>\n<ul>\n<li>描述一下 jquery 如何使用 原型</li>\n<li>描述一下 zepto 如何使用 原型</li>\n<li>再结合自己的项目经验，说一下自己开发的例子</li>\n</ul>\n</li>\n<li>\n<p>原型如何体现它的扩展性</p>\n<ul>\n<li>说一下 jquery 和 zepto 的 插件机制</li>\n<li>结合自己的开发经验，做过的基于原型的插件</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "面试全面总结",
                "JS 三座大山"
            ]
        },
        {
            "id": "http://example.com/2019/08/04/JsBasicKnowledge01/",
            "url": "http://example.com/2019/08/04/JsBasicKnowledge01/",
            "title": "前端JS基础面试技巧上",
            "date_published": "2019-08-04T08:44:08.000Z",
            "content_html": "<h1 id=\"前端-js-基础面试技巧\"><a class=\"markdownIt-Anchor\" href=\"#前端-js-基础面试技巧\">#</a> 前端 JS 基础面试技巧</h1>\n<blockquote>\n<p>讲解 JS 基础语法相关的面试题，分析原理以及解答方法。这一章节讲解了基础知识的第一部分：变量的类型和计算。以及 JS “三座大山” —— 原型、作用域和异步中的： 原型和原型链、作用域和闭包。</p>\n<p>知识点：</p>\n<p>2-1 变量类型和计算</p>\n<p>2-2 原型和原型链</p>\n<p>2-3 函数声明和函数表达式</p>\n<p>2-4 作用域和闭包</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/A5zp7Ltc8RyD.png?imageslim\" alt=\"mark\"></p>\n<p><strong>关于面试</strong></p>\n<ul>\n<li>基层工程师 - <em>基础知识</em></li>\n<li>高级工程师 - <em>项目经验</em></li>\n<li>架构师 - <em>解决方案</em></li>\n</ul>\n<h2 id=\"先从几道面试题入手\"><a class=\"markdownIt-Anchor\" href=\"#先从几道面试题入手\">#</a> 先从几道面试题入手</h2>\n<ul>\n<li>JS 中使用 <strong>typeof</strong> 能得到的哪些类型？\n<ul>\n<li>考点：<em>JS 变量类型</em></li>\n</ul>\n</li>\n<li>何时使用 <strong>===</strong> 何时使用 **== **？\n<ul>\n<li>考点：<em>强制类型转换</em></li>\n</ul>\n</li>\n<li><strong>window.onload</strong> 和 <strong>DOMContentLoaded</strong> 的区别？\n<ul>\n<li>考点：<em>浏览器的渲染过程</em></li>\n</ul>\n</li>\n<li>用 JS 创建 10 个 a 标签，点击的时候弹出来对应的序号\n<ul>\n<li>考点：<em>作用域</em></li>\n</ul>\n</li>\n<li>简述如何实现一个<strong>模块加载器</strong>，实现类似 <strong>require.js</strong> 的基本功能\n<ul>\n<li>考点：<em>JS 模块化</em></li>\n</ul>\n</li>\n<li>实现数组的 <strong>随机排序</strong>\n<ul>\n<li>考点：<em>JS 基础算法</em></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/HysLOVvbjQLN.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/YKiIQGW864fb.png?imageslim\" alt=\"mark\"></p>\n<h1 id=\"知识体系\"><a class=\"markdownIt-Anchor\" href=\"#知识体系\">#</a> 知识体系</h1>\n<blockquote>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h2 id=\"2-1-变量类型和计算\"><a class=\"markdownIt-Anchor\" href=\"#2-1-变量类型和计算\">#</a> 2-1 变量类型和计算</h2>\n<blockquote>\n<p>2-1 变量类型和计算</p>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<ul>\n<li>JS 中使用 <strong>typeof</strong> 能得到的哪些类型？</li>\n<li>何时使用 <strong>===</strong> 何时使用 **== **？</li>\n<li>JS 中有哪些 <strong>内置函数</strong></li>\n<li>JS 变量按照 <strong>存储方式</strong> 分为哪些类型，并描述其特点</li>\n<li>如何理解 <strong>JSON</strong></li>\n</ul>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<ul>\n<li>变量类型\n<ul>\n<li>值类型 vs 引用类型</li>\n<li>typeof 运算符 详解</li>\n</ul>\n</li>\n<li>变量计算</li>\n</ul>\n<h3 id=\"变量类型\"><a class=\"markdownIt-Anchor\" href=\"#变量类型\">#</a> 变量类型</h3>\n<blockquote>\n<p>值类型 vs 引用类型</p>\n</blockquote>\n<h4 id=\"值类型\"><a class=\"markdownIt-Anchor\" href=\"#值类型\">#</a> 值类型</h4>\n<blockquote>\n<p><strong>值类型 (基本数据类型) 的值是按值访问的。</strong></p>\n<p>基本类型的值是<strong>不可变的</strong>，基本类型的比较是它们的<strong>值的比较</strong>，基本类型的变量是存放在 <strong>栈内存（Stack）里的</strong>。</p>\n<p><strong>JavaScript</strong> 数据<strong>类型</strong> 值<strong>类型</strong> (<strong>基本类型</strong>)：字符串（String）、数字 (Number)、布尔 (Boolean)、对空（Null）、未定义（Undefined）、Symbol (ES6 提供的新的类型)。</p>\n<p>6 种基本数据类型:<strong>string</strong>、<strong>number</strong>、<strong>boolean</strong>、<strong>undefined</strong>、<strong>null</strong> 、<strong>Symbol</strong> 。</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/Ss70W0DDyFPT.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"引用类型\"><a class=\"markdownIt-Anchor\" href=\"#引用类型\">#</a> 引用类型</h4>\n<blockquote>\n<p><strong>引用类型的值是按引用访问的。</strong></p>\n<p>引用类型的值是<strong>可变的</strong>，引用类型的比较是<strong>引用的比较</strong>，引用类型的值是保存在 <strong>堆内存（Heap）中的对象（Object）</strong>。</p>\n<p>特点：无限制扩展属性</p>\n<p><strong>3 种</strong> 主要引用类型：对象（<strong>Object</strong>）、数组（<strong>Array</strong>）、函数（<strong>Function</strong>）</p>\n<p>细分的话，有： <code>Object 类型</code> 、 <code>Array 类型</code> 、 <code>Date 类型</code> 、 <code>RegExp 类型</code> 、 <code>Function 类型</code>  等。</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/znhFw1Srcm3D.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h4>\n<blockquote>\n<p>** 值类型 (基本类型) **+ <strong>引用数据类型</strong></p>\n<p><u>7 种数据类型</u>：<strong>number</strong>、<strong>string</strong>、<strong>boolean</strong>、<strong>undefined</strong>、<strong>null</strong>、<strong>Symbol</strong> 、<strong>Object (Object、Array、Function)</strong> 。</p>\n</blockquote>\n<h4 id=\"typeof-运算符\"><a class=\"markdownIt-Anchor\" href=\"#typeof-运算符\">#</a> typeof 运算符</h4>\n<blockquote>\n<p><strong>7</strong> 种类型：<strong>undefined</strong>、<strong>string</strong>、<strong>number</strong>、<strong>boolean</strong>、<strong>object</strong>、<strong>function</strong> 、<strong>symbol</strong>（ES6 提供的新的类型）</p>\n<p>注意：typeof <strong>null</strong> // object</p>\n<p>typeof 运算符 <strong>只能</strong> 区分 <strong>值类型</strong> 的 类型，对于引用类型的 <strong>对象</strong>、<strong>数组</strong> <strong>区分不出来</strong> 。</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/k3tYgoHSpYgy.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"变量计算\"><a class=\"markdownIt-Anchor\" href=\"#变量计算\">#</a> 变量计算</h3>\n<blockquote>\n<p>这个主要针对值类型 - 强制类型转换</p>\n</blockquote>\n<p><strong>4 种强制类型转换：</strong></p>\n<ul>\n<li>字符串拼接</li>\n<li>== 运算符</li>\n<li>if 语句</li>\n<li>逻辑运算</li>\n</ul>\n<h4 id=\"字符串拼接\"><a class=\"markdownIt-Anchor\" href=\"#字符串拼接\">#</a> 字符串拼接</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/WBxaMX9CiLmz.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> == 运算符</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/PTp1mF5ulTVw.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"if-语句\"><a class=\"markdownIt-Anchor\" href=\"#if-语句\">#</a> if 语句</h4>\n<blockquote>\n<p>if 语句</p>\n<p><u>false 情况</u>：<strong>0</strong>、<strong>NaN</strong>、<strong>’&lt;空字符串&gt;’</strong>、<strong>null</strong>、<strong>undefine</strong> 、<strong>false</strong></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/C387EiaoakPe.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/4sGRvRvO2x65.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"何时使用-和\"><a class=\"markdownIt-Anchor\" href=\"#何时使用-和\">#</a> 何时使用 === 和 ==</h4>\n<blockquote>\n<p>何时使用 === 和 ==？</p>\n<p>解答：参考 jQuery 源码中推荐的写法，除了<strong>判断对象属性是否为空</strong> 和 ** 看是否函数的参数为空 ** 的情况 ，其余的都用 <strong>===</strong> 。</p>\n<p><code>==</code>  : 只进行值的比较</p>\n<p><code>===</code>  : 不仅进行值得比较，还要进行数据类型的比较</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/dfHpCgG4HQNR.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"js-中的内置函数\"><a class=\"markdownIt-Anchor\" href=\"#js-中的内置函数\">#</a> JS 中的内置函数</h4>\n<blockquote>\n<p>JS 中的内置函数的作用</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/BDtLCAEhGEUX.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"js-按存储方式区分变量类型\"><a class=\"markdownIt-Anchor\" href=\"#js-按存储方式区分变量类型\">#</a> JS 按存储方式区分变量类型</h4>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000006752076\">参考 1</a></p>\n<p><a href=\"https://www.cnblogs.com/leiting/p/8081413.html\">参考 2</a></p>\n<p>基本类型的值是不可变的</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/0cbg9UtuHTED.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"如何理解-json\"><a class=\"markdownIt-Anchor\" href=\"#如何理解-json\">#</a> 如何理解 JSON</h4>\n<blockquote>\n<p>JS 内置对象，Math 也是内置对象</p>\n<p>注意：JSON 既是一个 JS <strong>内置对象</strong>，也是一种 <strong>数据格式</strong>。</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/5bkwAGYcMzH8.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"2-2-原型和原型链\"><a class=\"markdownIt-Anchor\" href=\"#2-2-原型和原型链\">#</a> 2-2 原型和原型链</h2>\n<blockquote>\n<p>2-2 原型和原型链</p>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目-2\"><a class=\"markdownIt-Anchor\" href=\"#题目-2\">#</a> 题目</h3>\n<ul>\n<li>如何准确判断一个变量是 <strong>数组类型</strong></li>\n<li>写一个原型链继承的例子</li>\n<li>描述 new 一个对象的过程</li>\n<li>zepto (或其他框架) 源码中如何使用原型链</li>\n</ul>\n<h3 id=\"知识点-2\"><a class=\"markdownIt-Anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<ul>\n<li>构造函数</li>\n<li>构造函数 - 扩展</li>\n<li>原型规则和示例</li>\n<li>原型链</li>\n<li>instanceof</li>\n</ul>\n<h4 id=\"构造函数\"><a class=\"markdownIt-Anchor\" href=\"#构造函数\">#</a> 构造函数</h4>\n<blockquote>\n<p>函数名 习惯 <strong>第一个字母大写</strong>（ 高级程序员规范）</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/aYlOy0sAIxjg.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"构造函数扩展\"><a class=\"markdownIt-Anchor\" href=\"#构造函数扩展\">#</a> 构造函数扩展</h4>\n<blockquote>\n<p>构造函数扩展</p>\n<p>函数扩展 ---- <strong>语法糖</strong></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/KAiPkbgM6g8k.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"5-条原型规则和示例\"><a class=\"markdownIt-Anchor\" href=\"#5-条原型规则和示例\">#</a> 5 条原型规则和示例</h4>\n<blockquote>\n<p>5 条原型规则</p>\n<p><strong>原型规则</strong> 是学习 <strong>原型链</strong> 的基础</p>\n</blockquote>\n<p><strong>5 条原型规则 ：</strong></p>\n<ol>\n<li>\n<p>所有的 <strong>引用类型</strong> (对象，数组，函数)，都具有对象特性，即可 <strong>自由扩展</strong> 属性（除了 null 以外）。</p>\n</li>\n<li>\n<p>所有的 <strong>引用类型</strong> (对象，数组，函数)，都有一个 <code>__proto__</code>  （ <em>隐式原型</em> ）属性，属性值都是一个普通对象。</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/i237crTwXpRw.png?imageslim\" alt=\"mark\"></p>\n</li>\n<li>\n<p>所有的函数都有一个 <code>prototype</code>  （ <em>显示原型</em> ）属性，属性值是一个普通对象。</p>\n</li>\n<li>\n<p>所有的引用类型 (对象，数组，函数)， <code>__proto__</code> 属性值指向它的构造函数的 <code>prototype</code>  属性值。</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/gbOkNmykomux.png?imageslim\" alt=\"mark\"></p>\n</li>\n<li>\n<p>当试图得到一个引用类型的某个属性时，如果这个对象本身没有这个属性，那么会去它的 <code>__proto__</code> (即它的构造函数的 <code>prototype</code> ) 中去找。</p>\n</li>\n</ol>\n<p><strong>示例</strong> ：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/CKA2EOYdkSQ5.png?imageslim\" alt=\"mark\"></p>\n<p><strong>循环自身的属性：</strong></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/kAsCaFM5fgCq.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"原型链\"><a class=\"markdownIt-Anchor\" href=\"#原型链\">#</a> 原型链</h4>\n<blockquote>\n<p>这种搜索的轨迹，形似一条长链，又因 prototype 在这个游戏规则中充当链接的作用，于是我们把这种实例与原型的链条称作 <strong>原型链</strong></p>\n<p><a href=\"https://juejin.im/post/58f94c9bb123db411953691b\">参考</a></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/zjK7G9Pwib6K.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/hyX26borV0mF.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"instanceof\"><a class=\"markdownIt-Anchor\" href=\"#instanceof\">#</a> instanceof</h4>\n<blockquote>\n<p>用于 判断 <strong>引用类型</strong> 属于哪个 构造函数的方法</p>\n<p>**instanceof 运算符 ** 用于测试构造函数的 prototype 属性是否出现在对象的原型链中的任何位置</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\">参看 MDN</a></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/mHVNeyIgfsSE.png?imageslim\" alt=\"mark\"></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> make<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> auto <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Honda\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Accord\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1998</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>auto <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>auto <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"解答\"><a class=\"markdownIt-Anchor\" href=\"#解答\">#</a> 解答</h3>\n<ul>\n<li>\n<p>如何准确判断一个变量是 <strong>数组类型</strong></p>\n<ul>\n<li>arr instanceof Arrar</li>\n</ul>\n</li>\n<li>\n<p>写一个原型链继承的例子、</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Elem</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">html</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> elem <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    elem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//链式操作</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> elem<span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Elem</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">on</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> elem <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">;</span>\n  elem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> div1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndiv1<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p>hello world&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>\n<p>描述 new 一个对象的过程</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/fEURg05c9KBT.png?imageslim\" alt=\"mark\"></p>\n</li>\n<li>\n<p>zepto (或其他框架) 源码中如何使用原型链</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/6vDDJLlWz5AQ.png?imageslim\" alt=\"mark\"></p>\n</li>\n</ul>\n<h2 id=\"2-3-函数声明和函数表达式\"><a class=\"markdownIt-Anchor\" href=\"#2-3-函数声明和函数表达式\">#</a> 2-3 函数声明和函数表达式</h2>\n<blockquote>\n<p>函数声明和函数表达式</p>\n</blockquote>\n<h4 id=\"函数声明\"><a class=\"markdownIt-Anchor\" href=\"#函数声明\">#</a> 函数声明</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//执行</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//声明</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"函数表达式\"><a class=\"markdownIt-Anchor\" href=\"#函数表达式\">#</a> 函数表达式</h4>\n<blockquote>\n<p>把 var 定义的变量提前：相当于：先定义 <strong>var fn</strong> — &gt; 然后执行 <strong>fn()</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError: fn is not a function</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span>（）<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>相关的例子（函数执行的顺序）：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhouchen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//output：zhouchen 20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhouchen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 参数的集合</span>\n  age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\n    &#123; '0': 'zhouchen' &#125;\n    zhouchen 20\n    100\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-4-作用域和闭包\"><a class=\"markdownIt-Anchor\" href=\"#2-4-作用域和闭包\">#</a> 2-4 作用域和闭包</h2>\n<blockquote>\n<p>作用域和闭包</p>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目-3\"><a class=\"markdownIt-Anchor\" href=\"#题目-3\">#</a> 题目</h3>\n<ul>\n<li>说一下对变量提升的理解</li>\n<li>说明 this 几种 不同的使用场景</li>\n<li>创建 10 个 a 标签，点击的时候弹出来对应的序号</li>\n<li>如何理解作用域</li>\n<li>实际开发中闭包的应用</li>\n</ul>\n<h3 id=\"知识点-3\"><a class=\"markdownIt-Anchor\" href=\"#知识点-3\">#</a> 知识点</h3>\n<ul>\n<li>\n<p>执行上下文</p>\n</li>\n<li>\n<p>this</p>\n</li>\n<li>\n<p>作用域</p>\n</li>\n<li>\n<p>作用域链</p>\n</li>\n<li>\n<p>闭包</p>\n</li>\n</ul>\n<h4 id=\"执行上下文\"><a class=\"markdownIt-Anchor\" href=\"#执行上下文\">#</a> 执行上下文</h4>\n<blockquote>\n<p>执行上下文</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/slpXIRmFPFUC.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/yGYEzQ0mBi3H.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"this\"><a class=\"markdownIt-Anchor\" href=\"#this\">#</a> this</h4>\n<blockquote>\n<p>this 要在 <strong>执行时</strong> 才能确定值，<strong>定义时</strong> 无法确认</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/y7uMvda2zozx.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/X4ErfYyomFle.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"块级作用域\"><a class=\"markdownIt-Anchor\" href=\"#块级作用域\">#</a> 块级作用域</h4>\n<blockquote>\n<p>任何一对花括号中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。</p>\n<p><strong>JS</strong> 并 <strong>不支持 块级作用域</strong>，它<strong>只支持 函数作用域</strong> ，<u>而且在一个函数中的<strong>任何位置定义的变量</strong> 在该函数中的 <strong>任何地方都是可见的</strong> 。</u></p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"zhouchen\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// zhouchen</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"链式作用域\"><a class=\"markdownIt-Anchor\" href=\"#链式作用域\">#</a> 链式作用域</h4>\n<blockquote>\n<p><strong>如何从外部读取局部变量？</strong></p>\n<p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。</p>\n<p>那就是在函数的内部，再定义一个函数。</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 999</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上面的代码中，函数 f2 就被包括在函数 f1 内部，这时 f1 内部的所有局部变量，对 f2 都是可见的。但是反过来就不行，f2 内部的局部变量，对 f1 就是不可见的。这就是 Javascript 语言特有的 &quot;<strong>链式作用域&quot; 结构</strong>（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>\n<h4 id=\"闭包\"><a class=\"markdownIt-Anchor\" href=\"#闭包\">#</a> 闭包</h4>\n<blockquote>\n<p>上一节代码中的 f2 函数，就是闭包。</p>\n<p>简单来说：闭包就是 <strong>能够读取其他函数内部变量的函数</strong>。</p>\n<p>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成 <strong>定义在一个函数内部的函数</strong> 。</p>\n<p>所以，在本质上，<u>闭包就是将函数内部和函数外部连接起来的一座桥梁</u>。</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">参考阮一峰的网络日志 </a></p>\n</blockquote>\n<h4 id=\"闭包的用途\"><a class=\"markdownIt-Anchor\" href=\"#闭包的用途\">#</a> 闭包的用途</h4>\n<blockquote>\n<p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>\n</blockquote>\n<h4 id=\"实际开发中闭包的应用\"><a class=\"markdownIt-Anchor\" href=\"#实际开发中闭包的应用\">#</a> 实际开发中闭包的应用</h4>\n<blockquote>\n<p>实际开发中闭包的应用</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/oAEdrQVxx55a.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"解题\"><a class=\"markdownIt-Anchor\" href=\"#解题\">#</a> 解题</h3>\n<ul>\n<li>\n<p>说一下对变量提升的理解</p>\n<ul>\n<li>变量定义</li>\n<li>函数声明 （ 注意和 函数表达式 的区别）</li>\n</ul>\n</li>\n<li>\n<p>说明 this 几种 不同的使用场景</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/weixin_40387601/article/details/80313884\">参考 1</a></li>\n<li><a href=\"https://blog.csdn.net/sinat_32067081/article/details/53047149\">参考 2</a></li>\n</ul>\n</li>\n<li>\n<p>创建 10 个 a 标签，点击的时候弹出来对应的序号</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/jpCryHpWtFmQ.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/JOON77hWUAPT.png?imageslim\" alt=\"mark\"></p>\n</li>\n<li>\n<p>如何理解作用域</p>\n<ul>\n<li>自由变量</li>\n<li>作用域连，即自由变量的查找</li>\n<li>闭包的两个场景</li>\n</ul>\n</li>\n<li>\n<p>实际开发中闭包的应用</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/DOiHXt0yUzLP.png?imageslim\" alt=\"mark\"></p>\n</li>\n</ul>\n",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "http://example.com/2019/08/04/JsBasicKnowledge02/",
            "url": "http://example.com/2019/08/04/JsBasicKnowledge02/",
            "title": "前端JS基础面试技巧下",
            "date_published": "2019-08-04T08:44:08.000Z",
            "content_html": "<h1 id=\"前端-js-基础面试技巧\"><a class=\"markdownIt-Anchor\" href=\"#前端-js-基础面试技巧\">#</a> 前端 JS 基础面试技巧</h1>\n<blockquote>\n<p>前端 JS 基础面试技巧 – <strong>JS 基础知识下</strong></p>\n<p>JS 三座大山：<strong>原型原型链</strong> 、<strong>作用域闭包</strong> 、<strong>异步和单线程</strong> 。</p>\n<p>知识点：</p>\n<p>3-1 异步和单线程</p>\n<p>3-2 日期和 math</p>\n<ul>\n<li>日期</li>\n<li>Math</li>\n<li>数组 API</li>\n<li>对象 API</li>\n</ul>\n</blockquote>\n<h2 id=\"3-1-异步和单线程\"><a class=\"markdownIt-Anchor\" href=\"#3-1-异步和单线程\">#</a> 3-1 异步和单线程</h2>\n<blockquote>\n<p>异步和单线程</p>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<ul>\n<li>同步和异步的区别是什么？分别举一个同步和异步的例子</li>\n<li>一个关于 setTimeout 的笔试题</li>\n<li>前端使用异步的场景有哪些</li>\n</ul>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<ul>\n<li>什么是异步（对比同步）</li>\n<li>前端使用异步的场景</li>\n<li>异步个单线程</li>\n</ul>\n<h3 id=\"什么是异步\"><a class=\"markdownIt-Anchor\" href=\"#什么是异步\">#</a> 什么是异步</h3>\n<blockquote>\n<p>异步（Asynchronous）</p>\n<p>一般而言，操作分为发出调用和得到结果两步。发出调用后一直等待，直到拿到结果（这段时间不能做任何事）为 <strong>同步</strong> ；发出调用后不等待，继续执行下一个任务，就是 <strong>异步任务</strong> 。</p>\n<p><a href=\"https://www.jianshu.com/p/667936441cb5\">参考</a></p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n    100\n    300\n    200\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"何时需要异步\"><a class=\"markdownIt-Anchor\" href=\"#何时需要异步\">#</a> 何时需要异步？</h4>\n<ul>\n<li>\n<p>在可能发生等待的情况</p>\n</li>\n<li>\n<p>等待过程中不能像 alert 一样阻塞程序运行</p>\n</li>\n<li>\n<p>因此，所有的 “等待情况” 都需要异步</p>\n</li>\n</ul>\n<h4 id=\"前端使用异步的场景\"><a class=\"markdownIt-Anchor\" href=\"#前端使用异步的场景\">#</a> 前端使用异步的场景</h4>\n<ul>\n<li>\n<p>定时任务：<strong>setTimeout</strong>，<strong>setInterval</strong></p>\n</li>\n<li>\n<p>网络请求：<strong>ajax 请求</strong>，<strong>动态</strong> &lt;<strong>img</strong>&gt; <strong>加载</strong></p>\n</li>\n<li>\n<p><strong>事件绑定</strong></p>\n</li>\n</ul>\n<h3 id=\"单线程\"><a class=\"markdownIt-Anchor\" href=\"#单线程\">#</a> 单线程</h3>\n<blockquote>\n<p><strong>Javascript 是单线程的</strong> <a href=\"https://www.cnblogs.com/Mainz/p/3552717.html\">参考</a></p>\n<p>JS 的单线程是指一个浏览器进程中只有一个 JS 的执行线程，同一时刻内只会有一段代码在执行</p>\n<p>在某个特定的时刻只有特定的代码能够被执行，并 <strong>阻塞</strong> 其它的代码。</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>上面代码执行过程：</strong></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190717/kEQlmncCXtel.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"重点总结\"><a class=\"markdownIt-Anchor\" href=\"#重点总结\">#</a> 重点总结</h4>\n<ul>\n<li>异步和同步的区别</li>\n<li>异步和单线程的关系</li>\n<li>异步在前端的引用场景</li>\n</ul>\n<h3 id=\"解答\"><a class=\"markdownIt-Anchor\" href=\"#解答\">#</a> 解答</h3>\n<ul>\n<li>\n<p>同步和异步的区别是什么？分别举一个同步和异步的例子</p>\n<ul>\n<li>\n<p><em>同步</em> 是 <strong>阻塞模式</strong> ，<em>异步</em> 是 <strong>非阻塞模式</strong> 。</p>\n<p><em>同步</em> 就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会 <strong>一直等待下去</strong> ，知道收到返回信息才继续执行下去；</p>\n<p><em>异步</em> 是指进程 <strong>不需要一直等下去</strong> ，而是 <strong>继续执行下面的操作</strong>，不管其他进程的状态。当有消息返回式系统会通知进程进行处理，这样可以提高执行的效率。</p>\n</li>\n<li>\n<p>alert 是 同步， setTimeout 是 异步</p>\n</li>\n</ul>\n</li>\n<li>\n<p>一个关于 setTimeout 的笔试题</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* \n\t1\n    3\n    5\n    2\n    4\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>前端使用异步的场景有哪些\n<ul>\n<li>定时任务：<strong>setTimeout</strong>，<strong>setInterval</strong></li>\n<li>网络请求：<strong>ajax 请求</strong>，<strong>动态</strong> &lt;<strong>img</strong>&gt; <strong>加载</strong></li>\n<li><strong>事件绑定</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-2-日期和-math\"><a class=\"markdownIt-Anchor\" href=\"#3-2-日期和-math\">#</a> 3-2 日期和 math</h2>\n<blockquote>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目-2\"><a class=\"markdownIt-Anchor\" href=\"#题目-2\">#</a> 题目</h3>\n<ul>\n<li>获取 2017 -06 -10 格式的日期</li>\n<li>获取 随机数，要求是长度一致 的字符串格式</li>\n<li>写一个 能遍历对象 和数组 的通用 forEach 函数</li>\n</ul>\n<h3 id=\"知识点-2\"><a class=\"markdownIt-Anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<ul>\n<li>日期</li>\n<li>Math</li>\n<li>数组 API</li>\n<li>对象 API</li>\n</ul>\n<h4 id=\"日期\"><a class=\"markdownIt-Anchor\" href=\"#日期\">#</a> 日期</h4>\n<blockquote>\n<p><strong>日期对象用于处理日期和时间。</strong></p>\n<p><a href=\"http://www.w3school.com.cn/jsref/jsref_obj_date.asp\">JavaScript Date 对象 API</a></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190717/3ijIzI0Frks1.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"math\"><a class=\"markdownIt-Anchor\" href=\"#math\">#</a> Math</h4>\n<blockquote>\n<p><strong>Math</strong> 是一个内置对象， 它具有数学常数和函数的属性和方法。不是一个函数对象。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math Api</a></p>\n<p>描述：与其它全局对象不同的是， <code>Math</code>  不是一个构造器.  <code>Math</code>  的所有属性和方法都是静态的。你用到的常数 pi 可以用  <code>Math.PI</code>  表示，用  <code>x</code>  作参数 Math.sin (x) 调用 sin 函数. JavaScript 中的常数，是以全精度的实数定义的.</p>\n<p>Math.random () 在前端的作用：随时改变，清除缓存。</p>\n</blockquote>\n<h4 id=\"数组-api\"><a class=\"markdownIt-Anchor\" href=\"#数组-api\">#</a> 数组 API</h4>\n<blockquote>\n<p><a href=\"http://louiszhai.github.io/2017/04/28/array/#Array%E6%9E%84%E9%80%A0%E5%99%A8\">参考</a></p>\n<p>详情可以参考我的博客：<a href=\"http://zxinc520.com/lcj/%225d119841fd02ab26e068eb0a%22\">JavaScript 数组那些事</a></p>\n</blockquote>\n<p><strong>面试官最常问的几个</strong> ：</p>\n<ul>\n<li>forEach 遍历所有元素</li>\n<li>every 判断所有元素是否都符合条件</li>\n<li>some 判断是否有至少一个元素符合条件</li>\n<li>sort 排序</li>\n<li>map 对元素重新组装，生成新数组</li>\n<li>filter 过滤符合条件的元素</li>\n</ul>\n<h4 id=\"对象-api\"><a class=\"markdownIt-Anchor\" href=\"#对象-api\">#</a> 对象 API</h4>\n<blockquote>\n<p><strong>Object.prototype API</strong></p>\n<p><code>Object.prototype</code>  表示对象的原型对象<br>\n <code>Object.prototype</code>  属性的属性特征</p>\n<p><a href=\"https://www.jianshu.com/p/2f43db2b656c\">参考</a></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190717/mOpzx9LK1xmu.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"解答-2\"><a class=\"markdownIt-Anchor\" href=\"#解答-2\">#</a> 解答</h3>\n<ul>\n<li>获取 2019-07-17 格式的日期</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    dt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">var</span> dt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> year <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> month <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>month <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    month <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> month<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    data <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> year <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> month <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> dt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//  2019-07-17</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>获取 随机数，要求是长度一致 的字符串格式</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> random <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrandom <span class=\"token operator\">=</span> random <span class=\"token operator\">+</span> <span class=\"token string\">\"0000000000\"</span><span class=\"token punctuation\">;</span>\nrandom <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>写一个 能遍历对象 和数组 的通用 forEach 函数</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 写一个 能遍历对象 和数组 的通用 forEach 函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 使用  forEach 函数</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token string\">\"---\"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t2---1\n    3---2\n    x 100\n    y 200\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "http://example.com/2019/08/04/JS-Web-API/",
            "url": "http://example.com/2019/08/04/JS-Web-API/",
            "title": "JS-Web-API",
            "date_published": "2019-08-04T08:44:08.000Z",
            "content_html": "<h1 id=\"js-web-api\"><a class=\"markdownIt-Anchor\" href=\"#js-web-api\">#</a> JS-Web-API</h1>\n<blockquote>\n<p>前端 JS 基础面试技巧 - - <strong>JS-Web-API 上</strong></p>\n<p>讲解 JS 在浏览器中具体应用的面试题。包括 <strong>DOM 操作</strong>，<strong>BOM 操作</strong> ，<strong>事件绑定</strong>，<strong>ajax</strong> 和 <strong>存储</strong> ，这些类别的题目。</p>\n</blockquote>\n<h2 id=\"从基础知识到-js-web-api\"><a class=\"markdownIt-Anchor\" href=\"#从基础知识到-js-web-api\">#</a> 从基础知识到 JS-Web-API</h2>\n<blockquote>\n<p>从基础知识 <strong>过渡</strong> 到 JS-Web-API</p>\n</blockquote>\n<ul>\n<li>回顾 JS 基础知识</li>\n<li>JS-Web-API</li>\n<li>总结</li>\n</ul>\n<h3 id=\"回顾-js-基础知识\"><a class=\"markdownIt-Anchor\" href=\"#回顾-js-基础知识\">#</a> 回顾 JS 基础知识</h3>\n<blockquote>\n<p>特点：表面看来并不能哟用于工作中开发代码</p>\n<p>内置函数：Object，Array，Boolean，String …</p>\n<p>内置对象：Math，Json …</p>\n<p>详情请参考：<a href=\"http://zxinc520.com/lcj/%225d2df2cdda85353d5ca8b83f%22\">原型和原型链，闭包和作用域</a> <a href=\"http://zxinc520.com/lcj/%225d2eeda9d797f0309cf6ab02%22\">异步和单线程</a></p>\n<ul>\n<li>我们连在网页上弹出一句 hello world 都不能实现</li>\n</ul>\n</blockquote>\n<p><strong>知识点</strong> ：</p>\n<ul>\n<li>\n<p>变量类型和计算</p>\n</li>\n<li>\n<p>原型和原型链</p>\n</li>\n<li>\n<p>闭包和作用域</p>\n</li>\n<li>\n<p>异步和单线程</p>\n</li>\n<li>\n<p>其它（如日期，Math，各种常用 API）</p>\n</li>\n<li>\n<p>JS 基础知识：<strong>ECMA 262 标准</strong></p>\n</li>\n<li>\n<p>JS-Web-API ：<strong>W3C 标准</strong></p>\n</li>\n</ul>\n<h3 id=\"js-web-api-2\"><a class=\"markdownIt-Anchor\" href=\"#js-web-api-2\">#</a> JS-Web-API</h3>\n<blockquote>\n<p>JS-Web-API</p>\n</blockquote>\n<p><strong>W3C 标准中关于 JS 的规定有</strong> ：</p>\n<ul>\n<li>DOM 操作</li>\n<li>BOM 操作</li>\n<li>事件绑定</li>\n<li>ajax 请求（包括 http 协议）</li>\n<li>储存</li>\n</ul>\n<p><strong>页面弹框 window.alert (123) ，浏览器需要做：</strong></p>\n<ul>\n<li>定义一个 window 全局变量 ，对象类型</li>\n<li>给它定义一个 alert 属性，属性值是一个函数</li>\n</ul>\n<p><strong>获取元素 document.getElementById (id)，浏览器需要做：</strong></p>\n<ul>\n<li>定义一个 document 全局变量 ，对象类型</li>\n<li>给它定义一个 getElementById 属性，属性值是一个函数</li>\n</ul>\n<p><strong>W3C 标准：</strong></p>\n<ul>\n<li>W3C 标准没有规定任何 JS 基础相关的东西</li>\n<li>不管什么变量类型，原型，作用域和异步</li>\n<li>只管 定义用于 浏览器中 JS 操作页面的 API 和 全局变量</li>\n</ul>\n<h4 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结：</h4>\n<p><strong>常说的 JS （浏览器执行的 JS ）包含两部分：</strong></p>\n<ul>\n<li>JS 基础知识：<strong>ECMA 262 标准</strong></li>\n<li>JS-Web-API ：<strong>W3C 标准</strong></li>\n</ul>\n<h2 id=\"5-1-bom-节点操作\"><a class=\"markdownIt-Anchor\" href=\"#5-1-bom-节点操作\">#</a> 5-1 BOM 节点操作</h2>\n<blockquote>\n<p>BOM 操作： <strong>Browser</strong>、<strong>Object</strong>、<strong>Model</strong> （ 浏览器对象模型 ）</p>\n<p><strong>BOM 节点操作</strong> 可以理解为：浏览器把拿到的 html 代码，结构化一个 浏览器 能识别并且 js 可操作的一个模型而已 。</p>\n<p>javacsript 是通过 <strong>访问 BOM</strong> （Browser Object Model）对象来 <strong>访问、控制、修改</strong> 客户端 (浏览器)，由于 BOM 的 window 包含了 document，<strong>window 对象的属性和方法是直接可以使用而且被感知的</strong> ，因此可以直接使用 window 对象的 document 属性，通过 document 属性就可以访问、检索、修改 XHTML 文档内容与结构。因为 document 对象又是 DOM（Document Object Model）模型的根节点。可以说，<strong>BOM 包含了 DOM (对象)</strong> ，浏览器提供出来给予访问的是 BOM 对象，从 BOM 对象再访问到 DOM 对象，从而 js 可以操作浏览器以及浏览器读取到的文档。</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/LLToFChkpany.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<ul>\n<li>如何检测浏览器的类型</li>\n<li>拆解 url 的 各部分</li>\n</ul>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<ul>\n<li>navigator</li>\n<li>screen</li>\n<li>location</li>\n<li>history</li>\n</ul>\n<h4 id=\"navigator-screen\"><a class=\"markdownIt-Anchor\" href=\"#navigator-screen\">#</a> navigator &amp; screen</h4>\n<blockquote>\n<p>navigator &amp; screen</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/r3iKL9Xukvhh.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/HGtIQM9isqCI.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"location-history\"><a class=\"markdownIt-Anchor\" href=\"#location-history\">#</a> location &amp; history</h4>\n<blockquote>\n<h6 id=\"location-history-2\"><a class=\"markdownIt-Anchor\" href=\"#location-history-2\">#</a> location &amp; history</h6>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/cbYxCVkoLMQu.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/wBG2i12YtTmW.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"解答\"><a class=\"markdownIt-Anchor\" href=\"#解答\">#</a> 解答</h3>\n<ul>\n<li>如何检测浏览器的类型</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/TfK1lJ7IAry5.png?imageslim\" alt=\"mark\"></p>\n<ul>\n<li>拆解 url 的 各部分</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/UzzCgHl1fImg.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"5-2-dom-节点操作\"><a class=\"markdownIt-Anchor\" href=\"#5-2-dom-节点操作\">#</a> 5-2 DOM 节点操作</h2>\n<blockquote>\n<p><strong>DOM 操作的重点：找到节点对节点（元素 / 文本 / 属性节点）增删改查</strong></p>\n<p><strong>各方法和属性之间的结合操作才会使得 DOM 文档活跃起来</strong></p>\n<p><code>注意方法与属性的不同。</code>  <strong>注意属性的返回值</strong></p>\n<p><strong>注意 javascript 操作样式的可读可写性</strong></p>\n<p><a href=\"https://juejin.im/post/5b16113f5188257d7a49ada7\">可参考</a></p>\n</blockquote>\n<h3 id=\"dom-节点操作\"><a class=\"markdownIt-Anchor\" href=\"#dom-节点操作\">#</a> DOM 节点操作：</h3>\n<ul>\n<li>获取 DOM 节点</li>\n<li>prototype</li>\n<li>Attribute</li>\n</ul>\n<h4 id=\"获取-dom-节点\"><a class=\"markdownIt-Anchor\" href=\"#获取-dom-节点\">#</a> 获取 DOM 节点</h4>\n<blockquote>\n<p>获取 DOM 节点</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classname\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo > div.bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/TsP71SzkfFU5.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"prototype\"><a class=\"markdownIt-Anchor\" href=\"#prototype\">#</a> prototype</h4>\n<blockquote>\n<p>prototype</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/nehMbgtKQirx.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"property\"><a class=\"markdownIt-Anchor\" href=\"#property\">#</a> property</h4>\n<blockquote>\n<p>property 只是一个 JS 对象的属性的修改</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/3vippb1mnJqF.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"attribute\"><a class=\"markdownIt-Anchor\" href=\"#attribute\">#</a> Attribute</h4>\n<blockquote>\n<p>Attribute</p>\n<p>Attribute 是对 html <strong>标签属性</strong> 的修改 （获取）</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/B7FUAdLGXAHz.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"dom-结构操作\"><a class=\"markdownIt-Anchor\" href=\"#dom-结构操作\">#</a> DOM 结构操作</h3>\n<blockquote>\n<p>DOM 结构操作</p>\n</blockquote>\n<ul>\n<li>新增节点</li>\n<li>获取父元素</li>\n<li>获取子元素</li>\n<li>删除节点</li>\n</ul>\n<h4 id=\"新增节点\"><a class=\"markdownIt-Anchor\" href=\"#新增节点\">#</a> 新增节点</h4>\n<blockquote>\n<p>新增节点</p>\n<p>移动已有 的节点</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n  <span class=\"token keyword\">var</span> div1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div1'</span><span class=\"token punctuation\">)</span> p <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>\n  p<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h3>hello world&lt;/h3>'</span> div1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.p2'</span><span class=\"token punctuation\">)</span> div1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/e7UMDpPFqB1d.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"获取父元素和子元素\"><a class=\"markdownIt-Anchor\" href=\"#获取父元素和子元素\">#</a> 获取父元素和子元素</h4>\n<blockquote>\n<p>获取父元素和子元素</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"div1\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"p1\"</span><span class=\"token operator\">></span><span class=\"token keyword\">this</span> is p1<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"p2\"</span><span class=\"token operator\">></span><span class=\"token keyword\">this</span> is p2<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"div2\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"p3\"</span><span class=\"token operator\">></span><span class=\"token keyword\">this</span> is p3<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"p4\"</span><span class=\"token operator\">></span><span class=\"token keyword\">this</span> is p4<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token keyword\">var</span> div1<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div1'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div1<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div1<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div1<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nodeType<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//3</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div1<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nodeType<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//1</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div1<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//#text</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div1<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// DIV</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/BD4IQWndiCTW.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"解答-2\"><a class=\"markdownIt-Anchor\" href=\"#解答-2\">#</a> 解答</h4>\n<ul>\n<li>\n<p>DOM 是哪种基本的数据结构</p>\n<ul>\n<li>树</li>\n</ul>\n</li>\n<li>\n<p>DOM 操作的常用 API 有哪些</p>\n<ul>\n<li>获取 DOM 节点，以及节点的 property 和 Attribute</li>\n<li>获取父节点，获取子节点</li>\n<li>新增节点，删除节点</li>\n</ul>\n</li>\n<li>\n<p>DOM 节点的 Attribute 和 property 有何区别</p>\n<ul>\n<li>property 只是一个 JS 对象的属性的修改</li>\n<li>Attribute 是对 html 标签属性的修改</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"重点总结\"><a class=\"markdownIt-Anchor\" href=\"#重点总结\">#</a> 重点总结</h4>\n<ul>\n<li>DOM 本质</li>\n<li>DOM 节点操作</li>\n<li>DOM 结构操作</li>\n</ul>\n<h2 id=\"5-3-事件绑定\"><a class=\"markdownIt-Anchor\" href=\"#5-3-事件绑定\">#</a> 5-3 事件绑定</h2>\n<blockquote>\n<p>JavaScript 绑定事件的三种方式</p>\n</blockquote>\n<h3 id=\"javascript-绑定事件的三种方式\"><a class=\"markdownIt-Anchor\" href=\"#javascript-绑定事件的三种方式\">#</a> JavaScript 绑定事件的三种方式：</h3>\n<ul>\n<li>使用内联</li>\n<li>使用 <code>.onclick</code>  的方式</li>\n<li>使用事件监听 <code>addEventListener</code>  的方式</li>\n</ul>\n<h4 id=\"内联\"><a class=\"markdownIt-Anchor\" href=\"#内联\">#</a> 内联</h4>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>按钮<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert(1);<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这种方式就是在一个元素上面直接绑定了一个点击 <code>onclick</code>  事件，此事件为<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2FDOM%2F50288%3Ffr%3Daladdin\"> DOM 0 级标准</a>。同时，这个事件的优先级是最高的。</p>\n<h4 id=\"使用对象事件的形式\"><a class=\"markdownIt-Anchor\" href=\"#使用对象事件的形式\">#</a> 使用对象。事件的形式</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"按钮\"</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">var</span> bt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsBytagname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tbt<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用这种形式也是可以给一个 DOM 元素添加上一个事件。这个也是<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2FDOM%2F50288%3Ffr%3Daladdin\"> DOM 0 级标准</a>。</p>\n<h4 id=\"以上的弊端\"><a class=\"markdownIt-Anchor\" href=\"#以上的弊端\">#</a> 以上的弊端</h4>\n<p>以上两种方式都是存在一个弊端的，就是一个元素只能添加一个事件。第一种就不用说了，写在行内就一个属性。至于第二种，有的网友可能会说我可以再写一个，比如：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"按钮\"</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">var</span> bt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    bt<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    bt<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/u7dGQvDbEuTR.gif\" alt=\"mark\"></p>\n<p>写是可以这么写。那么我们先来看一看这个写法的意思，这种写法的本质就是在一个对象上添加一个属性，就上面的例子，就是在 <code>bt</code>  这个对象上添加一个 <code>onclick</code>  属性。那么，如果在之后的代码中也存在 <code>bt.onclcik</code> ，只会吧前面的给覆盖了。所以这样的写法也只能添加一个事件。</p>\n<p>那么，问题来了。我要给一个元素（DOM 对象）添加两个甚至是多个事件，使用什么呢？此时，就需要使用 <code>addEventListener</code>  的方式来添加事件。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"按钮\"</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">var</span> bt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsBytagname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tbt<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\tbt<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/fH7NDlrt0vLr.gif\" alt=\"mark\"></p>\n<p>上面的方式就可以给一个 DOM 对象绑定一个或者是多个事件。<strong>强烈推荐使用这一种绑定事件的方式</strong>。 使用 <code>addEventListener</code>  的方式还可以拥有第三个参数。 <a href=\"https://www.runoob.com/jsref/met-element-addeventlistener.html\">参看</a></p>\n<p><strong>三个参数</strong> ：</p>\n<ol>\n<li>事件类型，<strong>不需要</strong>添加上 <code>on</code></li>\n<li>事件函数</li>\n<li>是否捕获（布尔值），默认是 <code>false</code> ，即不捕获，那就是冒泡。</li>\n</ol>\n<h3 id=\"捕获和冒泡\"><a class=\"markdownIt-Anchor\" href=\"#捕获和冒泡\">#</a> 捕获和冒泡</h3>\n<h4 id=\"捕获\"><a class=\"markdownIt-Anchor\" href=\"#捕获\">#</a> 捕获</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/VLE5T5uzApOX.png?imageslim\" alt=\"mark\"></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  a\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    b\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>c<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 捕获</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b-a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b-b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b-c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//运行结果：点击c时，上面的代码的执行顺序：b-a，b-b，b-c</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"冒泡\"><a class=\"markdownIt-Anchor\" href=\"#冒泡\">#</a> 冒泡</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/eVyMTBdrppfb.png?imageslim\" alt=\"mark\"></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">></span>\n    a\n    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"b\"</span><span class=\"token operator\">></span>\n        b\n        <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"c\"</span><span class=\"token operator\">></span>c<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n \t<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 冒泡</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m-a\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m-b\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m-c\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//运行结果：点击c时，上面的代码的执行顺序：m-c，m-b，m-a</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"停止传播\"><a class=\"markdownIt-Anchor\" href=\"#停止传播\">#</a> 停止传播</h4>\n<p>使用 <code>stopPropagation</code>  可以阻止事件的<strong>传播</strong>。不能使用 <code>return false</code>  ，阻止捕获也是一样，添加之后就不会在继续往下传递了。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 阻止冒泡</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m-c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此处阻止传播</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 此时的顺序：b-a,b-c,m-c。不会传递，后面的不会执行了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"关于使用addeventlistener\"><a class=\"markdownIt-Anchor\" href=\"#关于使用addeventlistener\">#</a> 关于使用 <code>addEventListener</code></h4>\n<p><strong>由于 <code>addEventListener</code>  单词太长：</strong> 所以封装一下：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ele<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"关于事件代理委托\"><a class=\"markdownIt-Anchor\" href=\"#关于事件代理委托\">#</a> 关于事件代理（委托）</h4>\n<p>如果你要给每一个 <code>li</code>  标签添加一个点击事件，弹出每一个 <code>li</code>  的索引值</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>list-1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>list-2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>list-3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>list-4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>闭包：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> oLis <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> oLis<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>oLis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因为你的 <code>li</code>  的个数可能发生改变，如果是这样的话，可能会出一些问题。</p>\n<p>事件代理代码：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> oBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>oBox<span class=\"token punctuation\">,</span> <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 判断点击的是li</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">==</span> <span class=\"token string\">\"LI\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样也是可以的，不过此时的 <code>addEvent</code>  函数点击的时候就需要在 <code>fn</code>  里面判断点击的是哪一个标签。为了更好的使用 <code>addEvent</code> ，我们可以改进一下</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 如果只有三个参数，那么3,4互换</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fn <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    fn <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">;</span>\n    selector <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  ele<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//  代理</span>\n      target <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 不代理</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这时点击 <code>li</code>  弹出 innerHTML 就可以这样实现：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>oBox<span class=\"token punctuation\">,</span> <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"总结-2\"><a class=\"markdownIt-Anchor\" href=\"#总结-2\">#</a> 总结：</h4>\n<ol>\n<li><strong>同时 存在捕获与冒泡时</strong> ，<strong>捕获的优先级是高于冒泡的</strong> 。</li>\n<li>没有捕获的时候谁在前面先执行谁</li>\n</ol>\n<p>如果要取消一个使用 <code>addEventListener</code>  绑定的事件函数，使用 <code>removeEventListener</code>  可以移除事件。</p>\n<h4 id=\"解答-3\"><a class=\"markdownIt-Anchor\" href=\"#解答-3\">#</a> 解答</h4>\n<ul>\n<li>编写一个通用的事件监听函数</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bindEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> seletor<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fn <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    fn <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">;</span>\n    seletor <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  elem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seletor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      target <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>seletor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>\n<p>描述事件冒泡的流程</p>\n<ul>\n<li>DOM 树形结构</li>\n<li>事件冒泡</li>\n<li>阻止冒泡</li>\n<li>冒泡的应用</li>\n</ul>\n</li>\n<li>\n<p>对于一个无线下拉加载图片的页面，如何给每个图片绑定事件</p>\n<ul>\n<li>使用代理</li>\n<li>知道代理的两个优点</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"重点总结-2\"><a class=\"markdownIt-Anchor\" href=\"#重点总结-2\">#</a> 重点总结</h4>\n<ul>\n<li>通用事件绑定</li>\n<li>事件冒泡</li>\n<li>代理</li>\n</ul>\n<h2 id=\"5-4-ajax\"><a class=\"markdownIt-Anchor\" href=\"#5-4-ajax\">#</a> 5-4 Ajax</h2>\n<blockquote>\n<p>题目</p>\n<p>知识点</p>\n<p>题目</p>\n</blockquote>\n<h3 id=\"题目-2\"><a class=\"markdownIt-Anchor\" href=\"#题目-2\">#</a> 题目</h3>\n<ul>\n<li>手动编写一个 ajax，不依赖第三方库</li>\n<li>跨域的几种实现方式</li>\n</ul>\n<h3 id=\"知识点-2\"><a class=\"markdownIt-Anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<ul>\n<li>XMLHttpRequest</li>\n<li>状态码说明</li>\n<li>跨域</li>\n</ul>\n<h4 id=\"xmlhttprequest\"><a class=\"markdownIt-Anchor\" href=\"#xmlhttprequest\">#</a> XMLHttpRequest</h4>\n<blockquote>\n<p>使用 XMLHttpRequest (XHR) 对象可以与服务器交互。您可以从 URL 获取数据，而无需让整个的页面刷新。这使得 Web 页面可以只更新页面的局部，而不影响用户的操作。XMLHttpRequest 在 <a href=\"https://developer.mozilla.org/en-US/docs/AJAX\">Ajax</a> 编程中被大量使用</p>\n<p>尽管名称如此，XMLHttpRequest 可以用于获取任何类型的数据，而不仅仅是 XML，它还支持 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP\">HTTP</a> 以外的协议 (包括文件和 ftp)。</p>\n<p>如果您的通信需要从服务器接收事件或消息数据，请考虑通过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource\"> <code>EventSource</code> </a> 接口使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events\">server-sent events</a>。对于 full-duplex 通信， <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\">WebSockets</a> 可能是更好的选择。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">可参考</a></p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false 使用异步</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//这里是函数异步执行，可参考之前 JS 基础中的异步 模块</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"ie-兼容性问题\"><a class=\"markdownIt-Anchor\" href=\"#ie-兼容性问题\">#</a> IE 兼容性问题</h4>\n<blockquote>\n<p><a href=\"https://www.w3cschool.cn/mlb2er/3miu1pxk.html\">有意向者可参考</a></p>\n</blockquote>\n<ul>\n<li>IE 低版本使用 ActiveXObject，和 W3C 标准不一样</li>\n<li>IE 低版本使用量非常少，很多网站都早已不支持</li>\n<li>建议对 IE 低版本的兼容性：<strong>了解即可，无需深究</strong> 。</li>\n<li>如果遇到对 IE 低版本要求苛刻的面试，果断放弃</li>\n</ul>\n<h4 id=\"readystate-状态码说明\"><a class=\"markdownIt-Anchor\" href=\"#readystate-状态码说明\">#</a> readyState 状态码说明</h4>\n<blockquote>\n<p>readyState 是 XMLHttpRequest 对象的一个属性，用来标识当前 XMLHttpRequest 对象处于什么状态。<br>\nreadyState 总共有 5 个状态值，分别为 0~4，每个值代表了不同的含义</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token number\">0</span>：未初始化，还没有调用 <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法\n<span class=\"token number\">1</span><span class=\"token function\">：载入，已调用send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法，XMLHttpRequest对象开始发送请求\n<span class=\"token number\">2</span><span class=\"token function\">：载入完成，send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法执行完成，已经接收到全部的相应内容\n<span class=\"token number\">3</span>：交互，正在解析响应内容\n<span class=\"token number\">4</span>：完成，响应内容解析完成，可以在客户端调用了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"status-状态码说明\"><a class=\"markdownIt-Anchor\" href=\"#status-状态码说明\">#</a> status 状态码说明</h4>\n<blockquote>\n<p>status 是 XMLHttpRequest 对象的一个属性，表示响应的 HTTP 状态码</p>\n<p><a href=\"https://www.cnblogs.com/liu-fei-fei/p/5618782.html\">详细参考</a></p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token number\">1</span>xx：信息响应类，表示接收到请求并且继续处理\n<span class=\"token number\">2</span>xx：处理成功响应类，表示动作被成功接收、理解和接受\n<span class=\"token number\">3</span>xx：重定向响应类，为了完成指定的动作，必须接受进一步处理\n<span class=\"token number\">4</span>xx：客户端错误，客户请求包含语法错误或者是不能正确执行\n<span class=\"token number\">5</span>xx：服务端错误，服务器不能正确执行一个正确的请求\n\n<span class=\"token number\">200</span>——交易成功\n<span class=\"token number\">404</span>——没有发现文件、查询或URl\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-5-跨域\"><a class=\"markdownIt-Anchor\" href=\"#5-5-跨域\">#</a> 5-5 跨域</h2>\n<blockquote>\n<p><strong>定义</strong> ：跨域是指从一个域名的网页去请求另一个域名的资源。<a href=\"http://xn--www-8p9d920c8x0a.baidu.com\">比如从 www.baidu.com</a> 页面去请求 <a href=\"http://www.google.com\">www.google.com</a> 的资源。但是一般情况下不能这么做，它是由浏览器的同源策略造成的，是浏览器对<a href=\"https://link.juejin.im?target=http%3A%2F%2Flib.csdn.net%2Fbase%2Fjavascript\"> JavaScript</a> 施加的安全限制。跨域的严格一点的定义是：只要 协议，域名，端口有任何一个的不同，就被当作是跨域</p>\n<p>** 所谓同源是指，域名，协议，端口均相同。** 这里说的 js 跨域是指通过 js 在不同的域之间进行数据传输或通信，比如用 ajax 向一个不同的域请求数据，或者通过 js 获取页面中不同域的框架中 (iframe) 的数据。</p>\n<p>概念：<strong>只要协议、域名、端口有任何一个不同</strong> ，都被当作是不同的域。算作 跨域。</p>\n<p><a href=\"https://segmentfault.com/a/1190000015597029\">参考</a></p>\n<p>http 默认端口：80</p>\n<p>https 默认端口：443</p>\n</blockquote>\n<h3 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\">#</a> 问题</h3>\n<ul>\n<li>说明什么是跨域</li>\n<li>JSONP</li>\n<li>服务器端设置 http header</li>\n</ul>\n<h4 id=\"什么是跨域\"><a class=\"markdownIt-Anchor\" href=\"#什么是跨域\">#</a> 什么是跨域</h4>\n<p><strong>跨域是</strong>指一个<strong>域</strong>下的文档或脚本试图去请求另一个<strong>域</strong>下的资源，这里<strong>跨域是</strong>广义的。 其实我们通常所说的<strong>跨域是</strong>狭义的，<strong>是</strong>由浏览器同源策略限制的一类请求场景。</p>\n<h4 id=\"可以跨域的三个标签\"><a class=\"markdownIt-Anchor\" href=\"#可以跨域的三个标签\">#</a> 可以跨域的三个标签</h4>\n<ul>\n<li>&lt;<strong>img src=xxx</strong> &gt; 用于打点统计，统计网站可能是其它域</li>\n<li>&lt;<strong>link href=xxxx</strong> &gt; 可以使用 CDN,CDN 也是其它域</li>\n<li>&lt;<strong>script src=xxx</strong> &gt; 可以使用 CDN, 可以用于 <strong>JSONP</strong></li>\n</ul>\n<h4 id=\"跨域注意事项\"><a class=\"markdownIt-Anchor\" href=\"#跨域注意事项\">#</a> 跨域注意事项</h4>\n<ul>\n<li>所有的跨域请求都必须经过信息提供方允许</li>\n<li>如果未经允许即可获取，那是浏览器同源策略出现漏洞</li>\n</ul>\n<h3 id=\"jsonp-实现原理\"><a class=\"markdownIt-Anchor\" href=\"#jsonp-实现原理\">#</a> JSONP 实现原理</h3>\n<blockquote>\n<p>jsonp 是一种跨域通信的手段</p>\n<p><a href=\"https://segmentfault.com/a/1190000007665361\">参考 1</a> <a href=\"https://github.com/qianlongo/zepto-analysis/issues/4\">参考 2</a></p>\n</blockquote>\n<p><strong>jsonp 是一种跨域通信的手段，它的原理其实很简单：</strong></p>\n<ol>\n<li>客户端利用 <code>script</code>  标签可以跨域请求资源的性质，向网页中动态插入 <code>script</code>  标签，来向服务端请求数据。</li>\n<li>服务端会解析请求的 <code>url</code> , 至少拿到一个回调函数 (比如 <code>callback=myCallback</code> ) 参数，之后将数据放入其中返回给客户端。</li>\n<li>当然 jsonp 不同于平常的 <code>ajax</code>  请求，它仅仅支持 get 类型的方式</li>\n</ol>\n<h4 id=\"实现流程\"><a class=\"markdownIt-Anchor\" href=\"#实现流程\">#</a> 实现流程</h4>\n<ol>\n<li>\n<p>设定一个 script 标签</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"http://jsonp.js?callback=xxx\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>callback 定义了一个函数名，而远程服务端通过调用指定的函数并传入参数来实现传递参数，将 <code>fn(response)</code>  传递回客户端</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$callback</span> <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'callback'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'callback'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token single-quoted-string string\">'callback'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'(.json_encode($data).)'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>客户端接收到返回的 js 脚本，开始解析和执行 <code>fn(response)</code></p>\n</li>\n</ol>\n<h4 id=\"服务端设置-http-header\"><a class=\"markdownIt-Anchor\" href=\"#服务端设置-http-header\">#</a> 服务端设置 http header</h4>\n<ul>\n<li>另外一个解决跨域的简洁方法，需要服务器端来做</li>\n<li>但是作为交互方，我们必须知道这个方法</li>\n<li>是将来解决跨域问题的一个趋势</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190718/YNGAeXPTUx6I.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"重点总结-3\"><a class=\"markdownIt-Anchor\" href=\"#重点总结-3\">#</a> 重点总结</h4>\n<ul>\n<li>XMLHttpRequest</li>\n<li>状态码说明</li>\n<li>跨域</li>\n</ul>\n<h2 id=\"5-6-存储\"><a class=\"markdownIt-Anchor\" href=\"#5-6-存储\">#</a> 5-6 存储</h2>\n<blockquote>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目-3\"><a class=\"markdownIt-Anchor\" href=\"#题目-3\">#</a> 题目</h3>\n<ul>\n<li>请描述一下 cookie，sessionStorage 和 localStorage 的区别？</li>\n</ul>\n<h3 id=\"知识点-3\"><a class=\"markdownIt-Anchor\" href=\"#知识点-3\">#</a> 知识点</h3>\n<ul>\n<li>cookie</li>\n<li>sessionStorage 和 localStorage</li>\n</ul>\n<h4 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\">#</a> cookie</h4>\n<blockquote>\n<p><a href=\"https://juejin.im/post/5b57dba3f265da0fb018741f\">可参考</a></p>\n</blockquote>\n<ul>\n<li>本身用于客户端和服务器端通信</li>\n<li>但是它有本地储存的功能，于是就被 <strong>借用</strong></li>\n<li>使用 document.cookie = … 获取和修改即可</li>\n</ul>\n<h4 id=\"cookie-用于储存的缺点\"><a class=\"markdownIt-Anchor\" href=\"#cookie-用于储存的缺点\">#</a> cookie 用于储存的缺点</h4>\n<ul>\n<li>\n<p><strong>储存量太小</strong> ，Cookie` 数量和长度的限制。每个 domain 最多只能有 20 条 cookie，每个 cookie 长度不能超过 4KB，否则会被截掉。在当今新的浏览器和客户端设备版本中，支持 8192 字节的 Cookie 大小已愈发常见。</p>\n</li>\n<li>\n<p>所有 http 请求都带着，会<strong>影响获取资源的效率</strong></p>\n</li>\n<li>\n<p>用户配置为禁用。有些用户禁用了浏览器或客户端设备接收 Cookie 的能力，因此限制了这一功能</p>\n</li>\n<li>\n<p>由于在 HTTP 请求中的 cookie 是明文传递的，潜在的安全风险，Cookie 可能会被篡改</p>\n</li>\n<li>\n<p>有些状态不可能保存在客户端</p>\n</li>\n<li>\n<p>cookie 会被附加在每个 HTTP 请求中，所以无形中增加了流量</p>\n</li>\n<li>\n<p>cookie 一般不可跨域使用</p>\n</li>\n<li>\n<p>没有封装好的 setCookie 和 getCookie 方法，需要开发者自省封装</p>\n</li>\n</ul>\n<h3 id=\"sessionstorage-和-localstorage\"><a class=\"markdownIt-Anchor\" href=\"#sessionstorage-和-localstorage\">#</a> sessionStorage 和 localStorage</h3>\n<ul>\n<li>HTML5 专门为储存而设计，最大容量 5M</li>\n<li>API 简答易用</li>\n<li>localStorage.setItem(key, value); localStorage.getItem(key, value);</li>\n</ul>\n<h4 id=\"区别\"><a class=\"markdownIt-Anchor\" href=\"#区别\">#</a> 区别：</h4>\n<p><strong>localStorage</strong> 生命周期是永久，这意味着除非用户显示在浏览器提供的 UI 上清除 localStorage 信息，否则这些信息将永远存在。</p>\n<p><strong>sessionStorage</strong> 生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过 sessionStorage 存储的数据也就被清空了。</p>\n<p>不同浏览器无法共享 localStorage 或 sessionStorage 中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享 sessionStorage 的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个 iframe 标签且他们属于同源页面，那么他们之间是可以共享 sessionStorage 的。</p>\n<h4 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h4>\n<ul>\n<li>iOS safari 隐藏模式下</li>\n<li>localStorage.getItem 会报错</li>\n<li>建议 统一使用 try-catch 封装</li>\n</ul>\n<h3 id=\"解答-4\"><a class=\"markdownIt-Anchor\" href=\"#解答-4\">#</a> 解答</h3>\n<ul>\n<li>请描述一下 cookie，sessionStorage 和 localStorage 的区别？\n<ul>\n<li>容量</li>\n<li>是否携带到 ajax 中</li>\n<li>API 易用性</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "DOM",
                "BOM",
                "事件绑定",
                "ajax 请求",
                "储存"
            ]
        }
    ]
}