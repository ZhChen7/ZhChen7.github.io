<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>sunflower • Posts by &#34;es6 语法&#34; category</title>
        <link>http://example.com</link>
        <description>周琛的博客</description>
        <language>en</language>
        <pubDate>Mon, 23 Mar 2020 17:38:45 +0800</pubDate>
        <lastBuildDate>Mon, 23 Mar 2020 17:38:45 +0800</lastBuildDate>
        <category>blog</category>
        <category>个人博客</category>
        <category>rem</category>
        <category>less</category>
        <category>art-template</category>
        <category>算法面试</category>
        <category>算法</category>
        <category>大 O？</category>
        <category>复杂度分析</category>
        <category>大二</category>
        <category>数据库实训</category>
        <category>IDE</category>
        <category>Git</category>
        <category>模块化</category>
        <category>构建工具</category>
        <category>上线和回滚</category>
        <category>ES6 模块化语法</category>
        <category>babel</category>
        <category>webpack</category>
        <category>rollup</category>
        <category>ES6</category>
        <category>hybrid</category>
        <category>虚拟 DOM</category>
        <category>知识点概述</category>
        <category>JS</category>
        <category>实用工具</category>
        <category>面试全面总结</category>
        <category>JS 三座大山</category>
        <category>学习实训</category>
        <category>性能优化</category>
        <category>加载过程</category>
        <category>promise</category>
        <category>异步解决方案</category>
        <category>回调地狱</category>
        <category>React</category>
        <category>React源码</category>
        <category>Vue3</category>
        <category>vue</category>
        <category>跑马灯</category>
        <category>父子组件间通信</category>
        <category>路由</category>
        <category>监听事件（keyup ，watch ，computed ）</category>
        <category>nrm</category>
        <category>Mint-UI</category>
        <category>MUI</category>
        <category>MVVM</category>
        <category>响应式、模板解析、渲染</category>
        <category>微信小程序</category>
        <category>单线程</category>
        <category>event loop</category>
        <category>异步的 Deferred</category>
        <category>Promise</category>
        <category>html</category>
        <category>hexo</category>
        <category>redux</category>
        <category>UTC时间问题</category>
        <category>正则表达式</category>
        <category>虚拟DOM</category>
        <category>博文</category>
        <category>React-Router</category>
        <category>React-Hooks</category>
        <category>DOM</category>
        <category>BOM</category>
        <category>事件绑定</category>
        <category>ajax 请求</category>
        <category>储存</category>
        <category>进程调度</category>
        <category>过滤器</category>
        <category>按键修饰符</category>
        <category>指令</category>
        <category>生命周期</category>
        <category>过渡效果</category>
        <category>组件</category>
        <category>webpack 后续问题</category>
        <category>数组</category>
        <category>API</category>
        <category>跨域</category>
        <category>动画</category>
        <category>事件</category>
        <category>React基础面试题-50</category>
        <category>数组相关操作</category>
        <category>手撕代码</category>
        <category>牛人面试题</category>
        <item>
            <guid isPermalink="true">http://example.com/2020/03/23/getOfferES6/</guid>
            <title>ES6 知识点</title>
            <link>http://example.com/2020/03/23/getOfferES6/</link>
            <category>ES6</category>
            <category>面试全面总结</category>
            <pubDate>Mon, 23 Mar 2020 17:38:45 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;面试专题总结es6-知识点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#面试专题总结es6-知识点&#34;&gt;#&lt;/a&gt; 面试专题总结：ES6 知识点&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;希望读者依此构建自己的知识树（思维导图）&lt;/p&gt;
&lt;p&gt;偷懒一下：可参考我自己总结思维导图 : &lt;a href=&#34;https://github.com/ZhChen7/Interview-mind-map&#34;&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;附带：高频面试题积累文档。 来自于（学长、牛客网等平台）&lt;/p&gt;
&lt;p&gt;自己开发的博客地址：&lt;a href=&#34;http://zxinc520.com/&#34;&gt;zxinc520.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github 地址: &lt;a href=&#34;https://github.com/ZhChen7&#34;&gt;点击&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;此篇 js - 【ES6 知识总结】 知识点： 全部弄懂了，面试很容易。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;详细可参考： &lt;a href=&#34;https://es6.ruanyifeng.com/&#34;&gt;ECMAScript 6 入门&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1-es6-是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-es6-是什么&#34;&gt;#&lt;/a&gt; 1、es6 是什么&lt;/h3&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。 ECMA 是标准，Javascript 是 ECMA 的实现。因为 js 也是一种语言，但凡语言都有一套标准，而 ECMA 就是 javascript 的标准。在 2015 年正式发布了 ECMAscript6.0，简称 ES6，又称为 ECMAscript2015。&lt;/p&gt;
&lt;h3 id=&#34;2-var-let-const声明方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-var-let-const声明方式&#34;&gt;#&lt;/a&gt; 2、var、let、const（声明方式）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类别
&lt;ol&gt;
&lt;li&gt;变量提升&lt;/li&gt;
&lt;li&gt;暂时性死区&lt;/li&gt;
&lt;li&gt;重复声明&lt;/li&gt;
&lt;li&gt;块作用域有效&lt;/li&gt;
&lt;li&gt;初始值&lt;/li&gt;
&lt;li&gt;重新赋值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;区别
&lt;ol&gt;
&lt;li&gt;let/const 定义的变量不会出现变量提升，而 var 定义的变量会提升。&lt;/li&gt;
&lt;li&gt;相同作用域中，let 和 const 不允许重复声明，var 允许重复声明。&lt;/li&gt;
&lt;li&gt;const 声明变量时必须设置初始值&lt;/li&gt;
&lt;li&gt;const 声明一个只读的常量，这个常量不可改变&lt;/li&gt;
&lt;li&gt;let/const 声明的变量仅在块级作用域中有效。而 var 声明的变量在块级作用域外仍能访问到。&lt;/li&gt;
&lt;li&gt;顶层作用域中 var 声明的变量挂在 window 上 (浏览器环境)&lt;/li&gt;
&lt;li&gt;let/const 有暂时性死区的问题，即 let/const 声明的变量，在定义之前都是不可用的。如果使用会抛出错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-变量的解构赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-变量的解构赋值&#34;&gt;#&lt;/a&gt; 3、 变量的解构赋值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数组解构赋值&lt;/p&gt;
&lt;p&gt;let [aa, bb, cc] = [0, 1, 2];&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象解构赋值&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; cnName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; enName &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  id&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;151521574&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  cnName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;张生&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  enName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Ronnie&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cnName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; enName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//&#39;张生&#39;，&#39;Ronnie&#39;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-箭头函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-箭头函数&#34;&gt;#&lt;/a&gt; 4、箭头函数&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;es6 之前的函数的 this 指向调用函数时所在的对象，而箭头函数的 this 指向函数定义时所在的对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;箭头函数及其-this-问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#箭头函数及其-this-问题&#34;&gt;#&lt;/a&gt; 箭头函数及其 this 问题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;this 对象的指向是可变的，但是在箭头函数中，它是固定的。&lt;/li&gt;
&lt;li&gt;this 指向的固定化，并不是因为箭头函数内部有绑定 this 的机制，实际原因是箭头函数根本没有自己的 this，导致内部的 this 就是外层代码块的 this。正是因为它没有 this，所以也就不能用作构造函数。&lt;/li&gt;
&lt;li&gt;箭头函数里面根本没有自己的 this，而是引用外层的 this。&lt;/li&gt;
&lt;li&gt;由于箭头函数没有自己的 this，所以当然也就不能用 call ()、apply ()、bind () 这些方法去改变 this 的指向&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5-symbol&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-symbol&#34;&gt;#&lt;/a&gt; 5、Symbol&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是什么？&lt;/p&gt;
&lt;p&gt;symbols 是一种无法被重建的基本类型。这时 symbols 有点类似与对象创建的实例互相不相等的情况，但同时 symbols 又是一种无法被改变的基本类型数据。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; s1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Symbol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; s2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Symbol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s1 &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; s2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// false&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;symbols 作为对象的属性&lt;/li&gt;
&lt;li&gt;阻止对象属性名冲突 （扩展对象属性很有用）&lt;/li&gt;
&lt;li&gt;模拟私有属性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-module-模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-module-模块&#34;&gt;#&lt;/a&gt; 6、Module 模块&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;可从 IIFE、AMD、CMD、CommonJS、UMD、webpack (require.ensure)、ES Module、&amp;lt;&lt;em&gt;script type=“module”&lt;/em&gt; &amp;gt; 这几个角度考虑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt; ：模块化主要是用来抽离公共代码，隔离作用域，避免变量冲突等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;模块化发展历程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#模块化发展历程&#34;&gt;#&lt;/a&gt; 模块化发展历程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;IIFE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用自执行函数来编写模块化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;p&gt;在一个单独的函数作用域中执行代码，避免变量冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AMD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 requireJS 来编写模块化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点：依赖必须提前声明好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单实现&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token function&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;./index.js&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// code 就是index.js 返回的内容&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 seaJS 来编写模块化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点：支持动态引入依赖文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单实现&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token function&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;require&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; exports&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; module&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; indexCode &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;./index.js&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CommonJS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nodejs 中自带的模块化&lt;/li&gt;
&lt;li&gt;var fs = require(‘fs’);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UMD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;兼容 AMD，CommonJS 模块化语法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;webpack(require.ensure)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;webpack 2.x 版本中的代码分割&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ES Modules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6 引入的模块化，支持 import 来引入另一个 js&lt;/li&gt;
&lt;li&gt;import a from ‘a’;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;61-amd-与-cmd-的比较&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#61-amd-与-cmd-的比较&#34;&gt;#&lt;/a&gt; 6.1、AMD 与 CMD 的比较&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;p&gt;AMD 和 CMD 都是用于浏览器端的模块规范&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AMD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AMD 是 RequireJS 在推广过程中对模块定义的规范化产出&lt;/li&gt;
&lt;li&gt;其主要内容就是定义了 define 函数该如何书写，只要你按照这个规范书写模块和依赖，require.js 就能正确的进行解析。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMD 其实就是 SeaJS 在推广过程中对模块定义的规范化产出&lt;/li&gt;
&lt;li&gt;主要内容就是描述该如何定义模块，如何引入模块，如何导出模块，只要你按照这个规范书写代码，sea.js 就能正确的进行解析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AMD 与 CMD 的区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AMD 推崇依赖前置，CMD 推崇依赖就近&lt;/li&gt;
&lt;li&gt;AMD 是提前执行，CMD 是延迟执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;62-commonjs-与-amd-的比较&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#62-commonjs-与-amd-的比较&#34;&gt;#&lt;/a&gt; 6.2、CommonJS 与 AMD 的比较&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在服务器端比如 node，采用的则是 CommonJS 规范。&lt;/p&gt;
&lt;p&gt;AMD 和 CMD 都是用于浏览器端的模块规范&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AMD 规范则是非同步加载模块，允许指定回调函数。&lt;/p&gt;
&lt;p&gt;由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用 AMD 规范。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;63-es6-与-commonjs-的比较&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#63-es6-与-commonjs-的比较&#34;&gt;#&lt;/a&gt; 6.3、ES6 与 CommonJS 的比较&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;注意！浏览器加载 ES6 模块，也使用 &amp;lt;&lt;em&gt;script&lt;/em&gt; &amp;gt; 标签，但是要加入 type=“module” 属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。&lt;/li&gt;
&lt;li&gt;CommonJS 模块是运行时加载，ES6 模块是编译时输出接口&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;7-异步编程-6-种解决方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-异步编程-6-种解决方案&#34;&gt;#&lt;/a&gt; 7、异步编程 6 种解决方案&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;回调函数（Callback）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;回调函数是异步操作最基本的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ajax(url, () =&amp;gt; {&lt;/p&gt;
&lt;p&gt;​ // 处理逻辑&lt;/p&gt;
&lt;p&gt;})&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容易写出回调地狱（Callback hell）&lt;/li&gt;
&lt;li&gt;不能使用 try catch 捕获错误，不能直接 return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件监听&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;f1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;done&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; f2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发布订阅&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;jQuery&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;done&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; f2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;promise 是目前 JS 异步编程的主流解决方案，遵循 Promises/A+ 方案。Promise 用于异步操作，表示一个还未完成但是预期会完成的操作。&lt;/li&gt;
&lt;li&gt;Promise 是 ES6 引入的一个新的对象，他的主要作用是用来解决 JS 异步机制里，回调机制产生的 “回调地狱”。它并不是什么突破性的 API，只是封装了异步回调形式，使得异步回调可以写的更加优雅，可读性更高，而且可以链式调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;剖析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;promise 本身相当于一个状态机，拥有三种状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pending&lt;/li&gt;
&lt;li&gt;fulfilled&lt;/li&gt;
&lt;li&gt;rejected&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个 promise 对象初始化时的状态是 pending，调用了 resolve 后会将 promise 的状态扭转为 fulfilled，调用 reject 后会将 promise 的状态扭转为 rejected，这两种扭转一旦发生便不能再扭转该 promise 到其他状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise 如何使用&lt;/p&gt;
&lt;p&gt;构造一个 promise 对象，并将要执行的异步函数传入到 promise 的参数中执行，并且在异步执行结束后调用 resolve ( ) 函数，就可以在 promise 的 then 方法中获取到异步函数的执行结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise 原型上的方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Promise.prototype.then(onFulfilled, onRejected)&lt;/li&gt;
&lt;li&gt;Promise.prototype.catch(onRejected)&lt;/li&gt;
&lt;li&gt;Promise.prototype.finally(onFinally)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise 静态方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Promise.all()&lt;/p&gt;
&lt;p&gt;Promise.all 接收一个 promise 对象数组作为参数，只有全部的 promise 都已经变为 fulfilled 状态后才会继续后面的处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise.race()&lt;/p&gt;
&lt;p&gt;这个函数会在 promises 中第一个 promise 的状态扭转后就开始后面的处理（fulfilled、rejected 均可）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise.resolve()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise.reject()&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;p&gt;将异步操作以同步操作的流程表达出来，promise 链式调用，更好地解决了层层嵌套的回调地狱&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能取消执行。&lt;/li&gt;
&lt;li&gt;无法获取当前执行的进度信息（比如，要在用户界面展示进度条）。&lt;/li&gt;
&lt;li&gt;外部无法捕捉 Promise 内部抛出的错误&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generator 函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是什么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。&lt;/li&gt;
&lt;li&gt;如果说 JavaScript 是 ECMAScript 标准的一种具体实现、Iterator 遍历器是 Iterator 的具体实现，那么 Generator 函数可以说是 Iterator 接口的具体实现方式。&lt;/li&gt;
&lt;li&gt;Generator 函数可以通过配合 Thunk 函数更轻松更优雅的实现异步编程和控制流管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行 Generator 函数会返回一个遍历器对象，每一次 Generator 函数里面的 yield 都相当一次遍历器对象的 next () 方法，并且可以通过 next (value) 方法传入自定义的 value, 来改变 Generator 函数的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能封装异步任务的根本原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最大特点就是可以交出函数的执行权（即暂停执行）。Generator 函数可以暂停执行和恢复执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;function 关键字与函数名之间有一个星号&lt;/li&gt;
&lt;li&gt;函数体内部使用 yield 表达式，定义不同的内部状态（yield 在英语里的意思就是 “产出”）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过程&lt;/p&gt;
&lt;p&gt;Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generator 及其异步方面的应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generator 函数将 JavaScript 异步编程带入了一个全新的阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;p&gt;调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的 next 方法，就会返回一个有着 value 和 done 两个属性的对象。value 属性表示当前的内部状态的值，是 yield 表达式后面那个表达式的值；done 属性是一个布尔值，表示是否遍历结束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;demo&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; fetch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;node-fetch&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;gen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;https://api.github.com/users/github&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bio&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;async 和 await&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;含义&lt;/p&gt;
&lt;p&gt;ES2017 标准引入了 async 函数，使得异步操作变得更加方便。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一句话，它就是 Generator 函数的语法糖。&lt;/li&gt;
&lt;li&gt;一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。&lt;/li&gt;
&lt;li&gt;async 函数可以理解为内置自动执行器的 Generator 函数语法糖，它配合 ES6 的 Promise 近乎完美的实现了异步编程解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相对于 Promise，优势体现在&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;处理 then 的调用链，能够更清晰准确的写出代码&lt;/li&gt;
&lt;li&gt;并且也能优雅地解决回调地狱问题&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相对 Generator 函数，体现在以下 4 点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内置执行器。 Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行&lt;/li&gt;
&lt;li&gt;更好的语义。 async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果&lt;/li&gt;
&lt;li&gt;更广的适用性。 co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）&lt;/li&gt;
&lt;li&gt;返回值是 Promise。async 函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用 then 方法指定下一步的操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;p&gt;当然 async/await 函数也存在一些缺点，因为 await 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 await 会导致性能上的降低，代码没有依赖性的话，完全可以使用 Promise.all 的方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;JS 异步编程进化史：callback -&amp;gt; promise -&amp;gt; generator -&amp;gt; async + await&lt;/li&gt;
&lt;li&gt;async/await 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里&lt;/li&gt;
&lt;li&gt;async/await 可以说是异步终极解决方案了&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;8-class&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-class&#34;&gt;#&lt;/a&gt; 8、Class&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ES6 的 class 可以看作只是一个 ES5 生成实例对象的构造函数的语法糖。它参考了 java 语言，定义了一个类的概念，让对象原型写法更加清晰，对象实例化更像是一种面向对象编程。Class 类可以通过 extends 实现继承。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;super 关键字的使用&lt;/li&gt;
&lt;li&gt;static 关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ES5/ES6 的继承除了写法以外还有什么区别？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;class 声明会提升，但不会初始化赋值。Foo 进入暂时性死区，类似于 let、const 声明变量。&lt;/li&gt;
&lt;li&gt;class 声明内部会启用严格模式&lt;/li&gt;
&lt;li&gt;class 的所有方法（包括静态方法和实例方法）都是不可枚举的&lt;/li&gt;
&lt;li&gt;class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有 [[construct]]，不能使用 new 来调用&lt;/li&gt;
&lt;li&gt;必须使用 new 调用 class&lt;/li&gt;
&lt;li&gt;class 内部无法重写类名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ES5 的继承，实质是先创造子类的实例对象 this，然后再将父类的方法添加到 this 上面。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到 this 上面（所以必须先调用 super 方法），然后再用子类的构造函数修改 this&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;p&gt;但是某些时候，我们使用 es6 的类可以让我们的代码的可读性更高&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;9-set-和-map&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-set-和-map&#34;&gt;#&lt;/a&gt; 9、Set 和 Map&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Set
&lt;ul&gt;
&lt;li&gt;是什么
&lt;ul&gt;
&lt;li&gt;Set 是一种叫做集合的数据结构&lt;/li&gt;
&lt;li&gt;Set 是 ES6 引入的一种类似 Array 的新的数据结构，Set 实例的成员类似于数组 item 成员，区别是 Set 实例的成员都是唯一，不重复的。这个特性可以轻松地实现数组去重。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用场景
&lt;ul&gt;
&lt;li&gt;数组去重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特点
&lt;ol&gt;
&lt;li&gt;成员唯一、无序且不重复&lt;/li&gt;
&lt;li&gt;[value, value]，键值与键名是一致的（或者说只有键值，没有键名）&lt;/li&gt;
&lt;li&gt;可以遍历，方法有：add、delete、has&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WeakSet
&lt;ul&gt;
&lt;li&gt;特点
&lt;ol&gt;
&lt;li&gt;成员都是对象&lt;/li&gt;
&lt;li&gt;成员都是弱引用，可以被垃圾回收机制回收，可以用来保存 DOM 节点，不容易造成内存泄漏&lt;/li&gt;
&lt;li&gt;不能遍历，方法有 add、delete、has&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Map
&lt;ul&gt;
&lt;li&gt;是什么
&lt;ul&gt;
&lt;li&gt;Map 是一种叫做字典的数据结构&lt;/li&gt;
&lt;li&gt;Map 是 ES6 引入的一种类似 Object 的新的数据结构，Map 可以理解为是 Object 的超集，打破了以传统键值对形式定义对象，对象的 key 不再局限于字符串，也可以是 Object。可以更加全面的描述对象的属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用场景
&lt;ul&gt;
&lt;li&gt;数据存储&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;本质上是键值对的集合，类似集合&lt;/li&gt;
&lt;li&gt;可以遍历，方法很多可以跟各种数据格式转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WeakMap
&lt;ul&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;只接受对象作为键名（null 除外），不接受其他类型的值作为键名&lt;/li&gt;
&lt;li&gt;键名是弱引用，键值可以是任意的，键名所指向的对象可以被垃圾回收，此时键名是无效的&lt;/li&gt;
&lt;li&gt;不能遍历，方法有 get、set、has、delete&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set 和 Map
&lt;ul&gt;
&lt;li&gt;Set 和 Map 主要的应用场景在于数组去重和数据存储&lt;/li&gt;
&lt;li&gt;原来 Set 是一种叫做集合的数据结构，Map 是一种叫做字典的数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set 与 WeakSet 区别
&lt;ol&gt;
&lt;li&gt;WeakSet 只能存放对象&lt;/li&gt;
&lt;li&gt;WeakSet 不支持遍历，没有 size 属性&lt;/li&gt;
&lt;li&gt;WeakSet 存放的对象不会计入到对象的引用技术，因此不会影响 GC 的回收&lt;/li&gt;
&lt;li&gt;WeakSet 存在的对象如果在外界消失了，那么在 WeakSet 里面也会不存在&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Map 与 WeakMap 区别
&lt;ol&gt;
&lt;li&gt;WeakMap 只能接受对象作为键名字 (null 除外)&lt;/li&gt;
&lt;li&gt;WeakMap 键名指向对象不会计入对象的引用数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10-es6-对-string-字符串类型做的常用升级优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-es6-对-string-字符串类型做的常用升级优化&#34;&gt;#&lt;/a&gt; 10、ES6 对 String 字符串类型做的常用升级优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化部分
&lt;ul&gt;
&lt;li&gt;ES6 新增了字符串模板，在拼接大段字符串时，用反斜杠 (`) 取代以往的字符串相加的形式，能保留所有空格和换行，使得字符串拼接看起来更加直观，更加优雅。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;升级部分
&lt;ul&gt;
&lt;li&gt;ES6 在 String 原型上新增了 includes () 方法，用于取代传统的只能用 indexOf 查找包含字符的方法 (indexOf 返回 - 1 表示没查到不如 includes 方法返回 false 更明确，语义更清晰), 此外还新增了 startsWith (), endsWith (), padStart (),padEnd (),repeat () 等方法，可方便的用于查找，补全字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11-es6-对-number-数字类型做的常用升级优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-es6-对-number-数字类型做的常用升级优化&#34;&gt;#&lt;/a&gt; 11、ES6 对 Number 数字类型做的常用升级优化？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化部分
&lt;ul&gt;
&lt;li&gt;ES6 在 Number 原型上新增了 isFinite (), isNaN () 方法，用来取代传统的全局 isFinite (), isNaN () 方法检测数值是否有限、是否是 NaN。ES5 的 isFinite (), isNaN () 方法都会先将非数值类型的参数转化为 Number 类型再做判断，这其实是不合理的，最造成 isNaN (‘NaN’) === true 的奇怪行为–&#39;NaN’是一个字符串，但是 isNaN 却说这就是 NaN。而 Number.isFinite () 和 Number.isNaN () 则不会有此类问题 (Number.isNaN (‘NaN’) === false)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;升级部分
&lt;ul&gt;
&lt;li&gt;ES6 在 Math 对象上新增了 Math.cbrt ()，trunc ()，hypot () 等等较多的科学计数法运算方法，可以更加全面的进行立方根、求和立方根等等科学计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-es6-对-array-数组类型做的常用升级优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-es6-对-array-数组类型做的常用升级优化&#34;&gt;#&lt;/a&gt; 12、ES6 对 Array 数组类型做的常用升级优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化部分
&lt;ul&gt;
&lt;li&gt;数组解构赋值。ES6 可以直接以 let [a,b,c] = [1,2,3] 形式进行变量赋值，在声明较多变量时，不用再写很多 let (var), 且映射关系清晰，且支持赋默认值&lt;/li&gt;
&lt;li&gt;扩展运算符。ES6 新增的扩展运算符 (…)(重要), 可以轻松的实现数组和松散序列的相互转化，可以取代 arguments 对象和 apply 方法，轻松获取未知参数个数情况下的参数集合。（尤其是在 ES5 中，arguments 并不是一个真正的数组，而是一个类数组的对象，但是扩展运算符的逆运算却可以返回一个真正的数组）。扩展运算符还可以轻松方便的实现数组的复制和解构赋值（let a = [2,3,4]; let b = […a]）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;升级部分
&lt;ul&gt;
&lt;li&gt;ES6 在 Array 原型上新增了 find () 方法，用于取代传统的只能用 indexOf 查找包含数组项目的方法，且修复了 indexOf 查找不到 NaN 的 bug ([NaN].indexOf (NaN) === -1). 此外还新增了 copyWithin (), includes (), fill (),flat () 等方法，可方便的用于字符串的查找，补全，转换等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-es6-对-object-类型做的常用升级优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-es6-对-object-类型做的常用升级优化&#34;&gt;#&lt;/a&gt; 13、ES6 对 Object 类型做的常用升级优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优化部分&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象属性变量式声明。ES6 可以直接以变量形式声明对象属性或者方法，。比传统的键值对形式声明更加简洁，更加方便，语义更加清晰。&lt;/li&gt;
&lt;li&gt;对象的解构赋值&lt;/li&gt;
&lt;li&gt;对象的扩展运算符 (…)&lt;/li&gt;
&lt;li&gt;super 关键字。ES6 在 Class 类里新增了类似 this 的关键字 super。同 this 总是指向当前函数所在的对象不同，super 关键字总是指向当前函数所在对象的原型对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;升级部分&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ES6 在 Object 原型上新增了 is () 方法，做两个目标对象的相等比较，用来完善’=&lt;mark&gt;‘方法。’&lt;/mark&gt;=&#39; 方法中 NaN === NaN //false 其实是不合理的，&lt;a href=&#34;http://Object.is&#34;&gt;Object.is&lt;/a&gt; 修复了这个小 bug。(&lt;a href=&#34;http://Object.is&#34;&gt;Object.is&lt;/a&gt;(NaN, NaN) // true)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ES6 在 Object 原型上新增了 assign () 方法，用于对象新增属性或者多个对象合并。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; source1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; b&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; source2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; c&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;assign&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; source1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; source2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
target&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// &amp;#123;a:1, b:2, c:3&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ES6 在 Object 原型上新增了 getOwnPropertyDescriptors () 方法，此方法增强了 ES5 中 getOwnPropertyDescriptor () 方法，可以获取指定对象所有自身属性的描述对象。结合 defineProperties () 方法，可以完美复制对象，包括复制 get 和 set 属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ES6 在 Object 原型上新增了 getPrototypeOf () 和 setPrototypeOf () 方法，用来获取或设置当前对象的 prototype 对象。获取或设置当前对象的 prototype 对象时，都应该采用 ES6 新增的标准用法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ES6 在 Object 原型上还新增了 Object.keys ()，Object.values ()，Object.entries () 方法，用来获取对象的所有键、所有值和所有键值对数组。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;14-es6-对-function-函数类型做的常用升级优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14-es6-对-function-函数类型做的常用升级优化&#34;&gt;#&lt;/a&gt; 14、ES6 对 Function 函数类型做的常用升级优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优化部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;箭头函数 (核心)。箭头函数里没有自己的 this, 这改变了以往 JS 函数中最让人难以理解的 this 运行机制
&lt;ol&gt;
&lt;li&gt;箭头函数内的 this 指向的是函数定义时所在的对象，而不是函数执行时所在的对象。&lt;/li&gt;
&lt;li&gt;箭头函数不能用作构造函数，因为它没有自己的 this，无法实例化。&lt;/li&gt;
&lt;li&gt;也是因为箭头函数没有自己的 this, 所以箭头函数 内也不存在 arguments 对象。（可以用扩展运算符代替）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;升级部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ES6 新增了双冒号运算符，用来取代以往的 bind，call, 和 apply (浏览器暂不支持，Babel 已经支持转码)&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;foo&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;bar&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;// 等同于&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;foo&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

foo&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;// 等同于&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;foo&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arguments&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;15-proxy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#15-proxy&#34;&gt;#&lt;/a&gt; 15、Proxy&lt;/h3&gt;
&lt;p&gt;Proxy 是 ES6 新增的一个构造函数，这个词的原意是代理，用在这里表示由它来 “代理” 某些操作，可以译为 “代理器”。Proxy 可以理解成，在目标对象之前架设一层 “拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。&lt;/p&gt;
&lt;h3 id=&#34;16-reflect&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#16-reflect&#34;&gt;#&lt;/a&gt; 16、Reflect&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;是什么
&lt;ul&gt;
&lt;li&gt;Reflect 对象与 Proxy 对象一样，也是 ES6 为了操作对象而提供的新 API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用
&lt;ol&gt;
&lt;li&gt;一是将原生的一些零散分布在 Object、Function 或者全局函数里的方法 (如 apply、delete、get、set 等等)，统一整合到 Reflect 上，这样可以更加方便更加统一的管理一些原生 API。&lt;/li&gt;
&lt;li&gt;其次就是因为 Proxy 可以改写默认的原生 API，如果一旦原生 API 别改写可能就找不到了，所以 Reflect 也可以起到备份原生 API 的作用，使得即使原生 API 被改写了之后，也可以在被改写之后的 API 用上默认的 API。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;17-iterator&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#17-iterator&#34;&gt;#&lt;/a&gt; 17、Iterator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;是什么
&lt;ul&gt;
&lt;li&gt;一种设计标准，来统一所有可遍历类型的遍历方式。Iterator 正是这样一种标准。或者说是一种规范理念&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解决的问题
&lt;ul&gt;
&lt;li&gt;Set、Map 都不能用 for 循环遍历，解决这个问题有两种方案，一种是为 Set、Map 单独新增一个用来遍历的 API，另一种是为 Set、Map、Array、Object 新增一个统一的遍历 API，显然，第二种更好，ES6 也就顺其自然的需要一种设计标准，来统一所有可遍历类型的遍历方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iterator 标准的具体实现
&lt;ul&gt;
&lt;li&gt;Iterator 标准的具体实现是 Iterator 遍历器。Iterator 标准规定，所有部署了 key 值为 [Symbol.iterator]，且 [Symbol.iterator] 的 value 是标准的 Iterator 接口函数 (标准的 Iterator 接口函数：该函数必须返回一个对象，且对象中包含 next 方法，且执行 next () 能返回包含 value/done 属性的 Iterator 对象) 的对象，都称之为可遍历对象，next () 后返回的 Iterator 对象也就是 Iterator 遍历器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;18-forin-和-forof-有什么区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#18-forin-和-forof-有什么区别&#34;&gt;#&lt;/a&gt; 18、for…in 和 for…of 有什么区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ES6 规定，有所部署了载了 Iterator 接口的对象 (可遍历对象) 都可以通过 for…of 去遍历，而 for…in 仅仅可以遍历对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 for…of 的好处&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这也就意味着，数组也可以用 for…of 遍历，这极大地方便了数组的取值，且避免了很多程序用 for…in 去遍历数组的恶习。&lt;/p&gt;
&lt;p&gt;上面提到的扩展运算符本质上也就是 for…of 循环的一种实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;19-module-export-import&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#19-module-export-import&#34;&gt;#&lt;/a&gt; 19、module、export、import&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;module、export、import 是 ES6 用来统一前端模块化方案的设计思路和实现方案&lt;/li&gt;
&lt;li&gt;作用
&lt;ul&gt;
&lt;li&gt;export、import 的出现统一了前端模块化的实现方案，整合规范了浏览器 / 服务端的模块化方法，用来取代传统的 AMD/CMD、requireJS、seaJS、commondJS 等等一系列前端模块不同的实现方案，使前端模块化更加统一规范，JS 也能更加能实现大型的应用程序开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意
&lt;ul&gt;
&lt;li&gt;import 引入的模块是静态加载（编译阶段加载）而不是动态加载（运行时加载）&lt;/li&gt;
&lt;li&gt;import 引入 export 导出的接口值是动态绑定关系，即通过该接口，可以取到模块内部实时的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;20-iterator-和-forofiterator-遍历器的实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-iterator-和-forofiterator-遍历器的实现&#34;&gt;#&lt;/a&gt; 20、 Iterator 和 for…of（Iterator 遍历器的实现）&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//自定义迭代器&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;makeiterator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;makeiterator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; nextindex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token function-variable function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; nextindex &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length
        &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; value&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;nextindex&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; done&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
        &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; value&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; done&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;// Symbol.iterator遍历器接口&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; iter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;Symbol&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;iterator&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

iter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// &amp;#123; value: &#39;a&#39;, done: false &amp;#125;&lt;/span&gt;
iter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// &amp;#123; value: &#39;b&#39;, done: false &amp;#125;&lt;/span&gt;
iter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// &amp;#123; value: &#39;c&#39;, done: false &amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;21-循环语法比较及使用场景for-foreach-forin-forof&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21-循环语法比较及使用场景for-foreach-forin-forof&#34;&gt;#&lt;/a&gt; 21、循环语法比较及使用场景（for、forEach、for…in、for…of）&lt;/h3&gt;
&lt;p&gt;for 循环的速度是最快的，是最老的循环，也是优化得最好的，其次是 for-of 这个是 es6 才新增的循环非常好用，最慢是 for-in 我们可以作一下速度排序&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; forEach &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; filter &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; map &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2019/08/04/ES6intro/</guid>
            <title>ES6 语法</title>
            <link>http://example.com/2019/08/04/ES6intro/</link>
            <category>ES6 模块化语法</category>
            <category>babel</category>
            <category>webpack</category>
            <category>rollup</category>
            <category>ES6</category>
            <pubDate>Sun, 04 Aug 2019 16:46:35 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;es6-语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#es6-语法&#34;&gt;#&lt;/a&gt; ES6 语法&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本章主要讲解工作中最常用的 ES6 语法，包括 &lt;strong&gt;Module Class Promise&lt;/strong&gt; 等语法，还会介绍使用 &lt;strong&gt;babel webpack rollup&lt;/strong&gt; 来搭建 ES6 编译环境。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://es6.ruanyifeng.com/&#34;&gt;ECMAScript 6 入门&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;es6-使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#es6-使用&#34;&gt;#&lt;/a&gt; ES6 使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;开发环境已经普及使用&lt;/li&gt;
&lt;li&gt;浏览器环境却支持不好（ 需要开发环境编译 ）&lt;/li&gt;
&lt;li&gt;内容很多，重点了解常用语法&lt;/li&gt;
&lt;li&gt;面试：开发环境的使用 + 重点语法的掌握&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问题&#34;&gt;#&lt;/a&gt; 问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ES6 模块化如何使用，开发环境如何打包&lt;/li&gt;
&lt;li&gt;Class 和 普通构造函数 有何区别 ？&lt;/li&gt;
&lt;li&gt;Promise 的基本使用和原理&lt;/li&gt;
&lt;li&gt;总结一下 ES6 其它常用功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-1-es6-模块化语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-1-es6-模块化语法&#34;&gt;#&lt;/a&gt; 2-1 ES6 模块化语法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ES6 模块化如何使用，开发环境如何打包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;知识点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#知识点&#34;&gt;#&lt;/a&gt; 知识点&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ES6 模块化如何使用，开发环境如何打包:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化的基本语法&lt;/li&gt;
&lt;li&gt;开发环境的配置&lt;/li&gt;
&lt;li&gt;关于 JS 众多 模块化标准&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;export-语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#export-语法&#34;&gt;#&lt;/a&gt; export 语法&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;export 语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;/*util1.js*/&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  a&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;/*util2.js*/&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fn1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;fn1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fn2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;fn2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;/*index.js*/&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; util1 &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;./util1.js&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; fn1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fn2 &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;./util2.js&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;util1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;fn1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;fn2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;开发环境-babel&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开发环境-babel&#34;&gt;#&lt;/a&gt; 开发环境 - babel&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Babel 是一个 JavaScript 编译器。&lt;a href=&#34;https://babeljs.io/&#34;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用技巧 可参考 &lt;a href=&#34;http://zxinc520.com/lcj/%225cc4640d9b3032095d9e5754%22&#34;&gt;React 学习第一天 ：webpack 中使用 Babel 配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和 &lt;a href=&#34;http://zxinc520.com/lcj/%225cb72a04009ae94788aa0d7f%22&#34;&gt;Vue 第六天学习 ：webpack 中 babel 的配置&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;开发环境-webpack&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开发环境-webpack&#34;&gt;#&lt;/a&gt; 开发环境 - webpack&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;开发环境 - webpack - &lt;em&gt;webpack&lt;/em&gt; 是一个模块打包器 &lt;a href=&#34;https://webpack.js.org/&#34;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;详情 可参考我的博客：&lt;a href=&#34;http://zxinc520.com/lcj/%225cb181596d3d4a5cb52b65c9%22&#34;&gt;Vue 第五天：webpack&lt;/a&gt; 和 &lt;a href=&#34;http://zxinc520.com/lcj/%225cb72a04009ae94788aa0d7f%22&#34;&gt;Vue 第六天学习：深入 webpack&lt;/a&gt; 以及 &lt;a href=&#34;http://zxinc520.com/lcj/%225cc4640d9b3032095d9e5754%22&#34;&gt;React 学习第一天：创建基本的 webpack4.x 项目 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;rollupjs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rollupjs&#34;&gt;#&lt;/a&gt; rollup.js&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;概述 (Overview) &lt;a href=&#34;https://www.rollupjs.com/guide/zh&#34;&gt;中文文档&lt;/a&gt; &lt;a href=&#34;https://rollupjs.org/guide/en/&#34;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。Rollup 对代码模块使用新的标准化格式，这些标准都包含在 JavaScript 的 ES6 版本中，而不是以前的特殊解决方案，如 CommonJS 和 AMD。ES6 模块可以使你自由、无缝地使用你最喜爱的 library 中那些最有用独立函数，而你的项目不必携带其他未使用的代码。ES6 模块最终还是要由浏览器原生实现，但当前 Rollup 可以使你提前体验&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rollup 功能单一（极致） ，webpack 功能强大&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;关于-js-众多-模块化标准&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于-js-众多-模块化标准&#34;&gt;#&lt;/a&gt; 关于 JS 众多 模块化标准&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;关于 JS 众多 模块化标准&lt;/p&gt;
&lt;p&gt;详情可参考我的博客：&lt;a href=&#34;http://zxinc520.com/lcj/%225d31940b724e8113740499b3%22&#34;&gt;开发环境： 模块化&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;发展过程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有模块化&lt;/li&gt;
&lt;li&gt;AMD 成为 标准，require.js （也有 CMD【&lt;strong&gt;用的不多&lt;/strong&gt; 】）&lt;/li&gt;
&lt;li&gt;前端打包工具，nodejs 模块化可以被使用&lt;/li&gt;
&lt;li&gt;ES6 出现 ，想统一现在所有的模块化标准&lt;/li&gt;
&lt;li&gt;nodejs 积极支持，浏览器尚未统一&lt;/li&gt;
&lt;li&gt;你可以自造 lib，但是不要自造标准&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;问题解答&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问题解答&#34;&gt;#&lt;/a&gt; 问题解答&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;语法：import export （注意有无 default）&lt;/li&gt;
&lt;li&gt;环境：babel 编译 ES6 语法，模块化可用 webpack 和 rollup&lt;/li&gt;
&lt;li&gt;扩展：说一下自己对模块化标准统一的期待&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-2-class-和-普通构造函数有何区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-2-class-和-普通构造函数有何区别&#34;&gt;#&lt;/a&gt; 2-2 Class 和 普通构造函数有何区别&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Class 和 普通构造函数有何区别&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zxinc520.com/lcj/%225cd03896bd482e21ac46a9d4%22&#34;&gt;我的博客：React 学习第二天：了解 class&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;知识点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#知识点-2&#34;&gt;#&lt;/a&gt; 知识点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JS 构造函数&lt;/li&gt;
&lt;li&gt;Class 基本语法&lt;/li&gt;
&lt;li&gt;语法糖&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;问题解答-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问题解答-2&#34;&gt;#&lt;/a&gt; 问题解答&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Class 和 普通构造函数 有何区别 ？
&lt;ul&gt;
&lt;li&gt;Class 在语法上更加贴合面向对象的写法&lt;/li&gt;
&lt;li&gt;Class 实现继承更加易读、易理解&lt;/li&gt;
&lt;li&gt;更易于写 java 等后端语言的使用&lt;/li&gt;
&lt;li&gt;本质还是语法糖， 使用 prototype&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-3-promise-的基本使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-3-promise-的基本使用&#34;&gt;#&lt;/a&gt; 2-3 Promise 的基本使用&lt;/h2&gt;
&lt;h3 id=&#34;promise-的基本使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#promise-的基本使用&#34;&gt;#&lt;/a&gt; Promise 的基本使用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;可参考我的博客：&lt;a href=&#34;http://zxinc520.com/lcj/%225cbb3bf05733fa0a66088c80%22&#34;&gt;Promise 详细分析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Callback Hell&lt;/li&gt;
&lt;li&gt;Promise 语法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;callback-hell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#callback-hell&#34;&gt;#&lt;/a&gt; Callback Hell&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loadImg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;src&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; callback&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fail&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; img &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;img&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onload&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;img&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onerror&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;fail&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;src &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; src&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; src &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;
  &lt;span class=&#34;token string&#34;&gt;&#34;https://edu-image.nosdn.127.net/B34DC36428D2D51B8EF5EE2C83CE9BF2.png?imageView&amp;amp;thumbnail=241y34&amp;amp;quality=100&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;loadImg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
  src&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;width&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;failed&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;promise-语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#promise-语法&#34;&gt;#&lt;/a&gt; Promise 语法&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loadImg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; promise &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; img &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;img&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onload&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;img&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onerror&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      &lt;span class=&#34;token function&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;src &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; src&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; promise&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; src &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;
  &lt;span class=&#34;token string&#34;&gt;&#34;https://edu-image.nosdn.127.net/B34DC36428D2D51B8EF5EE2C83CE9BF2.png?imageView&amp;amp;thumbnail=241y34&amp;amp;quality=100&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loadImg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;src&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

result&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;width&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;faild&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

result&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;height&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;问题解答-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问题解答-3&#34;&gt;#&lt;/a&gt; 问题解答&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Promise 的基本使用和原理？
&lt;ul&gt;
&lt;li&gt;new Promise 实例，而且要 return&lt;/li&gt;
&lt;li&gt;new Promise 时要传入函数，函数有 resolve, reject 两个参数&lt;/li&gt;
&lt;li&gt;成功时执行 resolve () 失败时执行 reject ()&lt;/li&gt;
&lt;li&gt;then 监听结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-4-总结一下-es6-其它常用功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-4-总结一下-es6-其它常用功能&#34;&gt;#&lt;/a&gt; 2-4 总结一下 ES6 其它常用功能&lt;/h2&gt;
&lt;h3 id=&#34;知识点-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#知识点-3&#34;&gt;#&lt;/a&gt; 知识点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;let/const&lt;/li&gt;
&lt;li&gt;多行字符串 / 模板变量&lt;/li&gt;
&lt;li&gt;解构赋值&lt;/li&gt;
&lt;li&gt;块级作用域&lt;/li&gt;
&lt;li&gt;函数默认参数&lt;/li&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;letconst&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#letconst&#34;&gt;#&lt;/a&gt; let/const&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190804/IjRCPysI3ja5.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;多行字符串模板变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多行字符串模板变量&#34;&gt;#&lt;/a&gt; 多行字符串 / 模板变量&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190804/cmkreCVTvB3f.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;解构赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解构赋值&#34;&gt;#&lt;/a&gt; 解构赋值&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190804/tkv3jll7XPJG.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;块级作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#块级作用域&#34;&gt;#&lt;/a&gt; 块级作用域&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190804/vqFw5Cyt1Okg.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;函数默认参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数默认参数&#34;&gt;#&lt;/a&gt; 函数默认参数&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190804/rDHBLwq6djzQ.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;箭头函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#箭头函数&#34;&gt;#&lt;/a&gt; 箭头函数&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190804/26aXyJj3eE8M.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190804/XppPYlgRUceY.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
