{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"正则表达式\" tag",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/10/10/regular_expression/",
            "url": "http://example.com/2019/10/10/regular_expression/",
            "title": "正则表达式",
            "date_published": "2019-10-10T06:19:47.000Z",
            "content_html": "<h1 id=\"正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式\">#</a> 正则表达式</h1>\n<blockquote>\n<p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。这些模式被用于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp\"> <code>RegExp</code> </a> 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"> <code>exec</code> </a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"> <code>test</code> </a> 方法，以及 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String\"> <code>String</code> </a> 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match\"> <code>match</code> </a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"> <code>matchAll</code> </a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"> <code>replace</code> </a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\"> <code>search</code> </a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\"> <code>split</code> </a> 方法。本章介绍 JavaScript <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">正则表达式</a>。</p>\n</blockquote>\n<p>辅助正则可视化网站：<a href=\"https://regexper.com/\">https://regexper.com/</a></p>\n<p><strong>使用正则表达式的方法</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"> <code>exec</code> </a></td>\n<td>一个在字符串中执行查找匹配的 RegExp 方法，它返回一个数组（未匹配到则返回 null）。</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"> <code>test</code> </a></td>\n<td>一个在字符串中测试是否匹配的 RegExp 方法，它返回 true 或 false。</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match\"> <code>match</code> </a></td>\n<td>一个在字符串中执行查找匹配的 String 方法，它返回一个数组，在未匹配到时会返回 null。</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"> <code>matchAll</code> </a></td>\n<td>一个在字符串中执行查找所有匹配的 String 方法，它返回一个迭代器（iterator）。</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\"> <code>search</code> </a></td>\n<td>一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回 - 1。</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"> <code>replace</code> </a></td>\n<td>一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\"> <code>split</code> </a></td>\n<td>一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的  <code>String</code>  方法。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"regexp-对象\"><a class=\"markdownIt-Anchor\" href=\"#regexp-对象\">#</a> REGEXP 对象</h2>\n<ul>\n<li>JavaScript 通过内置函数对象 RegExp 支持正则表达式</li>\n<li>有两种方法实例化 RegExp 对象\n<ul>\n<li>字面量</li>\n<li>构造函数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"字面量\"><a class=\"markdownIt-Anchor\" href=\"#字面量\">#</a> 字面量</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/\\bis\\b/g</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"he is dog ,he love she how are you is\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"IS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// he IS dog ,he love she how are you IS</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"构造函数\"><a class=\"markdownIt-Anchor\" href=\"#构造函数\">#</a> 构造函数</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\bis\\\\b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"he is dog ,he love she how are you is\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"IS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// he IS dog ,he love she how are you IS</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"修饰符\"><a class=\"markdownIt-Anchor\" href=\"#修饰符\">#</a> 修饰符</h4>\n<p>在 JavaScript 中，<strong>正则表达式标志</strong>：</p>\n<ul>\n<li>\n<p><code>i</code></p>\n<p>不区分大小写搜索。</p>\n</li>\n<li>\n<p><code>g</code></p>\n<p>全局搜索。</p>\n</li>\n<li>\n<p><code>m</code></p>\n<p>多行搜索。</p>\n</li>\n<li>\n<p><code>u</code></p>\n<p>使用 unicode 码的模式进行匹配。</p>\n</li>\n<li>\n<p><code>y</code></p>\n<p>执行 “粘性” 搜索，匹配从目标字符串的当前位置开始，可以使用 y 标志。</p>\n</li>\n<li>\n<p><code>s</code></p>\n<p>允许  <code>.</code>  匹配换行符。</p>\n</li>\n</ul>\n<h4 id=\"元字符\"><a class=\"markdownIt-Anchor\" href=\"#元字符\">#</a> 元字符</h4>\n<ul>\n<li>正则表达式由两种基本字符类型组成：\n<ul>\n<li>原义文本字符</li>\n<li>元字符</li>\n</ul>\n</li>\n<li>元字符是在正则表达式中有特殊含义的非字母字符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\</td>\n<td>将下一个字符标记为特殊字符或字面值。例如，n 匹配字符 <em>n</em>，而 \\n 匹配换行符。序列 \\ 匹配 \\，而 ( 匹配 (。</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配输入的开始部分。</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配输入的结束部分。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>零次或更多次匹配前面的字符。例如，zo* 匹配 <em>z</em> 或 *zoo*。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>一次或更多次匹配前面的字符。例如，zo+ 匹配 <em>zoo</em>，但是不匹配 <em>z</em>。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>零次或一次匹配前面的字符。例如，a?ve? 匹配 <em>never</em> 中的 <em>ve</em>。</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配任何单个字符，但换行符除外。</td>\n</tr>\n<tr>\n<td>(pattern)</td>\n<td>匹配模式并记住匹配项。通过使用以下代码，匹配的子串可以检索自生成的匹配项集合：Item [0]…[n]。要匹配圆括号字符 ( )，请使用 ( 或 )。</td>\n</tr>\n<tr>\n<td>x|y</td>\n<td>匹配 x 或 y。 例如，z|wood 匹配 <em>z</em> 或 <em>wood</em>。(z|w) oo 匹配 <em>zoo</em> 或 <em>wood</em>。</td>\n</tr>\n<tr>\n<td n=\"\"></td>\n<td>n 是一个非负整数。精确匹配 n 次。例如，o {2} 不匹配 <em>Bob</em> 中的 <em>o</em>，但是匹配 <em>foooood</em> 中的前两个 <em>o</em>。</td>\n</tr>\n<tr>\n<td n,=\"\"></td>\n<td>在此表达式中，n 是一个非负整数。至少 n 次匹配前面的字符。例如，o {2,} 不匹配 <em>Bob</em> 中的 <em>o</em>，但是匹配 <em>foooood</em> 中的所有 <em>o</em>。o {1,} 表达式等效于 o+，o {0,} 等效于 o*。</td>\n</tr>\n<tr>\n<td n,m=\"\"></td>\n<td>m 和 n 变量是非负整数。至少 n 次且至多 m 次匹配前面的字符。例如，o {1,3} 匹配 <em>fooooood</em> 中的前三个 <em>o</em>。o {0,1} 表达式等效于 o?。</td>\n</tr>\n<tr>\n<td>[xyz]</td>\n<td>一个字符集。匹配任意一个包含的字符。例如，[abc] 匹配 <em>plain</em> 中的 <em>a</em>。</td>\n</tr>\n<tr>\n<td>[^xyz]</td>\n<td>一个否定字符集。匹配任何未包含的字符。例如，[^abc] 匹配 <em>plain</em> 中的 <em>p</em>。</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>字符范围。匹配指定范围中的任何字符。例如，[a-z] 匹配英语字母中的任何小写的字母字符。</td>\n</tr>\n<tr>\n<td>[^m-z]</td>\n<td>一个否定字符范围。匹配未在指定范围中的任何字符。例如，[m-z] 匹配未在范围 <em>m</em> 到 <em>z</em> 之间的任何字符。</td>\n</tr>\n<tr>\n<td>\\A</td>\n<td>仅匹配字符串的开头。</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配某个单词边界，即，某个单词和空格之间的位置。例如，er\\b 匹配 <em>never</em> 中的 <em>er</em>，但是不匹配 <em>verb</em> 中的 <em>er</em>。</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配非单词边界。ea*r\\B 表达式匹配 <em>never early</em> 中的 *ear*。</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配数字字符。</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配非数字字符。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配换页字符。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配换行符。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配回车字符。</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空格，包括空白、制表符、换页字符等等。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任何非空格字符。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配跳进字符。</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配垂直跳进字符。</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配任何单词字符，包括下划线。此表达式等效于 [A-Za-z0-9_]。</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配任何非单词字符。此表达式等效于 [^a-za-z0-9__]。</td>\n</tr>\n<tr>\n<td>\\z</td>\n<td>仅匹配字符串的结尾。</td>\n</tr>\n<tr>\n<td>\\Z</td>\n<td>仅匹配字符串的结尾，或者结尾的换行符之前。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>字符类：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token string\">\"a1b2c3d4\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[abc]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"X1X2X3d4\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token string\">\"a1b2c3d4\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[^abc]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"aXbXcXXX\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>范围类：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token string\">\"a1b2c3d4zcczx\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[a-z]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"Q1Q2Q3Q4QQQQQ\"</span>\n\n<span class=\"token string\">\"a1b2c3d4zcczxAAAAAAA\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[a-zA-Z]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"Q1Q2Q3Q4QQQQQQQQQQQQ\"</span>\n\n<span class=\"token string\">\"2016-09-12\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[0-9]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"AAAA-AA-AA\"</span>\n\n<span class=\"token string\">\"2016-09-12\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[0-9-]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"AAAAAAAAAA\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>预定义类：</strong></p>\n<p><img src=\"http://static.zxinc520.com/blog/20191009/FsMlDwV4Kfrh.png?imageslim\" alt=\"mark\"></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//匹配一个 ab + 数字 + 任意字符 的字符串</span>\nab\\d<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>边界：</strong></p>\n<p><img src=\"http://static.zxinc520.com/blog/20191009/UQyV6XeWDuqI.png?imageslim\" alt=\"mark\"></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token string\">\"this is a boy\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\bis\\b/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"IS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"this IS a boy\"</span>\n\n<span class=\"token string\">\"@13@12331\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/@./g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"Q3Q2331\"</span>\n\n<span class=\"token string\">\"@13@12331\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^@./g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"Q3@12331\"</span>\n\n<span class=\"token string\">\"@13@12331@\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/.@$/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"@13@1233Q\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>量词：</strong></p>\n<p><img src=\"http://static.zxinc520.com/blog/20191009/KsjXw8IGYwJD.png?imageslim\" alt=\"mark\"></p>\n<p><strong>贪婪模式：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token string\">\"12345678\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d&#123;3,6&#125;/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"a78\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>非贪婪模式：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token string\">\"12345678\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d&#123;3,6&#125;?/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"aa78\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>分组：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token string\">\"a1b2c3d4\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/([a-zA-z]\\d)&#123;3&#125;/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"Ad4\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>或：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token string\">\"123456789122312\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(123|456)/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"AA789122312\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>反向引用：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token string\">\"2019-10-09\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$3/$2/$1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"09/10/2019\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>前瞻：</strong></p>\n<ul>\n<li>正则表达式从文本头部向尾部开始解析，文本尾部方向，称为 “前”</li>\n<li><strong>前瞻</strong> 就是正则表达式匹配到规则的时候，向前检查是否符合断言，后顾 / 后瞻 方向相反</li>\n<li>JavaScript 不支持 后顾</li>\n<li>符合和不符合特定断言称为 <strong>肯定 / 正向</strong> 匹配 和 <strong>否定 / 负向</strong> 匹配</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20191009/VS8ezfIwVH95.png?imageslim\" alt=\"mark\"></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token string\">\"a2*3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\w(?=\\d)/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"A2*3\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"对象属性\"><a class=\"markdownIt-Anchor\" href=\"#对象属性\">#</a> 对象属性</h3>\n<ul>\n<li>global：是否全文搜索，默认 false</li>\n<li>ignore case：是否大小写敏感，默认是 false</li>\n<li>multiline：多行搜索，默认值是 false</li>\n<li>lastIndex: 是当前表达式匹配内容的最后一个字符的下一个位置</li>\n<li>source：正则表达式的文本字符串</li>\n</ul>\n<h2 id=\"regexpprototypetest\"><a class=\"markdownIt-Anchor\" href=\"#regexpprototypetest\">#</a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\">RegExp.prototype.test()</a></h2>\n<blockquote>\n<p><code>test()</code>  方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回  <code>true</code>  或  <code>false</code> 。</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reg1 <span class=\"token operator\">=</span> <span class=\"token regex\">/\\w/</span><span class=\"token punctuation\">;</span>\nreg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>注意：/g（全局匹配 ） 使用 test 方法，结果不稳定！</p>\n<h2 id=\"regexpprototypeexec\"><a class=\"markdownIt-Anchor\" href=\"#regexpprototypeexec\">#</a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\">RegExp.prototype.exec()</a></h2>\n<blockquote>\n<p><code>exec() </code> 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null\"> <code>null</code> </a>。</p>\n<p>如果你只是为了判断是否匹配（true 或 false），可以使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"> <code>RegExp.test()</code> </a> 方法，或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\"> <code>String.search()</code> </a> 方法。</p>\n</blockquote>\n",
            "tags": [
                "正则表达式"
            ]
        }
    ]
}