<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>sunflower • Posts by &#34;大 o？&#34; tag</title>
    <link href="http://example.com" />
    <updated>2019-09-11T11:56:35.000Z</updated>
    <category term="blog" />
    <category term="个人博客" />
    <category term="rem" />
    <category term="less" />
    <category term="art-template" />
    <category term="算法面试" />
    <category term="算法" />
    <category term="大 O？" />
    <category term="复杂度分析" />
    <category term="大二" />
    <category term="数据库实训" />
    <category term="IDE" />
    <category term="Git" />
    <category term="模块化" />
    <category term="构建工具" />
    <category term="上线和回滚" />
    <category term="ES6 模块化语法" />
    <category term="babel" />
    <category term="webpack" />
    <category term="rollup" />
    <category term="ES6" />
    <category term="hybrid" />
    <category term="虚拟 DOM" />
    <category term="知识点概述" />
    <category term="JS" />
    <category term="实用工具" />
    <category term="面试全面总结" />
    <category term="JS 三座大山" />
    <category term="学习实训" />
    <category term="性能优化" />
    <category term="加载过程" />
    <category term="promise" />
    <category term="异步解决方案" />
    <category term="回调地狱" />
    <category term="React" />
    <category term="React源码" />
    <category term="Vue3" />
    <category term="vue" />
    <category term="跑马灯" />
    <category term="父子组件间通信" />
    <category term="路由" />
    <category term="监听事件（keyup ，watch ，computed ）" />
    <category term="nrm" />
    <category term="Mint-UI" />
    <category term="MUI" />
    <category term="MVVM" />
    <category term="响应式、模板解析、渲染" />
    <category term="微信小程序" />
    <category term="单线程" />
    <category term="event loop" />
    <category term="异步的 Deferred" />
    <category term="Promise" />
    <category term="html" />
    <category term="hexo" />
    <category term="redux" />
    <category term="UTC时间问题" />
    <category term="正则表达式" />
    <category term="虚拟DOM" />
    <category term="博文" />
    <category term="React-Router" />
    <category term="React-Hooks" />
    <category term="DOM" />
    <category term="BOM" />
    <category term="事件绑定" />
    <category term="ajax 请求" />
    <category term="储存" />
    <category term="进程调度" />
    <category term="过滤器" />
    <category term="按键修饰符" />
    <category term="指令" />
    <category term="生命周期" />
    <category term="过渡效果" />
    <category term="组件" />
    <category term="webpack 后续问题" />
    <category term="数组" />
    <category term="API" />
    <category term="跨域" />
    <category term="动画" />
    <category term="事件" />
    <category term="React基础面试题-50" />
    <category term="数组相关操作" />
    <category term="手撕代码" />
    <category term="牛人面试题" />
    <entry>
        <id>http://example.com/2019/09/11/ComplexityAnalysis/</id>
        <title>面试中的复杂度分析</title>
        <link rel="alternate" href="http://example.com/2019/09/11/ComplexityAnalysis/"/>
        <content type="html">&lt;h1 id=&#34;面试中的复杂度分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#面试中的复杂度分析&#34;&gt;#&lt;/a&gt; 面试中的复杂度分析&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;很多同学一提起复杂度分析就头疼，马上想起了《算法导论》中复杂的数学推导。但其实在一般的企业面试中，对复杂度的分析要求并没有那么高，但也是绕不过去的坎儿。在这一章，和大家介绍一下，面试中需要掌握的复杂度分析。…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-1-究竟什么是大-obig-o&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-1-究竟什么是大-obig-o&#34;&gt;#&lt;/a&gt; 2-1 究竟什么是大 O（Big O）&lt;/h2&gt;
&lt;h4 id=&#34;大-o&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#大-o&#34;&gt;#&lt;/a&gt; 大 O？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;n 表示数据规模&lt;/li&gt;
&lt;li&gt;O（f (n)）表示运行算法所需要执行的指令数，和 f (n) 成正比&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;例如&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#例如&#34;&gt;#&lt;/a&gt; 例如&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;二分查找法 O (logn) — 所需执行指令数 ：a * logn&lt;/li&gt;
&lt;li&gt;寻找 数组中的最大 / 最小值 O (n) — 所需执行指令数 ：b * n&lt;/li&gt;
&lt;li&gt;归并排序算法 O (nlogn) — 所需执行指令数 ：c * nlogn&lt;/li&gt;
&lt;li&gt;选择排序法 O (n^2) — 所需执行指令数 ：d * n^2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;到底什么是-big-o&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#到底什么是-big-o&#34;&gt;#&lt;/a&gt; 到底什么是 Big O？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/61aLQ2wE8prQ.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/2PO7UfwEDOpW.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在学术界&lt;/strong&gt;，严格来讲，O (f (n)) 表示算法执行的上界&lt;/p&gt;
&lt;p&gt;归并排序算法的时间复杂度是 O (nlogn) 的，同时也是 O（n^2）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在业界&lt;/strong&gt;，我们就使用 O 来表示算法执行的最低上界&lt;/p&gt;
&lt;p&gt;我们一般不会说归并排序是 O (n^2) 的&lt;/p&gt;
&lt;h4 id=&#34;例子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#例子&#34;&gt;#&lt;/a&gt; 例子&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;O（nlogn + n）= O （nlogn）&lt;/li&gt;
&lt;li&gt;O（nlogn + n&lt;sup&gt;2）=O（n&lt;/sup&gt;2）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;无法判断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#无法判断&#34;&gt;#&lt;/a&gt; 无法判断&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;O（AlogA + B） – A 与 B 无法确定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O（AlogA + B ^2）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对邻接表实现的图进行遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：O（ V + E ）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一个时间复杂度的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一个时间复杂度的问题&#34;&gt;#&lt;/a&gt; 一个时间复杂度的问题&lt;/h3&gt;
&lt;p&gt;有一个字符串数组，将数组中的每一个字符串按照字母序排序；之后再将整个字符串数组按照字典序排序。整个操作的时间复杂度？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/8cfiXUHkirne.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;正确解答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设最长的字符串长度为 s ；数组中有 n 个字符串&lt;/li&gt;
&lt;li&gt;对每个字符串排序：O（slogs）&lt;/li&gt;
&lt;li&gt;将数组中的每一个字符串按照字母序排序：O（n * slog (s) ）&lt;/li&gt;
&lt;li&gt;将整个字符串数组按照字典序排序：O（s * nlog (n) ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/Q5nKtKe1dCi7.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;算法复杂度在有些情况是用例相关的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#算法复杂度在有些情况是用例相关的&#34;&gt;#&lt;/a&gt; 算法复杂度在有些情况是用例相关的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;插入排序 O（n ^ 2）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最差情况：O（n ^ 2）&lt;/li&gt;
&lt;li&gt;最好情况：O（n）&lt;/li&gt;
&lt;li&gt;平均情况：O（n ^ 2）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速排序算法 O （nlogn）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最差情况：O（n ^ 2）&lt;/li&gt;
&lt;li&gt;最好情况：O（ nlogn ）&lt;/li&gt;
&lt;li&gt;平均情况：O（ nlogn ）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-2-对数据规模有一个概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-2-对数据规模有一个概念&#34;&gt;#&lt;/a&gt; 2-2 对数据规模有一个概念&lt;/h2&gt;
&lt;h3 id=&#34;抛出问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抛出问题&#34;&gt;#&lt;/a&gt; 抛出问题&lt;/h3&gt;
&lt;p&gt;对 10 ^ 5 的数据进行选择排序，结果计算机假死？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果要想在 1s 之内解决问题：
&lt;ul&gt;
&lt;li&gt;O（n ^ 2）的算法可以处理大约 10 ^ 4 级别的数据&lt;/li&gt;
&lt;li&gt;O（ n ）的算法可以处理大约 10 ^ 8 级别的数据&lt;/li&gt;
&lt;li&gt;O（ nlogn ）的算法可以处理大约 10 ^7 级别的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空间复杂度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#空间复杂度&#34;&gt;#&lt;/a&gt; 空间复杂度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多开一个辅助的数组：O（n）&lt;/li&gt;
&lt;li&gt;多开一个辅助的二维数组：O（n ^ 2）&lt;/li&gt;
&lt;li&gt;多开常数空间：O（1）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/7uFcA2L2OHhI.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-3-简单的复杂度分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-3-简单的复杂度分析&#34;&gt;#&lt;/a&gt; 2-3 简单的复杂度分析&lt;/h2&gt;
&lt;h3 id=&#34;o1&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#o1&#34;&gt;#&lt;/a&gt; O（1）：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/wmyLLvW5hvGh.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;o-n&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#o-n&#34;&gt;#&lt;/a&gt; O（ n ）：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/R4zqgJ9zJqqs.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/fujJT4N78Ybh.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;1/2 *n 次 swap 操作也是：O (n) 。&lt;/p&gt;
&lt;h3 id=&#34;on-2-选择排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#on-2-选择排序&#34;&gt;#&lt;/a&gt; O（n ^ 2）: (选择排序)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/HPtrTeSx6DsB.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/rh5JcB9dA8ux.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;并不是所有双重循环都是 O（n ^ 2）：例如 【因为里面的循环次数是固定的 】&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/Vs0lBjzBPEi9.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面算法是 O（logn）级别的： 【 自增并不是每次都加 1 】&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/QJC2YLSAOdAk.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面算法是 O（ sqrt (n) ）【 判断 n 是不是 一个素数】&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/QeClcFN8EsWa.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ologn-二分查找法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ologn-二分查找法&#34;&gt;#&lt;/a&gt; O（logn）：（ 二分查找法 ）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/HCC3KITFnmlL.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/Y18HXPKRMICe.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;整形转成字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整形转成字符串&#34;&gt;#&lt;/a&gt; 整形转成字符串&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/gDCAKNS0NtKo.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;log-以-2-为底-和-以-10-为底有区别吗&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#log-以-2-为底-和-以-10-为底有区别吗&#34;&gt;#&lt;/a&gt; log 以 2 为底 和 以 10 为底有区别吗&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190909/hhkkzyo7uTJM.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-4-亲自试验自己算法的时间复杂度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-4-亲自试验自己算法的时间复杂度&#34;&gt;#&lt;/a&gt; 2-4 亲自试验自己算法的时间复杂度&lt;/h2&gt;
&lt;h3 id=&#34;复杂度实验&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复杂度实验&#34;&gt;#&lt;/a&gt; 复杂度实验&lt;/h3&gt;
&lt;p&gt;实验，观察趋势&lt;/p&gt;
&lt;p&gt;每次 将数据规模提高两倍，看时间的变化&lt;/p&gt;
&lt;h2 id=&#34;2-5-递归算法的复杂度分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-5-递归算法的复杂度分析&#34;&gt;#&lt;/a&gt; 2-5 递归算法的复杂度分析&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;不是有递归的函数就一定是 O（ nlogn ）！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;递归中进行一次递归调用的复杂度分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归中进行一次递归调用的复杂度分析&#34;&gt;#&lt;/a&gt; 递归中进行一次递归调用的复杂度分析&lt;/h3&gt;
&lt;p&gt;二分法使用递归：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190911/Vrm1PVyknLyf.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190911/HKc9QUhHzufd.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190911/Mrr5oypWBxGk.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190911/1hAzDU4ifP7w.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;引申：上述 函数增加求 负次幂？&lt;/p&gt;
&lt;h3 id=&#34;递归中进行多次递归调用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归中进行多次递归调用&#34;&gt;#&lt;/a&gt; 递归中进行多次递归调用&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190911/DmVGKhPNOvil.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190911/vlrGbmrXl4uo.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;深度不一样，并不是所有 多次递归调用 的时间复杂度 为：O（2 ^ n）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190911/copG1I1hd0ya.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;递归函数的时间复杂度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归函数的时间复杂度&#34;&gt;#&lt;/a&gt; 递归函数的时间复杂度&lt;/h4&gt;
&lt;p&gt;查阅 &lt;strong&gt;主定理&lt;/strong&gt; （面试一般不考察）&lt;/p&gt;
&lt;h2 id=&#34;2-6-均摊时间复杂度分析amortized-time-analysis&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-6-均摊时间复杂度分析amortized-time-analysis&#34;&gt;#&lt;/a&gt; 2-6 均摊时间复杂度分析（Amortized Time Analysis）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190911/lH5rYQsGwqtN.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-7-避免复杂度的震荡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-7-避免复杂度的震荡&#34;&gt;#&lt;/a&gt; 2-7 避免复杂度的震荡&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190911/glngyIU8g3Mi.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190911/AFsH4CLIkIE3.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;复杂度的震荡的解决方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复杂度的震荡的解决方案&#34;&gt;#&lt;/a&gt; 复杂度的震荡的解决方案&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://static.zxinc520.com/blog/20190911/hwAvgAw9rUM1.png?imageslim&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
</content>
        <category term="算法面试" />
        <category term="算法" />
        <category term="大 O？" />
        <category term="复杂度分析" />
        <updated>2019-09-11T11:56:35.000Z</updated>
    </entry>
</feed>
