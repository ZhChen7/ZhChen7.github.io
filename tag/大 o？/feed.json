{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"大 o？\" tag",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/09/11/ComplexityAnalysis/",
            "url": "http://example.com/2019/09/11/ComplexityAnalysis/",
            "title": "面试中的复杂度分析",
            "date_published": "2019-09-11T11:56:35.000Z",
            "content_html": "<h1 id=\"面试中的复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#面试中的复杂度分析\">#</a> 面试中的复杂度分析</h1>\n<blockquote>\n<p>很多同学一提起复杂度分析就头疼，马上想起了《算法导论》中复杂的数学推导。但其实在一般的企业面试中，对复杂度的分析要求并没有那么高，但也是绕不过去的坎儿。在这一章，和大家介绍一下，面试中需要掌握的复杂度分析。…</p>\n</blockquote>\n<h2 id=\"2-1-究竟什么是大-obig-o\"><a class=\"markdownIt-Anchor\" href=\"#2-1-究竟什么是大-obig-o\">#</a> 2-1 究竟什么是大 O（Big O）</h2>\n<h4 id=\"大-o\"><a class=\"markdownIt-Anchor\" href=\"#大-o\">#</a> 大 O？</h4>\n<ul>\n<li>n 表示数据规模</li>\n<li>O（f (n)）表示运行算法所需要执行的指令数，和 f (n) 成正比</li>\n</ul>\n<h4 id=\"例如\"><a class=\"markdownIt-Anchor\" href=\"#例如\">#</a> 例如</h4>\n<ul>\n<li>二分查找法 O (logn) — 所需执行指令数 ：a * logn</li>\n<li>寻找 数组中的最大 / 最小值 O (n) — 所需执行指令数 ：b * n</li>\n<li>归并排序算法 O (nlogn) — 所需执行指令数 ：c * nlogn</li>\n<li>选择排序法 O (n^2) — 所需执行指令数 ：d * n^2</li>\n</ul>\n<h3 id=\"到底什么是-big-o\"><a class=\"markdownIt-Anchor\" href=\"#到底什么是-big-o\">#</a> 到底什么是 Big O？</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/61aLQ2wE8prQ.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/2PO7UfwEDOpW.png?imageslim\" alt=\"mark\"></p>\n<p><strong>在学术界</strong>，严格来讲，O (f (n)) 表示算法执行的上界</p>\n<p>归并排序算法的时间复杂度是 O (nlogn) 的，同时也是 O（n^2）</p>\n<p><strong>在业界</strong>，我们就使用 O 来表示算法执行的最低上界</p>\n<p>我们一般不会说归并排序是 O (n^2) 的</p>\n<h4 id=\"例子\"><a class=\"markdownIt-Anchor\" href=\"#例子\">#</a> 例子</h4>\n<ul>\n<li>O（nlogn + n）= O （nlogn）</li>\n<li>O（nlogn + n<sup>2）=O（n</sup>2）</li>\n</ul>\n<h4 id=\"无法判断\"><a class=\"markdownIt-Anchor\" href=\"#无法判断\">#</a> 无法判断</h4>\n<ul>\n<li>\n<p>O（AlogA + B） – A 与 B 无法确定</p>\n</li>\n<li>\n<p>O（AlogA + B ^2）</p>\n</li>\n<li>\n<p>对邻接表实现的图进行遍历</p>\n<ul>\n<li>时间复杂度：O（ V + E ）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"一个时间复杂度的问题\"><a class=\"markdownIt-Anchor\" href=\"#一个时间复杂度的问题\">#</a> 一个时间复杂度的问题</h3>\n<p>有一个字符串数组，将数组中的每一个字符串按照字母序排序；之后再将整个字符串数组按照字典序排序。整个操作的时间复杂度？</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/8cfiXUHkirne.png?imageslim\" alt=\"mark\"></p>\n<p>正确解答：</p>\n<ul>\n<li>假设最长的字符串长度为 s ；数组中有 n 个字符串</li>\n<li>对每个字符串排序：O（slogs）</li>\n<li>将数组中的每一个字符串按照字母序排序：O（n * slog (s) ）</li>\n<li>将整个字符串数组按照字典序排序：O（s * nlog (n) ）</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/Q5nKtKe1dCi7.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"算法复杂度在有些情况是用例相关的\"><a class=\"markdownIt-Anchor\" href=\"#算法复杂度在有些情况是用例相关的\">#</a> 算法复杂度在有些情况是用例相关的</h3>\n<ul>\n<li>\n<p>插入排序 O（n ^ 2）</p>\n<ul>\n<li>最差情况：O（n ^ 2）</li>\n<li>最好情况：O（n）</li>\n<li>平均情况：O（n ^ 2）</li>\n</ul>\n</li>\n<li>\n<p>快速排序算法 O （nlogn）</p>\n<ul>\n<li>最差情况：O（n ^ 2）</li>\n<li>最好情况：O（ nlogn ）</li>\n<li>平均情况：O（ nlogn ）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-2-对数据规模有一个概念\"><a class=\"markdownIt-Anchor\" href=\"#2-2-对数据规模有一个概念\">#</a> 2-2 对数据规模有一个概念</h2>\n<h3 id=\"抛出问题\"><a class=\"markdownIt-Anchor\" href=\"#抛出问题\">#</a> 抛出问题</h3>\n<p>对 10 ^ 5 的数据进行选择排序，结果计算机假死？</p>\n<ul>\n<li>如果要想在 1s 之内解决问题：\n<ul>\n<li>O（n ^ 2）的算法可以处理大约 10 ^ 4 级别的数据</li>\n<li>O（ n ）的算法可以处理大约 10 ^ 8 级别的数据</li>\n<li>O（ nlogn ）的算法可以处理大约 10 ^7 级别的数据</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"空间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#空间复杂度\">#</a> 空间复杂度</h3>\n<ul>\n<li>多开一个辅助的数组：O（n）</li>\n<li>多开一个辅助的二维数组：O（n ^ 2）</li>\n<li>多开常数空间：O（1）</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/7uFcA2L2OHhI.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"2-3-简单的复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#2-3-简单的复杂度分析\">#</a> 2-3 简单的复杂度分析</h2>\n<h3 id=\"o1\"><a class=\"markdownIt-Anchor\" href=\"#o1\">#</a> O（1）：</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/wmyLLvW5hvGh.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"o-n\"><a class=\"markdownIt-Anchor\" href=\"#o-n\">#</a> O（ n ）：</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/R4zqgJ9zJqqs.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/fujJT4N78Ybh.png?imageslim\" alt=\"mark\"></p>\n<p>1/2 *n 次 swap 操作也是：O (n) 。</p>\n<h3 id=\"on-2-选择排序\"><a class=\"markdownIt-Anchor\" href=\"#on-2-选择排序\">#</a> O（n ^ 2）: (选择排序)</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/HPtrTeSx6DsB.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/rh5JcB9dA8ux.png?imageslim\" alt=\"mark\"></p>\n<p>并不是所有双重循环都是 O（n ^ 2）：例如 【因为里面的循环次数是固定的 】</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/Vs0lBjzBPEi9.png?imageslim\" alt=\"mark\"></p>\n<p>下面算法是 O（logn）级别的： 【 自增并不是每次都加 1 】</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/QJC2YLSAOdAk.png?imageslim\" alt=\"mark\"></p>\n<p>下面算法是 O（ sqrt (n) ）【 判断 n 是不是 一个素数】</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/QeClcFN8EsWa.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"ologn-二分查找法\"><a class=\"markdownIt-Anchor\" href=\"#ologn-二分查找法\">#</a> O（logn）：（ 二分查找法 ）</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/HCC3KITFnmlL.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/Y18HXPKRMICe.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"整形转成字符串\"><a class=\"markdownIt-Anchor\" href=\"#整形转成字符串\">#</a> 整形转成字符串</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/gDCAKNS0NtKo.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"log-以-2-为底-和-以-10-为底有区别吗\"><a class=\"markdownIt-Anchor\" href=\"#log-以-2-为底-和-以-10-为底有区别吗\">#</a> log 以 2 为底 和 以 10 为底有区别吗</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190909/hhkkzyo7uTJM.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"2-4-亲自试验自己算法的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#2-4-亲自试验自己算法的时间复杂度\">#</a> 2-4 亲自试验自己算法的时间复杂度</h2>\n<h3 id=\"复杂度实验\"><a class=\"markdownIt-Anchor\" href=\"#复杂度实验\">#</a> 复杂度实验</h3>\n<p>实验，观察趋势</p>\n<p>每次 将数据规模提高两倍，看时间的变化</p>\n<h2 id=\"2-5-递归算法的复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#2-5-递归算法的复杂度分析\">#</a> 2-5 递归算法的复杂度分析</h2>\n<blockquote>\n<p>不是有递归的函数就一定是 O（ nlogn ）！</p>\n</blockquote>\n<h3 id=\"递归中进行一次递归调用的复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#递归中进行一次递归调用的复杂度分析\">#</a> 递归中进行一次递归调用的复杂度分析</h3>\n<p>二分法使用递归：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/Vrm1PVyknLyf.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/HKc9QUhHzufd.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/Mrr5oypWBxGk.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/1hAzDU4ifP7w.png?imageslim\" alt=\"mark\"></p>\n<p>引申：上述 函数增加求 负次幂？</p>\n<h3 id=\"递归中进行多次递归调用\"><a class=\"markdownIt-Anchor\" href=\"#递归中进行多次递归调用\">#</a> 递归中进行多次递归调用</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/DmVGKhPNOvil.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/vlrGbmrXl4uo.png?imageslim\" alt=\"mark\"></p>\n<p>深度不一样，并不是所有 多次递归调用 的时间复杂度 为：O（2 ^ n）</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/copG1I1hd0ya.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"递归函数的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#递归函数的时间复杂度\">#</a> 递归函数的时间复杂度</h4>\n<p>查阅 <strong>主定理</strong> （面试一般不考察）</p>\n<h2 id=\"2-6-均摊时间复杂度分析amortized-time-analysis\"><a class=\"markdownIt-Anchor\" href=\"#2-6-均摊时间复杂度分析amortized-time-analysis\">#</a> 2-6 均摊时间复杂度分析（Amortized Time Analysis）</h2>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/lH5rYQsGwqtN.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"2-7-避免复杂度的震荡\"><a class=\"markdownIt-Anchor\" href=\"#2-7-避免复杂度的震荡\">#</a> 2-7 避免复杂度的震荡</h2>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/glngyIU8g3Mi.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/AFsH4CLIkIE3.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"复杂度的震荡的解决方案\"><a class=\"markdownIt-Anchor\" href=\"#复杂度的震荡的解决方案\">#</a> 复杂度的震荡的解决方案</h3>\n<p><img src=\"http://static.zxinc520.com/blog/20190911/hwAvgAw9rUM1.png?imageslim\" alt=\"mark\"></p>\n",
            "tags": [
                "算法面试",
                "算法",
                "大 O？",
                "复杂度分析"
            ]
        }
    ]
}