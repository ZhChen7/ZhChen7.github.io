{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"js\" tag",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/08/04/JsBasicKnowledge01/",
            "url": "http://example.com/2019/08/04/JsBasicKnowledge01/",
            "title": "前端JS基础面试技巧上",
            "date_published": "2019-08-04T08:44:08.000Z",
            "content_html": "<h1 id=\"前端-js-基础面试技巧\"><a class=\"markdownIt-Anchor\" href=\"#前端-js-基础面试技巧\">#</a> 前端 JS 基础面试技巧</h1>\n<blockquote>\n<p>讲解 JS 基础语法相关的面试题，分析原理以及解答方法。这一章节讲解了基础知识的第一部分：变量的类型和计算。以及 JS “三座大山” —— 原型、作用域和异步中的： 原型和原型链、作用域和闭包。</p>\n<p>知识点：</p>\n<p>2-1 变量类型和计算</p>\n<p>2-2 原型和原型链</p>\n<p>2-3 函数声明和函数表达式</p>\n<p>2-4 作用域和闭包</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/A5zp7Ltc8RyD.png?imageslim\" alt=\"mark\"></p>\n<p><strong>关于面试</strong></p>\n<ul>\n<li>基层工程师 - <em>基础知识</em></li>\n<li>高级工程师 - <em>项目经验</em></li>\n<li>架构师 - <em>解决方案</em></li>\n</ul>\n<h2 id=\"先从几道面试题入手\"><a class=\"markdownIt-Anchor\" href=\"#先从几道面试题入手\">#</a> 先从几道面试题入手</h2>\n<ul>\n<li>JS 中使用 <strong>typeof</strong> 能得到的哪些类型？\n<ul>\n<li>考点：<em>JS 变量类型</em></li>\n</ul>\n</li>\n<li>何时使用 <strong>===</strong> 何时使用 **== **？\n<ul>\n<li>考点：<em>强制类型转换</em></li>\n</ul>\n</li>\n<li><strong>window.onload</strong> 和 <strong>DOMContentLoaded</strong> 的区别？\n<ul>\n<li>考点：<em>浏览器的渲染过程</em></li>\n</ul>\n</li>\n<li>用 JS 创建 10 个 a 标签，点击的时候弹出来对应的序号\n<ul>\n<li>考点：<em>作用域</em></li>\n</ul>\n</li>\n<li>简述如何实现一个<strong>模块加载器</strong>，实现类似 <strong>require.js</strong> 的基本功能\n<ul>\n<li>考点：<em>JS 模块化</em></li>\n</ul>\n</li>\n<li>实现数组的 <strong>随机排序</strong>\n<ul>\n<li>考点：<em>JS 基础算法</em></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/HysLOVvbjQLN.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/YKiIQGW864fb.png?imageslim\" alt=\"mark\"></p>\n<h1 id=\"知识体系\"><a class=\"markdownIt-Anchor\" href=\"#知识体系\">#</a> 知识体系</h1>\n<blockquote>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h2 id=\"2-1-变量类型和计算\"><a class=\"markdownIt-Anchor\" href=\"#2-1-变量类型和计算\">#</a> 2-1 变量类型和计算</h2>\n<blockquote>\n<p>2-1 变量类型和计算</p>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<ul>\n<li>JS 中使用 <strong>typeof</strong> 能得到的哪些类型？</li>\n<li>何时使用 <strong>===</strong> 何时使用 **== **？</li>\n<li>JS 中有哪些 <strong>内置函数</strong></li>\n<li>JS 变量按照 <strong>存储方式</strong> 分为哪些类型，并描述其特点</li>\n<li>如何理解 <strong>JSON</strong></li>\n</ul>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<ul>\n<li>变量类型\n<ul>\n<li>值类型 vs 引用类型</li>\n<li>typeof 运算符 详解</li>\n</ul>\n</li>\n<li>变量计算</li>\n</ul>\n<h3 id=\"变量类型\"><a class=\"markdownIt-Anchor\" href=\"#变量类型\">#</a> 变量类型</h3>\n<blockquote>\n<p>值类型 vs 引用类型</p>\n</blockquote>\n<h4 id=\"值类型\"><a class=\"markdownIt-Anchor\" href=\"#值类型\">#</a> 值类型</h4>\n<blockquote>\n<p><strong>值类型 (基本数据类型) 的值是按值访问的。</strong></p>\n<p>基本类型的值是<strong>不可变的</strong>，基本类型的比较是它们的<strong>值的比较</strong>，基本类型的变量是存放在 <strong>栈内存（Stack）里的</strong>。</p>\n<p><strong>JavaScript</strong> 数据<strong>类型</strong> 值<strong>类型</strong> (<strong>基本类型</strong>)：字符串（String）、数字 (Number)、布尔 (Boolean)、对空（Null）、未定义（Undefined）、Symbol (ES6 提供的新的类型)。</p>\n<p>6 种基本数据类型:<strong>string</strong>、<strong>number</strong>、<strong>boolean</strong>、<strong>undefined</strong>、<strong>null</strong> 、<strong>Symbol</strong> 。</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/Ss70W0DDyFPT.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"引用类型\"><a class=\"markdownIt-Anchor\" href=\"#引用类型\">#</a> 引用类型</h4>\n<blockquote>\n<p><strong>引用类型的值是按引用访问的。</strong></p>\n<p>引用类型的值是<strong>可变的</strong>，引用类型的比较是<strong>引用的比较</strong>，引用类型的值是保存在 <strong>堆内存（Heap）中的对象（Object）</strong>。</p>\n<p>特点：无限制扩展属性</p>\n<p><strong>3 种</strong> 主要引用类型：对象（<strong>Object</strong>）、数组（<strong>Array</strong>）、函数（<strong>Function</strong>）</p>\n<p>细分的话，有： <code>Object 类型</code> 、 <code>Array 类型</code> 、 <code>Date 类型</code> 、 <code>RegExp 类型</code> 、 <code>Function 类型</code>  等。</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/znhFw1Srcm3D.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h4>\n<blockquote>\n<p>** 值类型 (基本类型) **+ <strong>引用数据类型</strong></p>\n<p><u>7 种数据类型</u>：<strong>number</strong>、<strong>string</strong>、<strong>boolean</strong>、<strong>undefined</strong>、<strong>null</strong>、<strong>Symbol</strong> 、<strong>Object (Object、Array、Function)</strong> 。</p>\n</blockquote>\n<h4 id=\"typeof-运算符\"><a class=\"markdownIt-Anchor\" href=\"#typeof-运算符\">#</a> typeof 运算符</h4>\n<blockquote>\n<p><strong>7</strong> 种类型：<strong>undefined</strong>、<strong>string</strong>、<strong>number</strong>、<strong>boolean</strong>、<strong>object</strong>、<strong>function</strong> 、<strong>symbol</strong>（ES6 提供的新的类型）</p>\n<p>注意：typeof <strong>null</strong> // object</p>\n<p>typeof 运算符 <strong>只能</strong> 区分 <strong>值类型</strong> 的 类型，对于引用类型的 <strong>对象</strong>、<strong>数组</strong> <strong>区分不出来</strong> 。</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/k3tYgoHSpYgy.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"变量计算\"><a class=\"markdownIt-Anchor\" href=\"#变量计算\">#</a> 变量计算</h3>\n<blockquote>\n<p>这个主要针对值类型 - 强制类型转换</p>\n</blockquote>\n<p><strong>4 种强制类型转换：</strong></p>\n<ul>\n<li>字符串拼接</li>\n<li>== 运算符</li>\n<li>if 语句</li>\n<li>逻辑运算</li>\n</ul>\n<h4 id=\"字符串拼接\"><a class=\"markdownIt-Anchor\" href=\"#字符串拼接\">#</a> 字符串拼接</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/WBxaMX9CiLmz.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> == 运算符</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/PTp1mF5ulTVw.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"if-语句\"><a class=\"markdownIt-Anchor\" href=\"#if-语句\">#</a> if 语句</h4>\n<blockquote>\n<p>if 语句</p>\n<p><u>false 情况</u>：<strong>0</strong>、<strong>NaN</strong>、<strong>’&lt;空字符串&gt;’</strong>、<strong>null</strong>、<strong>undefine</strong> 、<strong>false</strong></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/C387EiaoakPe.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h4>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/4sGRvRvO2x65.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"何时使用-和\"><a class=\"markdownIt-Anchor\" href=\"#何时使用-和\">#</a> 何时使用 === 和 ==</h4>\n<blockquote>\n<p>何时使用 === 和 ==？</p>\n<p>解答：参考 jQuery 源码中推荐的写法，除了<strong>判断对象属性是否为空</strong> 和 ** 看是否函数的参数为空 ** 的情况 ，其余的都用 <strong>===</strong> 。</p>\n<p><code>==</code>  : 只进行值的比较</p>\n<p><code>===</code>  : 不仅进行值得比较，还要进行数据类型的比较</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/dfHpCgG4HQNR.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"js-中的内置函数\"><a class=\"markdownIt-Anchor\" href=\"#js-中的内置函数\">#</a> JS 中的内置函数</h4>\n<blockquote>\n<p>JS 中的内置函数的作用</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/BDtLCAEhGEUX.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"js-按存储方式区分变量类型\"><a class=\"markdownIt-Anchor\" href=\"#js-按存储方式区分变量类型\">#</a> JS 按存储方式区分变量类型</h4>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000006752076\">参考 1</a></p>\n<p><a href=\"https://www.cnblogs.com/leiting/p/8081413.html\">参考 2</a></p>\n<p>基本类型的值是不可变的</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/0cbg9UtuHTED.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"如何理解-json\"><a class=\"markdownIt-Anchor\" href=\"#如何理解-json\">#</a> 如何理解 JSON</h4>\n<blockquote>\n<p>JS 内置对象，Math 也是内置对象</p>\n<p>注意：JSON 既是一个 JS <strong>内置对象</strong>，也是一种 <strong>数据格式</strong>。</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/5bkwAGYcMzH8.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"2-2-原型和原型链\"><a class=\"markdownIt-Anchor\" href=\"#2-2-原型和原型链\">#</a> 2-2 原型和原型链</h2>\n<blockquote>\n<p>2-2 原型和原型链</p>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目-2\"><a class=\"markdownIt-Anchor\" href=\"#题目-2\">#</a> 题目</h3>\n<ul>\n<li>如何准确判断一个变量是 <strong>数组类型</strong></li>\n<li>写一个原型链继承的例子</li>\n<li>描述 new 一个对象的过程</li>\n<li>zepto (或其他框架) 源码中如何使用原型链</li>\n</ul>\n<h3 id=\"知识点-2\"><a class=\"markdownIt-Anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<ul>\n<li>构造函数</li>\n<li>构造函数 - 扩展</li>\n<li>原型规则和示例</li>\n<li>原型链</li>\n<li>instanceof</li>\n</ul>\n<h4 id=\"构造函数\"><a class=\"markdownIt-Anchor\" href=\"#构造函数\">#</a> 构造函数</h4>\n<blockquote>\n<p>函数名 习惯 <strong>第一个字母大写</strong>（ 高级程序员规范）</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/aYlOy0sAIxjg.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"构造函数扩展\"><a class=\"markdownIt-Anchor\" href=\"#构造函数扩展\">#</a> 构造函数扩展</h4>\n<blockquote>\n<p>构造函数扩展</p>\n<p>函数扩展 ---- <strong>语法糖</strong></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/KAiPkbgM6g8k.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"5-条原型规则和示例\"><a class=\"markdownIt-Anchor\" href=\"#5-条原型规则和示例\">#</a> 5 条原型规则和示例</h4>\n<blockquote>\n<p>5 条原型规则</p>\n<p><strong>原型规则</strong> 是学习 <strong>原型链</strong> 的基础</p>\n</blockquote>\n<p><strong>5 条原型规则 ：</strong></p>\n<ol>\n<li>\n<p>所有的 <strong>引用类型</strong> (对象，数组，函数)，都具有对象特性，即可 <strong>自由扩展</strong> 属性（除了 null 以外）。</p>\n</li>\n<li>\n<p>所有的 <strong>引用类型</strong> (对象，数组，函数)，都有一个 <code>__proto__</code>  （ <em>隐式原型</em> ）属性，属性值都是一个普通对象。</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/i237crTwXpRw.png?imageslim\" alt=\"mark\"></p>\n</li>\n<li>\n<p>所有的函数都有一个 <code>prototype</code>  （ <em>显示原型</em> ）属性，属性值是一个普通对象。</p>\n</li>\n<li>\n<p>所有的引用类型 (对象，数组，函数)， <code>__proto__</code> 属性值指向它的构造函数的 <code>prototype</code>  属性值。</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/gbOkNmykomux.png?imageslim\" alt=\"mark\"></p>\n</li>\n<li>\n<p>当试图得到一个引用类型的某个属性时，如果这个对象本身没有这个属性，那么会去它的 <code>__proto__</code> (即它的构造函数的 <code>prototype</code> ) 中去找。</p>\n</li>\n</ol>\n<p><strong>示例</strong> ：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/CKA2EOYdkSQ5.png?imageslim\" alt=\"mark\"></p>\n<p><strong>循环自身的属性：</strong></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190715/kAsCaFM5fgCq.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"原型链\"><a class=\"markdownIt-Anchor\" href=\"#原型链\">#</a> 原型链</h4>\n<blockquote>\n<p>这种搜索的轨迹，形似一条长链，又因 prototype 在这个游戏规则中充当链接的作用，于是我们把这种实例与原型的链条称作 <strong>原型链</strong></p>\n<p><a href=\"https://juejin.im/post/58f94c9bb123db411953691b\">参考</a></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/zjK7G9Pwib6K.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/hyX26borV0mF.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"instanceof\"><a class=\"markdownIt-Anchor\" href=\"#instanceof\">#</a> instanceof</h4>\n<blockquote>\n<p>用于 判断 <strong>引用类型</strong> 属于哪个 构造函数的方法</p>\n<p>**instanceof 运算符 ** 用于测试构造函数的 prototype 属性是否出现在对象的原型链中的任何位置</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\">参看 MDN</a></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/mHVNeyIgfsSE.png?imageslim\" alt=\"mark\"></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> make<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> auto <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Honda\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Accord\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1998</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>auto <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>auto <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"解答\"><a class=\"markdownIt-Anchor\" href=\"#解答\">#</a> 解答</h3>\n<ul>\n<li>\n<p>如何准确判断一个变量是 <strong>数组类型</strong></p>\n<ul>\n<li>arr instanceof Arrar</li>\n</ul>\n</li>\n<li>\n<p>写一个原型链继承的例子、</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Elem</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">html</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> elem <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    elem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//链式操作</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> elem<span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Elem</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">on</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> elem <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">;</span>\n  elem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> div1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndiv1<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p>hello world&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>\n<p>描述 new 一个对象的过程</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/fEURg05c9KBT.png?imageslim\" alt=\"mark\"></p>\n</li>\n<li>\n<p>zepto (或其他框架) 源码中如何使用原型链</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/6vDDJLlWz5AQ.png?imageslim\" alt=\"mark\"></p>\n</li>\n</ul>\n<h2 id=\"2-3-函数声明和函数表达式\"><a class=\"markdownIt-Anchor\" href=\"#2-3-函数声明和函数表达式\">#</a> 2-3 函数声明和函数表达式</h2>\n<blockquote>\n<p>函数声明和函数表达式</p>\n</blockquote>\n<h4 id=\"函数声明\"><a class=\"markdownIt-Anchor\" href=\"#函数声明\">#</a> 函数声明</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//执行</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//声明</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"函数表达式\"><a class=\"markdownIt-Anchor\" href=\"#函数表达式\">#</a> 函数表达式</h4>\n<blockquote>\n<p>把 var 定义的变量提前：相当于：先定义 <strong>var fn</strong> — &gt; 然后执行 <strong>fn()</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError: fn is not a function</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span>（）<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>相关的例子（函数执行的顺序）：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhouchen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//output：zhouchen 20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhouchen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 参数的集合</span>\n  age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\n    &#123; '0': 'zhouchen' &#125;\n    zhouchen 20\n    100\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-4-作用域和闭包\"><a class=\"markdownIt-Anchor\" href=\"#2-4-作用域和闭包\">#</a> 2-4 作用域和闭包</h2>\n<blockquote>\n<p>作用域和闭包</p>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目-3\"><a class=\"markdownIt-Anchor\" href=\"#题目-3\">#</a> 题目</h3>\n<ul>\n<li>说一下对变量提升的理解</li>\n<li>说明 this 几种 不同的使用场景</li>\n<li>创建 10 个 a 标签，点击的时候弹出来对应的序号</li>\n<li>如何理解作用域</li>\n<li>实际开发中闭包的应用</li>\n</ul>\n<h3 id=\"知识点-3\"><a class=\"markdownIt-Anchor\" href=\"#知识点-3\">#</a> 知识点</h3>\n<ul>\n<li>\n<p>执行上下文</p>\n</li>\n<li>\n<p>this</p>\n</li>\n<li>\n<p>作用域</p>\n</li>\n<li>\n<p>作用域链</p>\n</li>\n<li>\n<p>闭包</p>\n</li>\n</ul>\n<h4 id=\"执行上下文\"><a class=\"markdownIt-Anchor\" href=\"#执行上下文\">#</a> 执行上下文</h4>\n<blockquote>\n<p>执行上下文</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/slpXIRmFPFUC.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/yGYEzQ0mBi3H.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"this\"><a class=\"markdownIt-Anchor\" href=\"#this\">#</a> this</h4>\n<blockquote>\n<p>this 要在 <strong>执行时</strong> 才能确定值，<strong>定义时</strong> 无法确认</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/y7uMvda2zozx.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/X4ErfYyomFle.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"块级作用域\"><a class=\"markdownIt-Anchor\" href=\"#块级作用域\">#</a> 块级作用域</h4>\n<blockquote>\n<p>任何一对花括号中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。</p>\n<p><strong>JS</strong> 并 <strong>不支持 块级作用域</strong>，它<strong>只支持 函数作用域</strong> ，<u>而且在一个函数中的<strong>任何位置定义的变量</strong> 在该函数中的 <strong>任何地方都是可见的</strong> 。</u></p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"zhouchen\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// zhouchen</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"链式作用域\"><a class=\"markdownIt-Anchor\" href=\"#链式作用域\">#</a> 链式作用域</h4>\n<blockquote>\n<p><strong>如何从外部读取局部变量？</strong></p>\n<p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。</p>\n<p>那就是在函数的内部，再定义一个函数。</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 999</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上面的代码中，函数 f2 就被包括在函数 f1 内部，这时 f1 内部的所有局部变量，对 f2 都是可见的。但是反过来就不行，f2 内部的局部变量，对 f1 就是不可见的。这就是 Javascript 语言特有的 &quot;<strong>链式作用域&quot; 结构</strong>（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>\n<h4 id=\"闭包\"><a class=\"markdownIt-Anchor\" href=\"#闭包\">#</a> 闭包</h4>\n<blockquote>\n<p>上一节代码中的 f2 函数，就是闭包。</p>\n<p>简单来说：闭包就是 <strong>能够读取其他函数内部变量的函数</strong>。</p>\n<p>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成 <strong>定义在一个函数内部的函数</strong> 。</p>\n<p>所以，在本质上，<u>闭包就是将函数内部和函数外部连接起来的一座桥梁</u>。</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">参考阮一峰的网络日志 </a></p>\n</blockquote>\n<h4 id=\"闭包的用途\"><a class=\"markdownIt-Anchor\" href=\"#闭包的用途\">#</a> 闭包的用途</h4>\n<blockquote>\n<p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>\n</blockquote>\n<h4 id=\"实际开发中闭包的应用\"><a class=\"markdownIt-Anchor\" href=\"#实际开发中闭包的应用\">#</a> 实际开发中闭包的应用</h4>\n<blockquote>\n<p>实际开发中闭包的应用</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/oAEdrQVxx55a.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"解题\"><a class=\"markdownIt-Anchor\" href=\"#解题\">#</a> 解题</h3>\n<ul>\n<li>\n<p>说一下对变量提升的理解</p>\n<ul>\n<li>变量定义</li>\n<li>函数声明 （ 注意和 函数表达式 的区别）</li>\n</ul>\n</li>\n<li>\n<p>说明 this 几种 不同的使用场景</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/weixin_40387601/article/details/80313884\">参考 1</a></li>\n<li><a href=\"https://blog.csdn.net/sinat_32067081/article/details/53047149\">参考 2</a></li>\n</ul>\n</li>\n<li>\n<p>创建 10 个 a 标签，点击的时候弹出来对应的序号</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/jpCryHpWtFmQ.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/JOON77hWUAPT.png?imageslim\" alt=\"mark\"></p>\n</li>\n<li>\n<p>如何理解作用域</p>\n<ul>\n<li>自由变量</li>\n<li>作用域连，即自由变量的查找</li>\n<li>闭包的两个场景</li>\n</ul>\n</li>\n<li>\n<p>实际开发中闭包的应用</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190716/DOiHXt0yUzLP.png?imageslim\" alt=\"mark\"></p>\n</li>\n</ul>\n",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "http://example.com/2019/08/04/JsBasicKnowledge02/",
            "url": "http://example.com/2019/08/04/JsBasicKnowledge02/",
            "title": "前端JS基础面试技巧下",
            "date_published": "2019-08-04T08:44:08.000Z",
            "content_html": "<h1 id=\"前端-js-基础面试技巧\"><a class=\"markdownIt-Anchor\" href=\"#前端-js-基础面试技巧\">#</a> 前端 JS 基础面试技巧</h1>\n<blockquote>\n<p>前端 JS 基础面试技巧 – <strong>JS 基础知识下</strong></p>\n<p>JS 三座大山：<strong>原型原型链</strong> 、<strong>作用域闭包</strong> 、<strong>异步和单线程</strong> 。</p>\n<p>知识点：</p>\n<p>3-1 异步和单线程</p>\n<p>3-2 日期和 math</p>\n<ul>\n<li>日期</li>\n<li>Math</li>\n<li>数组 API</li>\n<li>对象 API</li>\n</ul>\n</blockquote>\n<h2 id=\"3-1-异步和单线程\"><a class=\"markdownIt-Anchor\" href=\"#3-1-异步和单线程\">#</a> 3-1 异步和单线程</h2>\n<blockquote>\n<p>异步和单线程</p>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<ul>\n<li>同步和异步的区别是什么？分别举一个同步和异步的例子</li>\n<li>一个关于 setTimeout 的笔试题</li>\n<li>前端使用异步的场景有哪些</li>\n</ul>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<ul>\n<li>什么是异步（对比同步）</li>\n<li>前端使用异步的场景</li>\n<li>异步个单线程</li>\n</ul>\n<h3 id=\"什么是异步\"><a class=\"markdownIt-Anchor\" href=\"#什么是异步\">#</a> 什么是异步</h3>\n<blockquote>\n<p>异步（Asynchronous）</p>\n<p>一般而言，操作分为发出调用和得到结果两步。发出调用后一直等待，直到拿到结果（这段时间不能做任何事）为 <strong>同步</strong> ；发出调用后不等待，继续执行下一个任务，就是 <strong>异步任务</strong> 。</p>\n<p><a href=\"https://www.jianshu.com/p/667936441cb5\">参考</a></p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n    100\n    300\n    200\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"何时需要异步\"><a class=\"markdownIt-Anchor\" href=\"#何时需要异步\">#</a> 何时需要异步？</h4>\n<ul>\n<li>\n<p>在可能发生等待的情况</p>\n</li>\n<li>\n<p>等待过程中不能像 alert 一样阻塞程序运行</p>\n</li>\n<li>\n<p>因此，所有的 “等待情况” 都需要异步</p>\n</li>\n</ul>\n<h4 id=\"前端使用异步的场景\"><a class=\"markdownIt-Anchor\" href=\"#前端使用异步的场景\">#</a> 前端使用异步的场景</h4>\n<ul>\n<li>\n<p>定时任务：<strong>setTimeout</strong>，<strong>setInterval</strong></p>\n</li>\n<li>\n<p>网络请求：<strong>ajax 请求</strong>，<strong>动态</strong> &lt;<strong>img</strong>&gt; <strong>加载</strong></p>\n</li>\n<li>\n<p><strong>事件绑定</strong></p>\n</li>\n</ul>\n<h3 id=\"单线程\"><a class=\"markdownIt-Anchor\" href=\"#单线程\">#</a> 单线程</h3>\n<blockquote>\n<p><strong>Javascript 是单线程的</strong> <a href=\"https://www.cnblogs.com/Mainz/p/3552717.html\">参考</a></p>\n<p>JS 的单线程是指一个浏览器进程中只有一个 JS 的执行线程，同一时刻内只会有一段代码在执行</p>\n<p>在某个特定的时刻只有特定的代码能够被执行，并 <strong>阻塞</strong> 其它的代码。</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>上面代码执行过程：</strong></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190717/kEQlmncCXtel.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"重点总结\"><a class=\"markdownIt-Anchor\" href=\"#重点总结\">#</a> 重点总结</h4>\n<ul>\n<li>异步和同步的区别</li>\n<li>异步和单线程的关系</li>\n<li>异步在前端的引用场景</li>\n</ul>\n<h3 id=\"解答\"><a class=\"markdownIt-Anchor\" href=\"#解答\">#</a> 解答</h3>\n<ul>\n<li>\n<p>同步和异步的区别是什么？分别举一个同步和异步的例子</p>\n<ul>\n<li>\n<p><em>同步</em> 是 <strong>阻塞模式</strong> ，<em>异步</em> 是 <strong>非阻塞模式</strong> 。</p>\n<p><em>同步</em> 就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会 <strong>一直等待下去</strong> ，知道收到返回信息才继续执行下去；</p>\n<p><em>异步</em> 是指进程 <strong>不需要一直等下去</strong> ，而是 <strong>继续执行下面的操作</strong>，不管其他进程的状态。当有消息返回式系统会通知进程进行处理，这样可以提高执行的效率。</p>\n</li>\n<li>\n<p>alert 是 同步， setTimeout 是 异步</p>\n</li>\n</ul>\n</li>\n<li>\n<p>一个关于 setTimeout 的笔试题</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* \n\t1\n    3\n    5\n    2\n    4\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>前端使用异步的场景有哪些\n<ul>\n<li>定时任务：<strong>setTimeout</strong>，<strong>setInterval</strong></li>\n<li>网络请求：<strong>ajax 请求</strong>，<strong>动态</strong> &lt;<strong>img</strong>&gt; <strong>加载</strong></li>\n<li><strong>事件绑定</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-2-日期和-math\"><a class=\"markdownIt-Anchor\" href=\"#3-2-日期和-math\">#</a> 3-2 日期和 math</h2>\n<blockquote>\n<p>题目</p>\n<p>知识点</p>\n<p>解答</p>\n</blockquote>\n<h3 id=\"题目-2\"><a class=\"markdownIt-Anchor\" href=\"#题目-2\">#</a> 题目</h3>\n<ul>\n<li>获取 2017 -06 -10 格式的日期</li>\n<li>获取 随机数，要求是长度一致 的字符串格式</li>\n<li>写一个 能遍历对象 和数组 的通用 forEach 函数</li>\n</ul>\n<h3 id=\"知识点-2\"><a class=\"markdownIt-Anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<ul>\n<li>日期</li>\n<li>Math</li>\n<li>数组 API</li>\n<li>对象 API</li>\n</ul>\n<h4 id=\"日期\"><a class=\"markdownIt-Anchor\" href=\"#日期\">#</a> 日期</h4>\n<blockquote>\n<p><strong>日期对象用于处理日期和时间。</strong></p>\n<p><a href=\"http://www.w3school.com.cn/jsref/jsref_obj_date.asp\">JavaScript Date 对象 API</a></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190717/3ijIzI0Frks1.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"math\"><a class=\"markdownIt-Anchor\" href=\"#math\">#</a> Math</h4>\n<blockquote>\n<p><strong>Math</strong> 是一个内置对象， 它具有数学常数和函数的属性和方法。不是一个函数对象。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math Api</a></p>\n<p>描述：与其它全局对象不同的是， <code>Math</code>  不是一个构造器.  <code>Math</code>  的所有属性和方法都是静态的。你用到的常数 pi 可以用  <code>Math.PI</code>  表示，用  <code>x</code>  作参数 Math.sin (x) 调用 sin 函数. JavaScript 中的常数，是以全精度的实数定义的.</p>\n<p>Math.random () 在前端的作用：随时改变，清除缓存。</p>\n</blockquote>\n<h4 id=\"数组-api\"><a class=\"markdownIt-Anchor\" href=\"#数组-api\">#</a> 数组 API</h4>\n<blockquote>\n<p><a href=\"http://louiszhai.github.io/2017/04/28/array/#Array%E6%9E%84%E9%80%A0%E5%99%A8\">参考</a></p>\n<p>详情可以参考我的博客：<a href=\"http://zxinc520.com/lcj/%225d119841fd02ab26e068eb0a%22\">JavaScript 数组那些事</a></p>\n</blockquote>\n<p><strong>面试官最常问的几个</strong> ：</p>\n<ul>\n<li>forEach 遍历所有元素</li>\n<li>every 判断所有元素是否都符合条件</li>\n<li>some 判断是否有至少一个元素符合条件</li>\n<li>sort 排序</li>\n<li>map 对元素重新组装，生成新数组</li>\n<li>filter 过滤符合条件的元素</li>\n</ul>\n<h4 id=\"对象-api\"><a class=\"markdownIt-Anchor\" href=\"#对象-api\">#</a> 对象 API</h4>\n<blockquote>\n<p><strong>Object.prototype API</strong></p>\n<p><code>Object.prototype</code>  表示对象的原型对象<br>\n <code>Object.prototype</code>  属性的属性特征</p>\n<p><a href=\"https://www.jianshu.com/p/2f43db2b656c\">参考</a></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190717/mOpzx9LK1xmu.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"解答-2\"><a class=\"markdownIt-Anchor\" href=\"#解答-2\">#</a> 解答</h3>\n<ul>\n<li>获取 2019-07-17 格式的日期</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    dt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">var</span> dt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> year <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> month <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>month <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    month <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> month<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    data <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> year <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> month <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> dt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//  2019-07-17</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>获取 随机数，要求是长度一致 的字符串格式</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> random <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrandom <span class=\"token operator\">=</span> random <span class=\"token operator\">+</span> <span class=\"token string\">\"0000000000\"</span><span class=\"token punctuation\">;</span>\nrandom <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>写一个 能遍历对象 和数组 的通用 forEach 函数</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 写一个 能遍历对象 和数组 的通用 forEach 函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 使用  forEach 函数</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token string\">\"---\"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t2---1\n    3---2\n    x 100\n    y 200\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "JS"
            ]
        }
    ]
}