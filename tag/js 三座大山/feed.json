{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"js 三座大山\" tag",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/03/23/getOfferScopeandclosure/",
            "url": "http://example.com/2020/03/23/getOfferScopeandclosure/",
            "title": "作用域和闭包",
            "date_published": "2020-03-23T09:18:21.000Z",
            "content_html": "<h2 id=\"专题总结作用域和闭包\"><a class=\"markdownIt-Anchor\" href=\"#专题总结作用域和闭包\">#</a> 专题总结：作用域和闭包</h2>\n<blockquote>\n<p>拿到 字节跳动实习生 offer 总结</p>\n<p>回馈分享一波自己的知识点总结</p>\n</blockquote>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【作用域和闭包】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h2 id=\"一-作用域和作用域链概念\"><a class=\"markdownIt-Anchor\" href=\"#一-作用域和作用域链概念\">#</a> 一、作用域和作用域链概念</h2>\n<h3 id=\"11-作用域\"><a class=\"markdownIt-Anchor\" href=\"#11-作用域\">#</a> 1.1、作用域</h3>\n<h4 id=\"111-作用域是什么\"><a class=\"markdownIt-Anchor\" href=\"#111-作用域是什么\">#</a> 1.1.1、作用域是什么</h4>\n<p>作用域本质就是程序源代码中定义变量的区域，它可以解释为一套规则，是关于 JS 引擎如何寻找变量以及会在何处找到变量的规则。</p>\n<h4 id=\"112-作用域分为哪些\"><a class=\"markdownIt-Anchor\" href=\"#112-作用域分为哪些\">#</a> 1.1.2、作用域分为哪些</h4>\n<ul>\n<li>词法作用域（静态作用域）\n<ul>\n<li>词法作用域是在写代码时就确定了作用域（不使用 eval 和 with 的前提下，这两个现在基本不使用，因此不讲了），即静态作用域</li>\n</ul>\n</li>\n<li>动态作用域\n<ul>\n<li>而动态作用域是在代码运行时动态确定的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-作用域链\"><a class=\"markdownIt-Anchor\" href=\"#12-作用域链\">#</a> 1.2、作用域链</h3>\n<h4 id=\"121-作用域链是什么\"><a class=\"markdownIt-Anchor\" href=\"#121-作用域链是什么\">#</a> 1.2.1、作用域链是什么</h4>\n<p>作用域链实际上是指向变量对象的指针列表，它只引用但不实际包含变量对象，它的用途是保证对执行环境有权访问的所有变量和函数的有序访问。</p>\n<p>简单来说：作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是作用域链。</p>\n<h5 id=\"两个重要概念\"><a class=\"markdownIt-Anchor\" href=\"#两个重要概念\">#</a> 两个重要概念：</h5>\n<ul>\n<li>\n<p>变量对象</p>\n<p>每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中（变量对象其实就是作用域这个抽象概念的具体值），比如一个函数中包含的局部变量，它的参数，它里面声明的函数都存在变量对象中。（一个当前执行函数的变量对象最开始时就包含一个 arguments 对象，这个对象用来装函数括号内的参数，所以全局环境的变量对象没有这个）</p>\n</li>\n<li>\n<p>执行环境</p>\n<p>也可以叫执行上下文，这里定义了变量或函数有权访问的其他数据，当一个函数被执行时，他的执行环境会被推入环境栈，执行之后才会被弹出，把控制权返回给之前的执行环境。</p>\n</li>\n</ul>\n<h2 id=\"二-闭包\"><a class=\"markdownIt-Anchor\" href=\"#二-闭包\">#</a> 二、闭包</h2>\n<h3 id=\"21-闭包是什么\"><a class=\"markdownIt-Anchor\" href=\"#21-闭包是什么\">#</a> 2.1、闭包是什么</h3>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包最常用的方式就是在一个函数内部创建另一个函数。</p>\n<h3 id=\"22-闭包的作用\"><a class=\"markdownIt-Anchor\" href=\"#22-闭包的作用\">#</a> 2.2、闭包的作用</h3>\n<ol>\n<li>\n<p>能够访问函数定义时所在的词法作用域 (阻止其被回收)。</p>\n</li>\n<li>\n<p>私有化变量</p>\n</li>\n<li>\n<p>模拟块级作用域</p>\n</li>\n<li>\n<p>创建模块</p>\n<ul>\n<li>两个必备的条件 (来自《你不知道的 JavaScript》)\n<ul>\n<li>必须有外部的封闭函数，该函数必须至少被调用一次 (每次调用都会创建一个新的模块实例)</li>\n<li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">coolModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Yvette\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">sayAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    sayName<span class=\"token punctuation\">,</span>\n    sayAge<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> info <span class=\"token operator\">=</span> <span class=\"token function\">coolModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninfo<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'Yvette'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"23-闭包的缺点\"><a class=\"markdownIt-Anchor\" href=\"#23-闭包的缺点\">#</a> 2.3、闭包的缺点</h3>\n<p>闭包会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏</p>\n<p>2.4、经典题目（闭包）</p>\n<blockquote>\n<p>函数自增</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "面试全面总结",
                "JS 三座大山"
            ]
        },
        {
            "id": "http://example.com/2020/03/23/getOfferPrototypesandprototypechains/",
            "url": "http://example.com/2020/03/23/getOfferPrototypesandprototypechains/",
            "title": "原型和原型链",
            "date_published": "2020-03-23T09:18:21.000Z",
            "content_html": "<h2 id=\"javascript-原型和原型链\"><a class=\"markdownIt-Anchor\" href=\"#javascript-原型和原型链\">#</a> JavaScript 原型和原型链</h2>\n<blockquote>\n<p>拿到 字节跳动实习生 offer 总结</p>\n<p>回馈分享一波自己的知识点总结</p>\n</blockquote>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【原型和原型链】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h2 id=\"一-原型和原型定义\"><a class=\"markdownIt-Anchor\" href=\"#一-原型和原型定义\">#</a> 一、原型和原型定义</h2>\n<h3 id=\"11-背景\"><a class=\"markdownIt-Anchor\" href=\"#11-背景\">#</a> 1.1、背景</h3>\n<p>JavaScript 中除了基础类型外的数据类型，都是对象（引用类型）。但是由于其没有 类（class，ES6 引入了 class，但其只是语法糖）的概念，如何将所有对象联系起来就成立一个问题，于是就有了原型和原型链的概念。</p>\n<h3 id=\"12-原型是什么\"><a class=\"markdownIt-Anchor\" href=\"#12-原型是什么\">#</a> 1.2、原型是什么？</h3>\n<blockquote>\n<p>原型是一个 prototype 对象，用于表示对象之间的关系。</p>\n</blockquote>\n<h3 id=\"13-原型链\"><a class=\"markdownIt-Anchor\" href=\"#13-原型链\">#</a> 1.3、原型链</h3>\n<p>每个实例对象（ object ）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（prototype ）。该原型对象也有一个自己的原型对象 ( <strong>proto</strong> ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。以上一整个原型与原型层层相链接的过程即为原型链</p>\n<h3 id=\"14-公式\"><a class=\"markdownIt-Anchor\" href=\"#14-公式\">#</a> 1.4、公式</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> 对象 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">函数</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n对象<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">对象的构造函数</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"二-7-大继承写法\"><a class=\"markdownIt-Anchor\" href=\"#二-7-大继承写法\">#</a> 二、7 大继承写法</h2>\n<blockquote>\n<p>常考点【熟练掌握】</p>\n</blockquote>\n<h3 id=\"21-原型链继承\"><a class=\"markdownIt-Anchor\" href=\"#21-原型链继承\">#</a> 2.1、原型链继承</h3>\n<ul>\n<li>\n<p>原型链继承的基本思想：是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p>\n<p>如 SubType.prototype = new SuperType ();</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Yvette\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">SubType</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>通过原型来实现继承时，原型会变成另一个类型的实例，原先的实例属性变成了现在的原型属性，该原型的引用类型属性会被所有的实例共享</li>\n<li>在创建子类型的实例时，不能向超类型的构造函数中传递参数</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"22-借用构造函数\"><a class=\"markdownIt-Anchor\" href=\"#22-借用构造函数\">#</a> 2.2、借用构造函数</h3>\n<ul>\n<li>\n<p>其基本思想为：在子类型的构造函数中调用超类型构造函数。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">SuperType</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>可以向超类传递参数</li>\n<li>解决了原型中包含引用类型值被所有实例共享的问题</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>方法都在构造函数中定义，函数复用无从谈起</li>\n<li>另外超类型原型中定义的方法对于子类型而言都是不可见的</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"23-组合继承\"><a class=\"markdownIt-Anchor\" href=\"#23-组合继承\">#</a> 2.3、组合继承</h3>\n<ul>\n<li>\n<p>组合继承指的是将原型链和借用构造函数技术组合到一块，从而发挥二者之长的一种继承模式。基本思路：使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承，既通过在原型上定义方法来实现了函数复用，又保证了每个实例都有自己的属性。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zc\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pink\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">SuperType</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">SubType</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SubType</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> SubType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[ 'pink', 'blue', 'green', 'red' ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[ 'pink', 'blue', 'green' ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>可以向超类传递参数</li>\n<li>每个实例都有自己的属性</li>\n<li>实现了函数复用</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>无论什么情况下，都会调用两次超类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"24-原型式继承\"><a class=\"markdownIt-Anchor\" href=\"#24-原型式继承\">#</a> 2.4、原型式继承</h3>\n<ul>\n<li>\n<p>原型式继承继承的基本思想：在 object () 函数内部，先创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例，从本质上讲，object () 对传入的对象执行了一次浅拷贝。</p>\n<p>ECMAScript5 通过新增 Object.create () 方法规范了原型式继承。这个方法接收两个参数：一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象 (可以覆盖原型对象上的同名属性)，在传入一个参数的情况下，Object.create () 和 object () 方法的行为相同。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>同原型链实现继承一样，包含引用类型值的属性会被所有实例共享</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"25-寄生式继承\"><a class=\"markdownIt-Anchor\" href=\"#25-寄生式继承\">#</a> 2.5、寄生式继承</h3>\n<ul>\n<li>\n<p>寄生式继承是与原型式继承紧密相关的一种思路。寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部已某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAnother</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//通过调用函数创建一个新对象</span>\n  clone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//以某种方式增强这个对象</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回这个对象</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>基于 person 返回了一个新对象 -—— person2，新对象不仅具有 person 的所有属性和方法，而且还有自己的 sayHi () 方法。在考虑对象而不是自定义类型和构造函数的情况下，寄生式继承也是一种有用的模式。</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>使用寄生式继承来为对象添加函数，会由于不能做到函数复用而效率低下。</li>\n<li>同原型链实现继承一样，包含引用类型值的属性会被所有实例共享。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"26-寄生组合式继承\"><a class=\"markdownIt-Anchor\" href=\"#26-寄生组合式继承\">#</a> 2.6、寄生组合式继承</h3>\n<ul>\n<li>\n<p>所谓寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法，基本思路：</p>\n<p>不必为了指定子类型的原型而调用超类型的构造函数，我们需要的仅是超类型原型的一个副本，本质上就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subType<span class=\"token punctuation\">,</span> superType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> prototype <span class=\"token operator\">=</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span>superType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建对象</span>\n  prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> subType<span class=\"token punctuation\">;</span> <span class=\"token comment\">//增强对象</span>\n  subType<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指定对象</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pink\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SuberType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">SuperType</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>SuberType<span class=\"token punctuation\">,</span> SuperType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>步骤</p>\n<p>第一步：创建超类型原型的一个副本</p>\n<p>第二步：为创建的副本添加 constructor 属性</p>\n<p>第三步：将新创建的对象赋值给子类型的原型</p>\n</li>\n<li>\n<p>优点</p>\n<ol>\n<li>只调用了一次超类构造函数，效率更高。避免在 SuberType.prototype 上面创建不必要的、多余的属性，与其同时，原型链还能保持不变。因此寄生组合继承是引用类型最理性的继承范式。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"27-es6-继承\"><a class=\"markdownIt-Anchor\" href=\"#27-es6-继承\">#</a> 2.7、ES6 继承</h3>\n<ul>\n<li>\n<p>Class 可以通过 extends 关键字实现继承</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperType</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubType</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperType</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类的constructor(x, y)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>对于 ES6 的 class 需要做以下几点说明</p>\n<ol>\n<li>class 声明会提升，但不会初始化赋值。Foo 进入暂时性死区，类似于 let、const 声明变量。</li>\n<li>class 声明内部会启用严格模式。</li>\n<li>class 的所有方法（包括静态方法和实例方法）都是不可枚举的。</li>\n<li>class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有 [[construct]]，不能使用 new 来调用。</li>\n<li>必须使用 new 调用 class</li>\n<li>class 内部无法重写类名</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"使用-extends-关键字实现继承有几点需要特别说明\"><a class=\"markdownIt-Anchor\" href=\"#使用-extends-关键字实现继承有几点需要特别说明\">#</a> 使用 extends 关键字实现继承，有几点需要特别说明</h4>\n<ul>\n<li>子类必须在 constructor 中调用 super 方法，否则新建实例时会报错。如果没有子类没有定义 constructor 方法，那么这个方法会被默认添加。在子类的构造函数中，只有调用 super 之后，才能使用 this 关键字，否则报错。这是因为子类实例的构建，基于父类实例，只有 super 方法才能调用父类实例。</li>\n<li>ES5 的继承，实质是先创造子类的实例对象 this，然后再将父类的方法添加到 this 上面（Parent.apply (this)）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到 this 上面（所以必须先调用 super 方法），然后再用子类的构造函数修改 this</li>\n</ul>\n<h2 id=\"三-相关题目\"><a class=\"markdownIt-Anchor\" href=\"#三-相关题目\">#</a> 三、相关题目</h2>\n<h3 id=\"31-写一个原型链继承的例子\"><a class=\"markdownIt-Anchor\" href=\"#31-写一个原型链继承的例子\">#</a> 3.1、写一个原型链继承的例子</h3>\n<ul>\n<li>详细请观看上文。</li>\n</ul>\n<h3 id=\"32-描述-new-一个对象的过程\"><a class=\"markdownIt-Anchor\" href=\"#32-描述-new-一个对象的过程\">#</a> 3.2、描述 new 一个对象的过程</h3>\n<h4 id=\"321-思路分析\"><a class=\"markdownIt-Anchor\" href=\"#321-思路分析\">#</a> 3.2.1、思路分析</h4>\n<ol>\n<li>创建一个新对象 obj</li>\n<li>把 obj 的<strong> proto</strong> 指向 构造函数.prototype 实现继承</li>\n<li>执行构造函数，传递参数，改变 this 指向</li>\n<li>最后把 obj 返回</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">伪代码：<span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\tobj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果无返回值或者返回一个非对象值，则将obj返回作为新对象</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"322-优秀的写法\"><a class=\"markdownIt-Anchor\" href=\"#322-优秀的写法\">#</a> 3.2.2、优秀的写法</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">_new</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ret <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">?</span> ret <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>或</strong> 【个人倾向于后面一种】</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">_new</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ret <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">?</span> ret <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"323-为什么-return-ret-instanceof-object-ret-obj-需要存在这一步骤\"><a class=\"markdownIt-Anchor\" href=\"#323-为什么-return-ret-instanceof-object-ret-obj-需要存在这一步骤\">#</a> 3.2.3、为什么  <code>return ret instanceof Object ? ret : obj;</code>  需要存在这一步骤？</h4>\n<blockquote>\n<p>这是因为 new 一个实例的时候，如果没有 return，</p>\n<p>就会根据构造函数内部 this 绑定的值生成对象，如果有返回值，</p>\n<p>就会根据返回值生成对象，为了模拟这一效果，就需要判断 apply 后是否有返回值。</p>\n</blockquote>\n<h4 id=\"324-总结-new-的过程中发生了什么\"><a class=\"markdownIt-Anchor\" href=\"#324-总结-new-的过程中发生了什么\">#</a> 3.2.4、总结 new 的过程中发生了什么</h4>\n<ol>\n<li>\n<p>令 john 的<strong> proto</strong> 属性指向 Person.prototype，确立了这条原型链， 导致 john 能通过原型链继承 Person.prototype 中的部分属性，可以简单地视 john 和 Person.prototype 是继承关系。</p>\n</li>\n<li>\n<p>john 是 Person 构造函数 的实例 john instanceof Person; //true</p>\n</li>\n<li>\n<p>我们再来了解一下 instanceof 的内部原理，以应证我们的图是正确的</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token constant\">L</span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">R</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">L</span> <span class=\"token operator\">===</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n",
            "tags": [
                "面试全面总结",
                "JS 三座大山"
            ]
        },
        {
            "id": "http://example.com/2020/03/23/getOfferSinglethreadedandasynchronous/",
            "url": "http://example.com/2020/03/23/getOfferSinglethreadedandasynchronous/",
            "title": "单线程和异步",
            "date_published": "2020-03-23T09:18:21.000Z",
            "content_html": "<h2 id=\"专题总结单线程和异步\"><a class=\"markdownIt-Anchor\" href=\"#专题总结单线程和异步\">#</a> 专题总结：单线程和异步</h2>\n<blockquote>\n<p>拿到 字节跳动实习生 offer 总结</p>\n<p>回馈分享一波自己的知识点总结</p>\n</blockquote>\n<blockquote>\n<p>希望读者依此构建自己的知识树（思维导图）</p>\n<p>偷懒一下：可参考我自己总结思维导图 : <a href=\"https://github.com/ZhChen7/Interview-mind-map\">点这里</a></p>\n<p>附带：高频面试题积累文档。 来自于（学长、牛客网等平台）</p>\n<p>自己开发的博客地址：<a href=\"http://zxinc520.com/\">zxinc520.com</a></p>\n<p>github 地址: <a href=\"https://github.com/ZhChen7\">点击</a></p>\n</blockquote>\n<blockquote>\n<p>此篇 js - 【单线程和异步】 知识点： 全部弄懂了，面试很容易。</p>\n</blockquote>\n<h2 id=\"一-单线程和异步\"><a class=\"markdownIt-Anchor\" href=\"#一-单线程和异步\">#</a> 一、单线程和异步</h2>\n<h3 id=\"11-同步-vs-异步\"><a class=\"markdownIt-Anchor\" href=\"#11-同步-vs-异步\">#</a> 1.1、同步 vs 异步</h3>\n<ul>\n<li>同步是什么？\n<ul>\n<li>简单来说：一定要等任务执行完了，得到结果，才执行下一个任务。</li>\n<li>指某段程序执行时会阻塞其它程序执行，其表现形式为程序的执行顺序依赖程序本身的书写顺序</li>\n</ul>\n</li>\n<li>异步是什么？\n<ul>\n<li>指某段程序执行时不会阻塞其它程序执行，其表现形式为程序的执行顺序不依赖程序本身的书写顺序</li>\n<li>实现方式：event loop【事件轮询】</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-异步和单线程\"><a class=\"markdownIt-Anchor\" href=\"#12-异步和单线程\">#</a> 1.2、异步和单线程</h3>\n<ul>\n<li>\n<p>单线程</p>\n<ul>\n<li>是什么？单线程就是同时只做一件事，两段 JS 不能同时 执行</li>\n<li>为什么是单线程？\n<ul>\n<li>避免 DOM 渲染的冲突\n<ol>\n<li>浏览器需要渲染 DOM</li>\n<li>JS 可以修改 DOM 结构</li>\n<li>JS 执行的时候，浏览器 DOM 渲染会暂停</li>\n<li>两段 JS 也不能同时执行（都修改 DOM 就冲突了）</li>\n<li>webworker 支持多线程，但是不能访问 DOM</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>单线程的解决方案 ？</p>\n<ul>\n<li>异步\n<ul>\n<li>异步暴露出的问题\n<ol>\n<li>没按照书写方式执行，可读性差</li>\n<li>callback 中不容易模块化</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>event loop</p>\n<ul>\n<li>是什么？</li>\n<li>事件轮询， JS 实现异步 的具体解决方案</li>\n<li>具体\n<ul>\n<li>同步代码，直接执行</li>\n<li>异步函数先放在 异步队列 中</li>\n<li>待同步函数执行完毕，轮询执行 异步队列 的函数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"13-宏队列和微队列\"><a class=\"markdownIt-Anchor\" href=\"#13-宏队列和微队列\">#</a> 1.3、宏队列和微队列</h3>\n<blockquote>\n<p><code>macrotask</code> （宏任务） 和  <code>microtask</code> （微任务）</p>\n<p>面试常考题【promise 回调函数和定时器任务的顺序问题】</p>\n</blockquote>\n<ul>\n<li>\n<p>宏任务：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">script</span><span class=\"token punctuation\">(</span>整体代码<span class=\"token punctuation\">)</span>\nsetTimeout\nsetInterval\n<span class=\"token constant\">I</span><span class=\"token operator\">/</span><span class=\"token constant\">O</span>\n<span class=\"token constant\">UI</span>交互事件\npostMessage\nMessageChannel\n<span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">.</span>js 环境<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>微任务</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span>then\nObject<span class=\"token punctuation\">.</span>observe\nMutaionObserver\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">.</span>js 环境<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<p>执行机制：</p>\n<ol>\n<li>执行一个宏任务（栈中没有就从事件队列中获取）</li>\n<li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>\n<li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>\n<li>当前宏任务执行完毕，开始检查渲染，然后 GUI 线程接管渲染</li>\n<li>渲染完毕后，JS 引擎线程继续，开始下一个宏任务（从宏任务队列中获取）</li>\n</ol>\n<h4 id=\"经典面试题\"><a class=\"markdownIt-Anchor\" href=\"#经典面试题\">#</a> 经典面试题</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"promise1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"promise1 end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"promise2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settimeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"async1 start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"async1 end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"async2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出顺序：script start->async1 start->async2->script end->async1 end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"14-前端异步的场景\"><a class=\"markdownIt-Anchor\" href=\"#14-前端异步的场景\">#</a> 1.4、前端异步的场景</h3>\n<ul>\n<li>简单来说：所有的 “等待情况” 都需要异步</li>\n<li>定时任务：setTimeout，setInterval</li>\n<li>网络请求：ajax 请求，动态 &lt;<em>img</em> &gt; 加载</li>\n<li>事件绑定</li>\n</ul>\n<h3 id=\"15-web-worker\"><a class=\"markdownIt-Anchor\" href=\"#15-web-worker\">#</a> 1.5、Web Worker</h3>\n<blockquote>\n<p>就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p>\n</blockquote>\n<h3 id=\"16-模块化发展历程\"><a class=\"markdownIt-Anchor\" href=\"#16-模块化发展历程\">#</a> 1.6、模块化发展历程</h3>\n<blockquote>\n<p>可从 IIFE、AMD、CMD、CommonJS、UMD、webpack (require.ensure)、ES Module、&lt;<em>script type=“module”</em> &gt; 这几个角度考虑。</p>\n<p><strong>作用</strong> ：模块化主要是用来抽离公共代码，隔离作用域，避免变量冲突等。</p>\n</blockquote>\n<ol>\n<li>\n<p>IIFE</p>\n<ul>\n<li>\n<p>使用自执行函数来编写模块化</p>\n</li>\n<li>\n<p>特点：</p>\n<p>在一个单独的函数作用域中执行代码，避免变量冲突。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>AMD</p>\n<ul>\n<li>\n<p>使用 requireJS 来编写模块化</p>\n</li>\n<li>\n<p>特点：依赖必须提前声明好</p>\n</li>\n<li>\n<p>简单实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// code 就是index.js 返回的内容</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>CMD</p>\n<ul>\n<li>\n<p>使用 seaJS 来编写模块化</p>\n</li>\n<li>\n<p>特点：支持动态引入依赖文件</p>\n</li>\n<li>\n<p>简单实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> indexCode <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>CommonJS</p>\n<ul>\n<li>nodejs 中自带的模块化</li>\n<li>var fs = require(‘fs’);</li>\n</ul>\n</li>\n<li>\n<p>UMD</p>\n<ul>\n<li>兼容 AMD，CommonJS 模块化语法</li>\n</ul>\n</li>\n<li>\n<p>webpack(require.ensure)</p>\n<ul>\n<li>webpack 2.x 版本中的代码分割</li>\n</ul>\n</li>\n<li>\n<p>ES Modules</p>\n<ul>\n<li>ES6 引入的模块化，支持 import 来引入另一个 js</li>\n<li>import a from ‘a’;</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"161-amd-与-cmd-的比较\"><a class=\"markdownIt-Anchor\" href=\"#161-amd-与-cmd-的比较\">#</a> 1.6.1、AMD 与 CMD 的比较</h4>\n<ul>\n<li>\n<p>定义</p>\n<p>AMD 和 CMD 都是用于浏览器端的模块规范</p>\n</li>\n<li>\n<p>AMD</p>\n<ul>\n<li>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出</li>\n<li>其主要内容就是定义了 define 函数该如何书写，只要你按照这个规范书写模块和依赖，require.js 就能正确的进行解析。</li>\n</ul>\n</li>\n<li>\n<p>CMD</p>\n<ul>\n<li>CMD 其实就是 SeaJS 在推广过程中对模块定义的规范化产出</li>\n<li>主要内容就是描述该如何定义模块，如何引入模块，如何导出模块，只要你按照这个规范书写代码，sea.js 就能正确的进行解析</li>\n</ul>\n</li>\n<li>\n<p>AMD 与 CMD 的区别</p>\n<ol>\n<li>AMD 推崇依赖前置，CMD 推崇依赖就近</li>\n<li>AMD 是提前执行，CMD 是延迟执行。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"162-commonjs-与-amd-的比较\"><a class=\"markdownIt-Anchor\" href=\"#162-commonjs-与-amd-的比较\">#</a> 1.6.2、CommonJS 与 AMD 的比较</h4>\n<blockquote>\n<p>在服务器端比如 node，采用的则是 CommonJS 规范。</p>\n<p>AMD 和 CMD 都是用于浏览器端的模块规范</p>\n</blockquote>\n<ol>\n<li>\n<p>CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</p>\n</li>\n<li>\n<p>AMD 规范则是非同步加载模块，允许指定回调函数。</p>\n<p>由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。</p>\n</li>\n<li>\n<p>但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用 AMD 规范。</p>\n</li>\n</ol>\n<h4 id=\"163-es6-与-commonjs-的比较\"><a class=\"markdownIt-Anchor\" href=\"#163-es6-与-commonjs-的比较\">#</a> 16.3、ES6 与 CommonJS 的比较</h4>\n<blockquote>\n<p>注意！浏览器加载 ES6 模块，也使用 &lt;<em>script</em> &gt; 标签，但是要加入 type=“module” 属性。</p>\n</blockquote>\n<ol>\n<li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li>\n<li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</li>\n</ol>\n<h3 id=\"17-async-和-defer\"><a class=\"markdownIt-Anchor\" href=\"#17-async-和-defer\">#</a> 1.7、async 和 defer</h3>\n<ul>\n<li>\n<p>共同点</p>\n<p>两者都会并行下载，不会影响页面的解析。</p>\n</li>\n<li>\n<p>defer：defer 会按照顺序在 DOMContentLoaded 前按照页面出现顺序依次执行。</p>\n</li>\n<li>\n<p>async ：async 则是下载完立即执行</p>\n</li>\n<li>\n<p>具体解析【剖析】</p>\n<ul>\n<li>\n<p>先来看一个普通的 script 标签。&lt;<em>script src=“a.js”&gt;&lt;/script</em> &gt;</p>\n<ul>\n<li>\n<p>浏览器会做如下处理：</p>\n<p>1、停止解析 document.</p>\n<p>2、请求 a.js</p>\n<p>3、执行 a.js 中的脚本</p>\n<p>4、继续解析 document</p>\n</li>\n</ul>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"d.js\"</span> defer<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"e.js\"</span> defer<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">6</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>不阻止解析 document<span class=\"token punctuation\">,</span> 并行下载 b<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>js</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>当脚本下载完后立即执行。（两者执行顺序不确定，执行阶段不确定，可能在 DOMContentLoaded 事件前或者后 ）</pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"async-和-defer-总结\"><a class=\"markdownIt-Anchor\" href=\"#async-和-defer-总结\">#</a> async 和 defer 总结</h4>\n<ul>\n<li>\n<p>两者都不会阻止 document 的解析</p>\n</li>\n<li>\n<p>defer 会在 DOMContentLoaded 前依次执行 （可以利用这两点哦！）</p>\n</li>\n<li>\n<p>async 则是下载完立即执行，不一定是在 DOMContentLoaded 前</p>\n</li>\n<li>\n<p>async 因为顺序无关，所以很适合像 Google Analytics 这样的无依赖脚本</p>\n</li>\n</ul>\n<h3 id=\"18-异步编程-6-种解决方案\"><a class=\"markdownIt-Anchor\" href=\"#18-异步编程-6-种解决方案\">#</a> 1.8、异步编程 6 种解决方案</h3>\n<ol>\n<li>\n<p>回调函数（Callback）</p>\n<ul>\n<li>\n<p>回调函数是异步操作最基本的方法</p>\n</li>\n<li>\n<p>ajax(url, () =&gt; {</p>\n<p>​ // 处理逻辑</p>\n<p>})</p>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>容易写出回调地狱（Callback hell）</li>\n<li>不能使用 try catch 捕获错误，不能直接 return</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>事件监听</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">f1<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>发布订阅</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">jQuery<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>Promise</p>\n<ul>\n<li>\n<p>是什么？</p>\n<ul>\n<li>promise 是目前 JS 异步编程的主流解决方案，遵循 Promises/A+ 方案。Promise 用于异步操作，表示一个还未完成但是预期会完成的操作。</li>\n<li>Promise 是 ES6 引入的一个新的对象，他的主要作用是用来解决 JS 异步机制里，回调机制产生的 “回调地狱”。它并不是什么突破性的 API，只是封装了异步回调形式，使得异步回调可以写的更加优雅，可读性更高，而且可以链式调用。</li>\n</ul>\n</li>\n<li>\n<p>剖析</p>\n<ul>\n<li>\n<p>promise 本身相当于一个状态机，拥有三种状态</p>\n<ul>\n<li>pending</li>\n<li>fulfilled</li>\n<li>rejected</li>\n</ul>\n<p>一个 promise 对象初始化时的状态是 pending，调用了 resolve 后会将 promise 的状态扭转为 fulfilled，调用 reject 后会将 promise 的状态扭转为 rejected，这两种扭转一旦发生便不能再扭转该 promise 到其他状态。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Promise 如何使用</p>\n<p>构造一个 promise 对象，并将要执行的异步函数传入到 promise 的参数中执行，并且在异步执行结束后调用 resolve ( ) 函数，就可以在 promise 的 then 方法中获取到异步函数的执行结果</p>\n</li>\n<li>\n<p>Promise 原型上的方法</p>\n<ol>\n<li>Promise.prototype.then(onFulfilled, onRejected)</li>\n<li>Promise.prototype.catch(onRejected)</li>\n<li>Promise.prototype.finally(onFinally)</li>\n</ol>\n</li>\n<li>\n<p>Promise 静态方法</p>\n<ol>\n<li>\n<p>Promise.all()</p>\n<p>Promise.all 接收一个 promise 对象数组作为参数，只有全部的 promise 都已经变为 fulfilled 状态后才会继续后面的处理</p>\n</li>\n<li>\n<p>Promise.race()</p>\n<p>这个函数会在 promises 中第一个 promise 的状态扭转后就开始后面的处理（fulfilled、rejected 均可）</p>\n</li>\n<li>\n<p>Promise.resolve()</p>\n</li>\n<li>\n<p>Promise.reject()</p>\n</li>\n</ol>\n</li>\n<li>\n<p>优点</p>\n<p>将异步操作以同步操作的流程表达出来，promise 链式调用，更好地解决了层层嵌套的回调地狱</p>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>不能取消执行。</li>\n<li>无法获取当前执行的进度信息（比如，要在用户界面展示进度条）。</li>\n<li>外部无法捕捉 Promise 内部抛出的错误</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>generator 函数</p>\n<ul>\n<li>\n<p>是什么</p>\n<ul>\n<li>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。</li>\n<li>如果说 JavaScript 是 ECMAScript 标准的一种具体实现、Iterator 遍历器是 Iterator 的具体实现，那么 Generator 函数可以说是 Iterator 接口的具体实现方式。</li>\n<li>Generator 函数可以通过配合 Thunk 函数更轻松更优雅的实现异步编程和控制流管理</li>\n</ul>\n</li>\n<li>\n<p>描述</p>\n<ul>\n<li>执行 Generator 函数会返回一个遍历器对象，每一次 Generator 函数里面的 yield 都相当一次遍历器对象的 next () 方法，并且可以通过 next (value) 方法传入自定义的 value, 来改变 Generator 函数的行为。</li>\n</ul>\n</li>\n<li>\n<p>能封装异步任务的根本原因</p>\n<ul>\n<li>最大特点就是可以交出函数的执行权（即暂停执行）。Generator 函数可以暂停执行和恢复执行</li>\n</ul>\n</li>\n<li>\n<p>两个特征</p>\n<ul>\n<li>function 关键字与函数名之间有一个星号</li>\n<li>函数体内部使用 yield 表达式，定义不同的内部状态（yield 在英语里的意思就是 “产出”）。</li>\n</ul>\n</li>\n<li>\n<p>过程</p>\n<p>Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）</p>\n</li>\n<li>\n<p>Generator 及其异步方面的应用</p>\n<ul>\n<li>Generator 函数将 JavaScript 异步编程带入了一个全新的阶段</li>\n</ul>\n</li>\n<li>\n<p>总结</p>\n<p>调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的 next 方法，就会返回一个有着 value 和 done 两个属性的对象。value 属性表示当前的内部状态的值，是 yield 表达式后面那个表达式的值；done 属性是一个布尔值，表示是否遍历结束。</p>\n</li>\n<li>\n<p>demo</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fetch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node-fetch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.github.com/users/github\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>bio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>async 和 await</p>\n<ul>\n<li>\n<p>含义</p>\n<p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p>\n</li>\n<li>\n<p>是什么？</p>\n<ul>\n<li>一句话，它就是 Generator 函数的语法糖。</li>\n<li>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。</li>\n<li>async 函数可以理解为内置自动执行器的 Generator 函数语法糖，它配合 ES6 的 Promise 近乎完美的实现了异步编程解决方案。</li>\n</ul>\n</li>\n<li>\n<p>相对于 Promise，优势体现在</p>\n<ol>\n<li>处理 then 的调用链，能够更清晰准确的写出代码</li>\n<li>并且也能优雅地解决回调地狱问题</li>\n</ol>\n</li>\n<li>\n<p>相对 Generator 函数，体现在以下 4 点</p>\n<ol>\n<li>内置执行器。 Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行</li>\n<li>更好的语义。 async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果</li>\n<li>更广的适用性。 co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）</li>\n<li>返回值是 Promise。async 函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用 then 方法指定下一步的操作。</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<p>当然 async/await 函数也存在一些缺点，因为 await 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 await 会导致性能上的降低，代码没有依赖性的话，完全可以使用 Promise.all 的方式。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h4>\n<ol>\n<li>JS 异步编程进化史：callback -&gt; promise -&gt; generator -&gt; async + await</li>\n<li>async/await 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里</li>\n<li>async/await 可以说是异步终极解决方案了</li>\n</ol>\n<h2 id=\"二-相关面试问题\"><a class=\"markdownIt-Anchor\" href=\"#二-相关面试问题\">#</a> 二、相关面试问题</h2>\n<ol>\n<li>\n<p>什么是单线程，和异步有什么关系？</p>\n<ul>\n<li>单线程就是同时只做一件事，两段 JS 不能同时 执行</li>\n<li>原因就是 为了避免 DOM 渲染的冲突</li>\n<li>异步是一种 “无奈” 的解决方案，虽然有很多问题</li>\n</ul>\n</li>\n<li>\n<p>是否用过 jQuery 的 Deferred</p>\n<ul>\n<li>\n<p>步骤</p>\n<p>可以 jQuery 1.5 对 ajax 的改变举例</p>\n<p>说明如何简单的封装，使用 Deferred</p>\n<p>说明 ES6 promise 和 Deferred 的区别</p>\n</li>\n<li>\n<p>jQuery 1.5 的变化</p>\n<ul>\n<li>\n<p>无法改变 JS 异步和单线程的本质</p>\n</li>\n<li>\n<p>只能从写法上杜绝 callback 这种形式</p>\n</li>\n<li>\n<p>它是一种语法糖形式，但是解耦了代码</p>\n</li>\n<li>\n<p>很好的体现：开放封闭原则</p>\n</li>\n<li>\n<p>ajax 为例</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ajax <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\najax\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ajax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回一个 deferred 对象</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>使用 jQuery Deferred</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">waitHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> dtd <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">Deferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建一个 Deferred 对象</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">wait</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dtd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//要求传入一个 Deferred 对象</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">task</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      dtd<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//表示异步任务已经完成</span>\n      <span class=\"token comment\">// dtd.reject()  //表示异步任务失败或出错</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dtd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要求返回 Deferred 对象</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 注意，这里一定要有返回值</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>dtd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "面试全面总结",
                "JS 三座大山"
            ]
        },
        {
            "id": "http://example.com/2019/08/14/asynchronization/",
            "url": "http://example.com/2019/08/14/asynchronization/",
            "title": "异步",
            "date_published": "2019-08-14T07:30:31.000Z",
            "content_html": "<h1 id=\"异步\"><a class=\"markdownIt-Anchor\" href=\"#异步\">#</a> 异步</h1>\n<blockquote>\n<p>本章全面讲解了 JS 异步的知识点。先从<strong>原理开始</strong> ，讲解什么是 <strong>单线程</strong>、什么是 <strong>event loop</strong> ；然后讲解 jQuery 中解决 <strong>异步的 Deferred</strong> 以及 jQuery 初次展示出来的 <strong>Promise 的用法</strong>；最后再讲解 ES6 中 <strong>Promise 的用法和标准</strong> 。</p>\n<p><strong>基础篇请看</strong> ：<a href=\"http://zxinc520.com/lcj/%225d2eeda9d797f0309cf6ab02%22\">异步和单线程</a></p>\n</blockquote>\n<h2 id=\"异步-2\"><a class=\"markdownIt-Anchor\" href=\"#异步-2\">#</a> 异步</h2>\n<blockquote>\n<p>高级面试</p>\n</blockquote>\n<ul>\n<li>《<a href=\"http://zxinc520.com/lcj/%225d2eeda9d797f0309cf6ab02%22\">前端 JS 面试技巧</a>》讲到异步的基础</li>\n<li>高级面试会问到更多的内容</li>\n<li>如 event-loop Promise Async/Await 等</li>\n</ul>\n<h3 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\">#</a> 问题</h3>\n<ul>\n<li>什么是单线程，和异步有什么关系？ <a href=\"http://zxinc520.com/lcj/%225d2eeda9d797f0309cf6ab02%22\">参考 </a></li>\n<li>什么是 event-loop？</li>\n<li>是否用过 jQuery 的 Deferred</li>\n<li>Promise 的基本使用和原理</li>\n<li>介绍一下 async/await（ES7）（和 Promise 的区别、联系）</li>\n<li>总结一下当前 JS 解决异步的方案</li>\n</ul>\n<h2 id=\"4-1-单线程和异步\"><a class=\"markdownIt-Anchor\" href=\"#4-1-单线程和异步\">#</a> 4-1 单线程和异步</h2>\n<blockquote>\n<p><a href=\"http://zxinc520.com/lcj/%225d2eeda9d797f0309cf6ab02%22\">单线程和异步基础篇 </a></p>\n</blockquote>\n<ul>\n<li>为什么是单线程？\n<ul>\n<li>原因 - 避免 DOM 渲染冲突\n<ul>\n<li>浏览器需要渲染 DOM</li>\n<li>JS 可以修改 DOM 结构</li>\n<li>JS 执行的时候，浏览器 DOM 渲染会暂停</li>\n<li>两段 JS 也不能同时执行 （ 都修改 DOM 就冲突了）</li>\n<li>webworker 支持多线程 ，但是不能 访问 DOM</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>单线程的解决方案</strong> ： <strong>异步</strong></p>\n<p><em>暴露出的问题</em> ：</p>\n<ul>\n<li>问题一：没按照书写方式执行，可读性差</li>\n<li>问题二：callback 中不容易模块化</li>\n</ul>\n<h3 id=\"问题解答\"><a class=\"markdownIt-Anchor\" href=\"#问题解答\">#</a> 问题解答</h3>\n<ul>\n<li>什么是单线程，和异步有什么关系？\n<ul>\n<li>单线程就是同时只做一件事，两段 JS 不能同时 执行</li>\n<li>原因就是 为了避免 DOM 渲染的冲突</li>\n<li>异步是一种 “无奈” 的解决方案，虽然有很多问题</li>\n</ul>\n</li>\n</ul>\n<p><strong>承上启下：</strong></p>\n<ul>\n<li>单线程 - 同时间只能做一件事</li>\n<li>原因 - 避免 DOM 渲染冲突</li>\n<li>解决方案 - 异步</li>\n<li>异步的实现方式 - event loop</li>\n</ul>\n<h2 id=\"4-2-什么是-event-loop\"><a class=\"markdownIt-Anchor\" href=\"#4-2-什么是-event-loop\">#</a> 4-2 什么是 event-loop</h2>\n<blockquote>\n<p>主线程从 &quot;任务队列&quot; 中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为 Event Loop（事件循环）。 <a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\">再谈 Event Loop</a></p>\n</blockquote>\n<h3 id=\"文字解释\"><a class=\"markdownIt-Anchor\" href=\"#文字解释\">#</a> 文字解释</h3>\n<blockquote>\n<p>event-loop</p>\n</blockquote>\n<ul>\n<li>事件轮询， JS 实现异步 的具体解决方案</li>\n<li>同步代码，直接执行</li>\n<li>异步函数先放在 异步队列 中</li>\n<li>待同步函数执行完毕，轮询执行 异步队列 的函数</li>\n</ul>\n<h3 id=\"实例分析\"><a class=\"markdownIt-Anchor\" href=\"#实例分析\">#</a> 实例分析</h3>\n<p><em>示例一：</em></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190813/mxsAJyrO4cLE.png?imageslim\" alt=\"mark\"></p>\n<p><em>示例二：</em></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190813/kftHfWYaHL80.png?imageslim\" alt=\"mark\"></p>\n<p><em>示例三：</em></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190813/j3lPm5VCfcSB.png?imageslim\" alt=\"mark\"></p>\n<p><strong>上图有 2 种结果</strong>：(a 是在 ajax 请求成功时放入异步队列，所以时间不确定)</p>\n<ol>\n<li>d -&gt; c -&gt; a -&gt; b</li>\n<li>d -&gt; c -&gt; b -&gt; a</li>\n</ol>\n<h3 id=\"问题解答-2\"><a class=\"markdownIt-Anchor\" href=\"#问题解答-2\">#</a> 问题解答</h3>\n<ul>\n<li>什么是 event-loop？\n<ul>\n<li>事件轮询， JS 实现异步 的具体解决方案</li>\n<li>什么是异步队列，何时被放入 异步队列</li>\n<li>轮询的过程</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-3-jquery-的-deferred\"><a class=\"markdownIt-Anchor\" href=\"#4-3-jquery-的-deferred\">#</a> 4-3 jQuery 的 Deferred</h2>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\">jQuery 的 deferred 对象详解</a></p>\n<p>jQuery 1.5.0 版本开始引入的一个新功能 ----<a href=\"http://api.jquery.com/category/deferred-object/\">deferred 对象</a>。</p>\n<p>针对的读者是那些已经具备 jQuery 使用经验的开发者。如果你想了解 jQuery 的基本用法，请阅读 <a href=\"http://www.ruanyifeng.com/\">阮一峰</a> 编写的<a href=\"http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html\">《jQuery 设计思想》</a>和<a href=\"http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html\">《jQuery 最佳实践》</a>。</p>\n</blockquote>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<ul>\n<li>jQuery 1.5 的变化</li>\n<li>使用 jQuery Deferred</li>\n<li>初步引入 Promise 概念</li>\n</ul>\n<p><strong>注意</strong> ：不要以为所有的网站 都是 vue 和 React 开发的</p>\n<h4 id=\"jquery-15-之前\"><a class=\"markdownIt-Anchor\" href=\"#jquery-15-之前\">#</a> jQuery 1.5 之前</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ajax <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">\"data.json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ajax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回一个 XHR 对象</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"jquery-15-之后\"><a class=\"markdownIt-Anchor\" href=\"#jquery-15-之后\">#</a> jQuery 1.5 之后</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ajax <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\najax\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ajax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回一个 deferred 对象</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"jquery-15-的变化\"><a class=\"markdownIt-Anchor\" href=\"#jquery-15-的变化\">#</a> jQuery 1.5 的变化</h4>\n<ul>\n<li>无法改变 JS 异步和单线程的本质</li>\n<li>只能从写法上杜绝 callback 这种形式</li>\n<li>它是一种语法糖形式，但是解耦了代码</li>\n<li>很好的体现：<strong>开放封闭原则</strong></li>\n</ul>\n<h3 id=\"使用-jquery-deferred\"><a class=\"markdownIt-Anchor\" href=\"#使用-jquery-deferred\">#</a> 使用 jQuery Deferred</h3>\n<blockquote>\n<p>使用 jQuery Deferred</p>\n<p>对比 说明</p>\n</blockquote>\n<p><em>未使用情况：</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 给出一段非常简单的异步操作代码，使用 setTimeout 函数</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">wait</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">task</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 新增需求：要在执行完成之后进行某些特别复杂的操作，代码可能会很多，而且分好几个步骤</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>使用 jQuery Deferred</em>：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">waitHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> dtd <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">Deferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建一个 Deferred 对象</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">wait</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dtd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//要求传入一个 Deferred 对象</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">task</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      dtd<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//表示异步任务已经完成</span>\n      <span class=\"token comment\">// dtd.reject()  //表示异步任务失败或出错</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dtd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要求返回 Deferred 对象</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 注意，这里一定要有返回值</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>dtd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//区别于promise，好像不能链式调用</span>\n<span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> <span class=\"token function\">waitHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nw<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nw<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 还有 w.done w.fail</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li>总结，dtd 的 API 可分成两类，用意不同</li>\n<li>第一类：dtd.resolve dtd.reject</li>\n<li>第二类：dtd.then dtd.done dtd.fail</li>\n<li>这两类应该分开，否则后果很严重</li>\n</ul>\n<h3 id=\"问题解答-3\"><a class=\"markdownIt-Anchor\" href=\"#问题解答-3\">#</a> 问题解答</h3>\n<ul>\n<li>\n<p>是否用过 jQuery 的 Deferred</p>\n<ul>\n<li>可以 jQuery 1.5 对 ajax 的改变举例</li>\n<li>说明如何简单的封装，使用 Deferred</li>\n<li>说明 ES6 promise 和 Deferred 的区别</li>\n</ul>\n</li>\n</ul>\n<p><strong>想要深入理解它，就需要知道它的前世今生。</strong></p>\n<h2 id=\"4-4-promise\"><a class=\"markdownIt-Anchor\" href=\"#4-4-promise\">#</a> 4-4 Promise</h2>\n<blockquote>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案 —— 回调函数和事件 —— 更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了 <code>Promise</code>  对象。</p>\n<p>所谓 <code>Promise</code> ，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/promise\">ECMAScript 6 Promise 对象</a></p>\n<p><strong>基础语法</strong> 请参考我的另一篇博客： <a href=\"http://zxinc520.com/lcj/%225cbb3bf05733fa0a66088c80%22\">Promise 详细分析</a></p>\n</blockquote>\n<p><code>Promise</code> <strong> 对象有以下两个特点</strong>。</p>\n<ol>\n<li>对象的状态不受外界影响。 <code>Promise</code>  对象代表一个异步操作，有三种状态： <code>pending</code> （进行中）、 <code>fulfilled</code> （已成功）和 <code>rejected</code> （已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 <code>Promise</code>  这个名字的由来，它的英语意思就是 “承诺”，表示其他手段无法改变。</li>\n<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。 <code>Promise</code>  对象的状态改变，只有两种可能：从 <code>pending</code>  变为 <code>fulfilled</code>  和从 <code>pending</code>  变为 <code>rejected</code> 。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对 <code>Promise</code>  对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</li>\n</ol>\n<p>注意，为了行文方便，本章后面的 <code>resolved</code>  统一只指 <code>fulfilled</code>  状态，不包含 <code>rejected</code>  状态。</p>\n<p>有了 <code>Promise</code>  对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外， <code>Promise</code>  对象提供统一的接口，使得控制异步操作更加容易。</p>\n<p><code>Promise</code>  也有一些缺点。首先，无法取消 <code>Promise</code> ，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数， <code>Promise</code>  内部抛出的错误，不会反应到外部。第三，当处于 <code>pending</code>  状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>\n<p>如果某些事件不断地反复发生，一般来说，使用 <a href=\"https://nodejs.org/api/stream.html\">Stream</a> 模式是比部署 <code>Promise</code>  更好的选择。</p>\n<h3 id=\"异常捕获\"><a class=\"markdownIt-Anchor\" href=\"#异常捕获\">#</a> 异常捕获</h3>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"https://edu-image.nosdn.127.net/B34DC36428D2D51B8EF5EE2C83CE9BF2.png?imageView&amp;thumbnail=241y34&amp;quality=100\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//规定 ： then 只接受一个参数，最后统一用 catch 捕获异常</span>\nresult\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> img<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 最后统一 catch</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"promiseall-promiserace\"><a class=\"markdownIt-Anchor\" href=\"#promiseall-promiserace\">#</a> Promise.all &amp; Promise.race</h3>\n<blockquote>\n<p><strong>Promise.all</strong> 可以将多个 Promise 实例包装成一个新的 Promise 实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被 reject 失败状态的值。</p>\n<p><strong>Promse.race</strong> 就是赛跑的意思，意思就是说，Promise.race ([p1, p2, p3]) 里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p>\n<p><a href=\"https://www.jianshu.com/p/7e60fc1be1b2\">理解和使用 Promise.all 和 Promise.race</a></p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190814/LoF987DaE10r.png?imageslim\" alt=\"mark\"></p>\n<p><em>演示</em> ：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> src1 <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"https://edu-image.nosdn.127.net/B34DC36428D2D51B8EF5EE2C83CE9BF2.png?imageView&amp;thumbnail=241y34&amp;quality=100\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> src2 <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.imooc.com/static/img/index/logo.png\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>result1<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">datas</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//谁快谁先执行</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>result1<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">datas</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Promise.all 的执行结果</strong> ：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190814/ITqccL9zhyE0.png?imageslim\" alt=\"mark\"></p>\n<p><strong>Promise.race 的执行结果</strong> ：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190814/PP76XFiW0S3V.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"promise-标准\"><a class=\"markdownIt-Anchor\" href=\"#promise-标准\">#</a> promise 标准</h3>\n<ul>\n<li>关于 “标准” 的闲谈</li>\n<li>状态变化</li>\n<li>then</li>\n</ul>\n<h4 id=\"关于-标准-的闲谈\"><a class=\"markdownIt-Anchor\" href=\"#关于-标准-的闲谈\">#</a> 关于 “标准” 的闲谈</h4>\n<ul>\n<li>任何技术推广使用都需要一套标准来支撑</li>\n<li>如 html js css http 等，无规矩不成方圆</li>\n<li>任何不符合标准的东西，终将会被用户抛弃</li>\n<li>不要挑战标准，不要自造标准</li>\n</ul>\n<h4 id=\"状态变化\"><a class=\"markdownIt-Anchor\" href=\"#状态变化\">#</a> 状态变化</h4>\n<ul>\n<li>三种状态：pending fulfilled rejected</li>\n<li>初始状态：pending</li>\n<li><strong>成功</strong>：pending 变成 fulfilled ，<strong>失败</strong>：pending 变成 rejected</li>\n<li>状态变化不可逆</li>\n</ul>\n<h4 id=\"then\"><a class=\"markdownIt-Anchor\" href=\"#then\">#</a> then</h4>\n<ul>\n<li>\n<p>Promise 实例必须实现 then 这个方法</p>\n</li>\n<li>\n<p>then () 必须可以接受两个函数作为参数</p>\n</li>\n<li>\n<p>then () 返回的必须是一个 Promise 实例</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190814/p2zjIfnNkjIp.png?imageslim\" alt=\"mark\"></p>\n</li>\n</ul>\n<h3 id=\"问题解答-4\"><a class=\"markdownIt-Anchor\" href=\"#问题解答-4\">#</a> 问题解答</h3>\n<p><strong>问题：Promise 的基本使用和原理？</strong></p>\n<ul>\n<li>基本语法 （复习）</li>\n<li>如何异常捕获 （ error 和 reject 都要考虑）</li>\n<li>多个串联 - 链式执行的好处</li>\n<li>Promise.all 和 Promise.race</li>\n<li>Promise 标准 - 状态变化，then 函数</li>\n</ul>\n<h2 id=\"4-5-asyncawait\"><a class=\"markdownIt-Anchor\" href=\"#4-5-asyncawait\">#</a> 4-5 async/await</h2>\n<blockquote>\n<p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p>\n<p>async 函数是什么？一句话，它就是 Generator 函数的语法糖。</p>\n<p><a href=\"http://es6.ruanyifeng.com/\">ECMAScript 6 入门</a> <a href=\"http://es6.ruanyifeng.com/#docs/async\">async 函数</a></p>\n</blockquote>\n<ul>\n<li>then 只是将 callback 拆分了</li>\n<li>async/await 是最直接的同步写法</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190815/B2MsvoDMkq7B.png?imageslim\" alt=\"mark\"></p>\n<p><strong>最直接的同步写法：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">load</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\">#</a> 用法</h3>\n<ul>\n<li>使用 await，函数必须用 async 标识</li>\n<li>await 后面跟的是一个 Promise 实例</li>\n<li>需要 babel-polyfill</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> src1 <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"https://edu-image.nosdn.127.net/B34DC36428D2D51B8EF5EE2C83CE9BF2.png?imageView&amp;thumbnail=241y34&amp;quality=100\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> src2 <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.imooc.com/static/img/index/logo.png\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">load</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadImg</span><span class=\"token punctuation\">(</span>src2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"问题解答-5\"><a class=\"markdownIt-Anchor\" href=\"#问题解答-5\">#</a> 问题解答</h3>\n<ul>\n<li>介绍一下 async/await（ES7）（和 Promise 的区别、联系）\n<ul>\n<li>基本语法</li>\n<li>使用了 Promise，并没有和 Promise 冲突</li>\n<li>完全是同步的写法，再也没有回调函数</li>\n<li>但是：改变不了 JS 单线程、异步的本质</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "JS 三座大山",
                "单线程",
                "event loop",
                "异步的 Deferred",
                "Promise"
            ]
        },
        {
            "id": "http://example.com/2019/08/10/NewPrototype/",
            "url": "http://example.com/2019/08/10/NewPrototype/",
            "title": "原型",
            "date_published": "2019-08-10T07:52:24.000Z",
            "content_html": "<h1 id=\"原型\"><a class=\"markdownIt-Anchor\" href=\"#原型\">#</a> 原型</h1>\n<blockquote>\n<p>本章将结合 <strong>jQuery</strong> 和 <strong>zepto</strong> 源码来讲解原型的实际应用。通过 <strong>源码来分析</strong> jQuery 和 zepto 是如何使用原型的，以及通过它们的 <strong>插件机制</strong>，讲解 <strong>原型的扩展性</strong> 。</p>\n<p>《前端 JS 面试技巧》请参考我之前的博客： <a href=\"http://zxinc520.com/lcj/%225d2df2cdda85353d5ca8b83f%22\">前端 JS 基础面试技巧</a></p>\n</blockquote>\n<h3 id=\"关于原型\"><a class=\"markdownIt-Anchor\" href=\"#关于原型\">#</a> 关于原型</h3>\n<ul>\n<li>《前端 JS 面试技巧》已经讲解过原型的 <a href=\"http://zxinc520.com/lcj/%225d2df2cdda85353d5ca8b83f%22\">基础知识</a></li>\n<li>高级面试题，光会原型基础还不够，还要实际应用</li>\n<li>zepto jquery 中如何用原型</li>\n<li>顺便也算是解读了 zepto 和 jquery 的部分源码</li>\n</ul>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<ul>\n<li>说一个原型的实际应用</li>\n<li>原型如何体现它的扩展性</li>\n</ul>\n<h2 id=\"原型的实际应用\"><a class=\"markdownIt-Anchor\" href=\"#原型的实际应用\">#</a> 原型的实际应用</h2>\n<blockquote>\n<p>原型的实际应用</p>\n</blockquote>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<ul>\n<li>jquery 和 zepto 的简单使用</li>\n<li>zepto 如何使用原型</li>\n<li>jquery 如何使用原型</li>\n</ul>\n<h4 id=\"简单使用\"><a class=\"markdownIt-Anchor\" href=\"#简单使用\">#</a> 简单使用</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Title<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>jquery test <span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>jquery test <span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>jquery test <span class=\"token number\">3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"div1\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>jquery test <span class=\"token keyword\">in</span> dev<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token keyword\">var</span> $p <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>\n    $p<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'40px'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//css 是原型方法</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>$p<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \t\t    <span class=\"token comment\">//html 是原型方法</span>\n\n    <span class=\"token keyword\">var</span> $div1 <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#div1'</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">//css 是原型方法</span>\n    $div1<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//html 是原型方法</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>$div1<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"zepto-如何使用原型\"><a class=\"markdownIt-Anchor\" href=\"#zepto-如何使用原型\">#</a> zepto 如何使用原型</h4>\n<blockquote>\n<p>源码中，这里的处理情况比较复杂。但因为本次只针对原型，因此这里就弱化了</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">window</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//空对象</span>\n  <span class=\"token keyword\">var</span> zepto <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  zepto<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//源码中，这里的处理情况比较复杂。但因为本次只针对原型，因此这里就弱化了</span>\n    <span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> dom <span class=\"token operator\">=</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> zepto<span class=\"token punctuation\">.</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 即使用 zepto 时候的 $</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">$</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> zepto<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 这就是构造函数</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dom<span class=\"token punctuation\">,</span> selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span>\n      len <span class=\"token operator\">=</span> dom <span class=\"token operator\">?</span> dom<span class=\"token punctuation\">.</span>length <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selector <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  zepto<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Z</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dom<span class=\"token punctuation\">,</span> selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 注意，出现了 new 关键字</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  $<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    constructor<span class=\"token operator\">:</span> zepto<span class=\"token punctuation\">.</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">css</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">html</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  zepto<span class=\"token punctuation\">.</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n\n  window<span class=\"token punctuation\">.</span>$ <span class=\"token operator\">=</span> $<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"jquery-如何使用原型\"><a class=\"markdownIt-Anchor\" href=\"#jquery-如何使用原型\">#</a> jquery 如何使用原型</h4>\n<blockquote>\n<p>简化了源码，重在讲解 jquery 如何使用原型</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//简化了源码，真实源码分支很多,选取部分代码</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">window</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">jQuery</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//注意 new 关键字，第一步就找到了 构造函数</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">jQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span>init</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//定义构造函数</span>\n  <span class=\"token keyword\">var</span> init <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> dom <span class=\"token operator\">=</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span>\n      len <span class=\"token operator\">=</span> dom <span class=\"token operator\">?</span> dom<span class=\"token punctuation\">.</span>length <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selector <span class=\"token operator\">=</span> selector <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  init<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//初始化 jQuery.fn</span>\n  jQuery<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    constructor<span class=\"token operator\">:</span> jQuery<span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">//其他函数...</span>\n    <span class=\"token function-variable function\">css</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">html</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//定义原型</span>\n  init<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span>$ <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"问题解答\"><a class=\"markdownIt-Anchor\" href=\"#问题解答\">#</a> 问题解答</h3>\n<ul>\n<li>描述一下 jquery 如何使用原型</li>\n<li>描述一下 zepto 如何使用原型</li>\n<li>再结合自己的项目经验，说一下自己开发的例子</li>\n</ul>\n<h2 id=\"如何体现原型的扩展性\"><a class=\"markdownIt-Anchor\" href=\"#如何体现原型的扩展性\">#</a> 如何体现原型的扩展性</h2>\n<blockquote>\n<p>体现原型的扩展性</p>\n</blockquote>\n<h3 id=\"知识点-2\"><a class=\"markdownIt-Anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<ul>\n<li>总结 zepto 和 jquery 原型的使用</li>\n<li>插件机制</li>\n</ul>\n<h3 id=\"总结-zepto-和-jquery-原型的使用\"><a class=\"markdownIt-Anchor\" href=\"#总结-zepto-和-jquery-原型的使用\">#</a> 总结 zepto 和 jquery 原型的使用</h3>\n<blockquote>\n<p>总结 zepto 和 jquery 原型的使用</p>\n<p>相关 <strong>代码实现</strong> 请看上文 ：zepto 如何使用原型 和 jquery 如何使用原型</p>\n</blockquote>\n<p><em>问题一：为何要把原型方法放在 $.fn ?</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//初始化 jQuery.fn</span>\njQuery<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  constructor<span class=\"token operator\">:</span> jQuery<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">//其他函数...</span>\n  <span class=\"token function-variable function\">css</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">html</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//定义原型</span>\ninit<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>解答</strong> ：<u>因为要扩展插件</u> ，做一个简单的插件的例子</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 因为要扩展插件，做一个简单的插件的例子</span>\n$<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getNodeName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>好处</strong>：</p>\n<ol>\n<li>只有 $ 会暴露在 window 全局变量</li>\n<li>将插件扩展统一到 $.fn.xxx 这一接口，方便使用</li>\n</ol>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>\n<p>说一个原型的实际应用</p>\n<ul>\n<li>描述一下 jquery 如何使用 原型</li>\n<li>描述一下 zepto 如何使用 原型</li>\n<li>再结合自己的项目经验，说一下自己开发的例子</li>\n</ul>\n</li>\n<li>\n<p>原型如何体现它的扩展性</p>\n<ul>\n<li>说一下 jquery 和 zepto 的 插件机制</li>\n<li>结合自己的开发经验，做过的基于原型的插件</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "面试全面总结",
                "JS 三座大山"
            ]
        }
    ]
}