{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"rem\" tag",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/03/19/AdaptiveSkill/",
            "url": "http://example.com/2019/03/19/AdaptiveSkill/",
            "title": "适配技巧和组件化思想",
            "date_published": "2019-03-19T03:11:20.000Z",
            "content_html": "<h2 id=\"你一定要会的适配技巧和组件化思想\"><a class=\"markdownIt-Anchor\" href=\"#你一定要会的适配技巧和组件化思想\">#</a> 你一定要会的适配技巧和组件化思想</h2>\n<blockquote>\n<p>rem：利用它能实现强大的屏幕适配布局</p>\n<p>less：Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。(代表的有 less，Sass，stylus)</p>\n<p>模板引擎：art-template（实现组件化，代码不复用，提高开发效率）(当然还有很多其它好用的模板引擎，但原理上基本一样。)</p>\n</blockquote>\n<h2 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\">#</a> 说明</h2>\n<ul>\n<li>本文将介绍以 rem（结合流式布局）+less（为代表）的适配方式</li>\n<li>模板引擎上以将以 art-template 举例说明。（模板引擎 ==&gt; 这里特指用于 Web 开发的模板引擎，是为了使<a href=\"https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2\">用户界面</a>与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的<a href=\"https://baike.baidu.com/item/HTML\"> HTML</a> 文档。）</li>\n</ul>\n<h2 id=\"需求分析\"><a class=\"markdownIt-Anchor\" href=\"#需求分析\">#</a> 需求分析</h2>\n<p>为什么 <strong>rem+less</strong> 会产生？</p>\n<ul>\n<li>\n<p><strong>rem</strong> ：<u>rem 是相对长度单位，相对于根元素 font-size 计算值的倍数（通俗来讲，相对于 html 字体大小）</u></p>\n<p>这种需求主要产生在移动端，因为随着科学水平的发展，手机产业发展非常迅速，作为一个前端工作者，大量的手机页面需要我们去书写，而现在市面上的手机大小不一（分辨率各不相同），一种适配所有手机的页面开发模式需求应由而生。（px 为一种固定的像素单位，不太适合需求），之后<strong>流式布局，响应式布局</strong>等随之产生，rem 的作用也逐渐凸显出来。</p>\n</li>\n</ul>\n<h4 id=\"如何使用-remless-呢\"><a class=\"markdownIt-Anchor\" href=\"#如何使用-remless-呢\">#</a> 如何使用 rem+less 呢？</h4>\n<p>===&gt; 新建个 less 目录，在里面做如下操作：</p>\n<p>1. 新建 variable.less（名字随便都可以，反正这是一个表示变量的 less 文件）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">@charset <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//适配主流设备</span>\n@adapterDeviceList<span class=\"token operator\">:</span><span class=\"token number\">750</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">720</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">640</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">540</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">529</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">480</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">434</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">414</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">400</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">384</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">375</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">360</span>px<span class=\"token punctuation\">,</span><span class=\"token number\">320</span>px<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//设计稿尺寸</span>\n@psdwidth<span class=\"token operator\">:</span><span class=\"token number\">529</span>px<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//就是你参考的设计稿的尺寸</span>\n<span class=\"token comment\">/*\n    预设基准值\n    我习惯设100px，这样感觉用起来比较方便。比如：32px可以写作32rem/@baseFontSize\n*/</span>\n@baseFontSize<span class=\"token operator\">:</span><span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//设备种类数量</span>\n@len<span class=\"token operator\">:</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span>@adapterDeviceList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2. 新建 mixins.less（这是一个表示函数的 less 文件）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n  这类似一个循环（定义一个函数），只是less没有跟js差不多的for循环啥滴，所以只能通过这种方式来实现一个循环。\n*/</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">adapterMixin</span><span class=\"token punctuation\">(</span>@index<span class=\"token punctuation\">)</span> <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">@index <span class=\"token operator\">></span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  @<span class=\"token function\">media</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token operator\">-</span>width<span class=\"token operator\">:</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>@adapterDeviceList<span class=\"token punctuation\">,</span>@index<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    html<span class=\"token punctuation\">&#123;</span>\n      font<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> @baseFontSize<span class=\"token operator\">/</span>@psdwidth<span class=\"token operator\">*</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>@adapterDeviceList<span class=\"token punctuation\">,</span>@index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">adapterMixin</span><span class=\"token punctuation\">(</span>@index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3. 新建 adapter.less（调用函数）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span><span class=\"token function\">adapterMixin</span><span class=\"token punctuation\">(</span>@len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4. 新建 index.less (主入口)</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">@charset <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">'variable'</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"mixins\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"adapter\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5. 在网页中引用</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/less<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/less/index.less<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//cdnjs.cloudflare.com/ajax/libs/less.js/3.9.0/less.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><a href=\"http://lesscss.org/\">less 官网</a></p>\n<p>说明：在网页中直接引用 less 文件是不行的，一定要加一个 less.min.js 来解析 less 文件，这样浏览器才能认识。</p>\n<p>在完成上述操作后，你已基本完成 <strong>rem+less</strong> 的适配方式。接下来在 less 文件中 （像素单位 px 将可以用 rem/@baseFontSize 来代替），你的页面将适配所有大小的容器。</p>\n<h2 id=\"组件化思想\"><a class=\"markdownIt-Anchor\" href=\"#组件化思想\">#</a> 组件化思想</h2>\n<h4 id=\"需求分析-2\"><a class=\"markdownIt-Anchor\" href=\"#需求分析-2\">#</a> 需求分析：</h4>\n<blockquote>\n<p>随着要写大量的页面，页面的重复，冗杂等问题相应而出。为了解决这种重复的问题，组件化思想出来了。</p>\n</blockquote>\n<h4 id=\"什么是组件化\"><a class=\"markdownIt-Anchor\" href=\"#什么是组件化\">#</a> 什么是组件化</h4>\n<p>组件化并不是前端所特有的，一些其他的语言或者桌面程序等，都具有组件化的先例。确切的说，只要有 UI 层的展示，就必定有可以组件化的地方。简单来说，组件就是将一段 UI 样式和其对应的功能作为独立的整体去看待，无论这个整体放在哪里去使用，它都具有一样的功能和样式，从而实现复用，这种整体化的细想就是组件化。不难看出，组件化设计就是为了增加复用性，灵活性，提高系统设计，从而提高开发效率。</p>\n<ul>\n<li>css 实现代码分离（组件化思想）：可以用 less，Sass，stylus。<a href=\"http://lesscss.org/\">less 官网</a></li>\n<li>html 实现代码分离（组件化思想）：可以用模板引擎 ---- 如 <a href=\"https://aui.github.io/art-template/docs/\">art-template</a> 等…</li>\n</ul>\n<blockquote>\n<p>art-template 是一个简约、超快的模板引擎。它采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaScript 极限的运行性能，并且同时支持 NodeJS 和浏览器。</p>\n<ol>\n<li>拥有接近 JavaScript 渲染极限的的性能</li>\n<li>调试友好：语法、运行时错误日志精确到模板所在行；支持在模板文件上打断点（Webpack Loader）</li>\n<li>支持 Express、Koa、Webpack</li>\n<li>支持模板继承与子模板</li>\n<li>浏览器版本仅 6KB 大小</li>\n</ol>\n</blockquote>\n<p>详情介绍： <a href=\"https://aui.github.io/art-template/zh-cn/docs/index.html\">art-template 官网</a></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ol>\n<li>1. 适配技巧和组件化思想是你必不可少的技能</li>\n<li>2. 组件化思想将是未来主流方向（React、Vue、Angular 三大前端主流框架）</li>\n<li>3. 多做项目 ===&gt; 体会这种组件化开发思想和适配方案。</li>\n</ol>\n",
            "tags": [
                "rem",
                "less",
                "art-template"
            ]
        }
    ]
}