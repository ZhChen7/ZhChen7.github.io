{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"react基础面试题-50\" tag",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/10/21/%E5%BF%85%E9%A1%BB%E8%A6%81%E4%BC%9A%E7%9A%84-50-%E4%B8%AA-React-%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://example.com/2020/10/21/%E5%BF%85%E9%A1%BB%E8%A6%81%E4%BC%9A%E7%9A%84-50-%E4%B8%AA-React-%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "必须要会的 50 个 React 面试题",
            "date_published": "2020-10-21T07:04:17.000Z",
            "content_html": "<h2 id=\"react-面试题-参考\"><a class=\"markdownIt-Anchor\" href=\"#react-面试题-参考\">#</a> <strong>React 面试题</strong>  –  <a href=\"https://juejin.im/post/6844903806715559943\">参考🔗</a></h2>\n<p>以下是面试官最有可能问到的 <strong>50 个 React 面试题和答案</strong>。为方便你学习，我对它们进行了分类：</p>\n<ul>\n<li>基本知识</li>\n<li>React 组件</li>\n<li>React Redux</li>\n<li>React 路由</li>\n</ul>\n<h2 id=\"基本知识\"><a class=\"markdownIt-Anchor\" href=\"#基本知识\">#</a> <strong>基本知识</strong></h2>\n<h3 id=\"1-区分-real-dom-和-virtual-dom\"><a class=\"markdownIt-Anchor\" href=\"#1-区分-real-dom-和-virtual-dom\">#</a> <strong>1. 区分 Real DOM 和 Virtual DOM</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>Real DOM</strong></th>\n<th><strong>Virtual DOM</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 更新缓慢。</td>\n<td>1. 更新更快。</td>\n</tr>\n<tr>\n<td>2. 可以直接更新 HTML。</td>\n<td>2. 无法直接更新 HTML。</td>\n</tr>\n<tr>\n<td>3. 如果元素更新，则创建新 DOM。</td>\n<td>3. 如果元素更新，则更新 JSX 。</td>\n</tr>\n<tr>\n<td>4. DOM 操作代价很高。</td>\n<td>4. DOM 操作非常简单。</td>\n</tr>\n<tr>\n<td>5. 消耗的内存较多。</td>\n<td>5. 很少的内存消耗。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-什么是-react\"><a class=\"markdownIt-Anchor\" href=\"#2-什么是-react\">#</a> <strong>2. 什么是 React？</strong></h3>\n<ul>\n<li>React 是 Facebook 在 2011 年开发的前端 JavaScript 库。</li>\n<li>它遵循基于组件的方法，有助于构建可重用的 UI 组件。</li>\n<li>它用于开发复杂和交互式的 Web 和移动 UI。</li>\n<li>尽管它仅在 2015 年开源，但有一个很大的支持社区。</li>\n</ul>\n<h3 id=\"3-react-有什么特点\"><a class=\"markdownIt-Anchor\" href=\"#3-react-有什么特点\">#</a> <strong>3. React 有什么特点？</strong></h3>\n<p>React 的主要功能如下：</p>\n<ol>\n<li>它使用 ** 虚拟 DOM ** 而不是真正的 DOM。</li>\n<li>它可以用<strong>服务器端渲染</strong>。</li>\n<li>它遵循<strong>单向数据流</strong>或数据绑定。</li>\n</ol>\n<h3 id=\"4-列出-react-的一些主要优点\"><a class=\"markdownIt-Anchor\" href=\"#4-列出-react-的一些主要优点\">#</a> <strong>4. 列出 React 的一些主要优点。</strong></h3>\n<p>React 的一些主要优点是：</p>\n<ol>\n<li>它提高了应用的性能</li>\n<li>可以方便地在客户端和服务器端使用</li>\n<li>由于 JSX，代码的可读性很好</li>\n<li>React 很容易与 Meteor，Angular 等其他框架集成</li>\n<li>使用 React，编写 UI 测试用例变得非常容易</li>\n</ol>\n<h3 id=\"5-react-有哪些限制\"><a class=\"markdownIt-Anchor\" href=\"#5-react-有哪些限制\">#</a> <strong>5. React 有哪些限制？</strong></h3>\n<p>React 的限制如下：</p>\n<ol>\n<li>React 只是一个库，而不是一个完整的框架</li>\n<li>它的库非常庞大，需要时间来理解</li>\n<li>新手程序员可能很难理解</li>\n<li>编码变得复杂，因为它使用内联模板和 JSX</li>\n</ol>\n<h3 id=\"6-什么是-jsx\"><a class=\"markdownIt-Anchor\" href=\"#6-什么是-jsx\">#</a> <strong>6. 什么是 JSX？</strong></h3>\n<p>JSX 是 J avaScript XML 的简写。是 React 使用的一种文件，它利用 JavaScript 的表现力和类似 HTML 的模板语法。这使得 HTML 文件非常容易理解。此文件能使应用非常可靠，并能够提高其性能。下面是 JSX 的一个例子：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">render()&#123;\n    return(\n        &lt;div&gt;\n            &lt;h1&gt; Hello World from Edureka!!&lt;&#x2F;h1&gt;\n        &lt;&#x2F;div&gt;\n    );\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"7-你了解-virtual-dom-吗解释一下它的工作原理\"><a class=\"markdownIt-Anchor\" href=\"#7-你了解-virtual-dom-吗解释一下它的工作原理\">#</a> <strong>7. 你了解 Virtual DOM 吗？解释一下它的工作原理。</strong></h3>\n<p>Virtual DOM 是一个轻量级的 JavaScript 对象，它最初只是 real DOM 的副本。它是一个节点树，它将元素、它们的属性和内容作为对象及其属性。 React 的渲染函数从 React 组件中创建一个节点树。然后它响应数据模型中的变化来更新该树，该变化是由用户或系统完成的各种动作引起的。</p>\n<p>Virtual DOM 工作过程有三个简单的步骤。</p>\n<ol>\n<li>\n<p>每当底层数据发生改变时，整个 UI 都将在 Virtual DOM 描述中重新渲染。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c3abe78a05?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Virtual DOM 1\"></p>\n</li>\n<li>\n<p>然后计算之前 DOM 表示与新表示的之间的差异。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c3b5c6759a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Virtual DOM 2\"></p>\n</li>\n<li>\n<p>完成计算后，将只用实际更改的内容更新 real DOM。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c3b5163360?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Virtual DOM 3\"></p>\n</li>\n</ol>\n<h3 id=\"8-为什么浏览器无法读取-jsx\"><a class=\"markdownIt-Anchor\" href=\"#8-为什么浏览器无法读取-jsx\">#</a> <strong>8. 为什么浏览器无法读取 JSX？</strong></h3>\n<p>浏览器只能处理 JavaScript 对象，而不能读取常规 JavaScript 对象中的 JSX。所以为了使浏览器能够读取 JSX，首先，需要用像 Babel 这样的 JSX 转换器将 JSX 文件转换为 JavaScript 对象，然后再将其传给浏览器。</p>\n<h3 id=\"9-与-es5-相比react-的-es6-语法有何不同\"><a class=\"markdownIt-Anchor\" href=\"#9-与-es5-相比react-的-es6-语法有何不同\">#</a> <strong>9. 与 ES5 相比，React 的 ES6 语法有何不同？</strong></h3>\n<p>以下语法是 ES5 与 ES6 中的区别：</p>\n<ol>\n<li>require 与 import</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES5\nvar React &#x3D; require(&#39;react&#39;);\n\n&#x2F;&#x2F; ES6\nimport React from &#39;react&#39;;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>export 与 exports</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES5\nmodule.exports &#x3D; Component;\n\n&#x2F;&#x2F; ES6\nexport default Component;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>component 和 function</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES5\nvar MyComponent &#x3D; React.createClass(&#123;\n    render: function() &#123;\n        return\n\t\t\t&lt;h3&gt;Hello Edureka!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;);\n\n&#x2F;&#x2F; ES6\nclass MyComponent extends React.Component &#123;\n    render() &#123;\n        return\n\t\t\t&lt;h3&gt;Hello Edureka!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>props</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES5\nvar App &#x3D; React.createClass(&#123;\n    propTypes: &#123; name: React.PropTypes.string &#125;,\n    render: function() &#123;\n        return\n\t\t\t&lt;h3&gt;Hello, &#123;this.props.name&#125;!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;);\n\n&#x2F;&#x2F; ES6\nclass App extends React.Component &#123;\n    render() &#123;\n        return\n\t\t\t&lt;h3&gt;Hello, &#123;this.props.name&#125;!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>state</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES5\nvar App &#x3D; React.createClass(&#123;\n    getInitialState: function() &#123;\n        return &#123; name: &#39;world&#39; &#125;;\n    &#125;,\n    render: function() &#123;\n        return\n\t        &lt;h3&gt;Hello, &#123;this.state.name&#125;!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;);\n\n&#x2F;&#x2F; ES6\nclass App extends React.Component &#123;\n    constructor() &#123;\n        super();\n        this.state &#x3D; &#123; name: &#39;world&#39; &#125;;\n    &#125;\n    render() &#123;\n        return\n\t        &lt;h3&gt;Hello, &#123;this.state.name&#125;!&lt;&#x2F;h3&gt;;\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"10-react-与-angular-有何不同\"><a class=\"markdownIt-Anchor\" href=\"#10-react-与-angular-有何不同\">#</a> <strong>10. React 与 Angular 有何不同？</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>主题</strong></th>\n<th><strong>React</strong></th>\n<th><strong>Angular</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>1. 体系结构</em></td>\n<td>只有 MVC 中的 View</td>\n<td>完整的 MVC</td>\n</tr>\n<tr>\n<td><em>2. 渲染</em></td>\n<td>可以在服务器端渲染</td>\n<td>客户端渲染</td>\n</tr>\n<tr>\n<td><em>3. DOM</em></td>\n<td>使用 virtual DOM</td>\n<td>使用 real DOM</td>\n</tr>\n<tr>\n<td><em>4. 数据绑定</em></td>\n<td>单向数据绑定</td>\n<td>双向数据绑定</td>\n</tr>\n<tr>\n<td><em>5. 调试</em></td>\n<td>编译时调试</td>\n<td>运行时调试</td>\n</tr>\n<tr>\n<td><em>6. 作者</em></td>\n<td>Facebook</td>\n<td>Google</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"react-组件\"><a class=\"markdownIt-Anchor\" href=\"#react-组件\">#</a> <strong>React 组件</strong></h2>\n<h3 id=\"11-你理解在-react-中一切都是组件这句话\"><a class=\"markdownIt-Anchor\" href=\"#11-你理解在-react-中一切都是组件这句话\">#</a> <strong>11. 你理解 “在 React 中，一切都是组件” 这句话。</strong></h3>\n<p>组件是 React 应用 UI 的构建块。这些组件将整个 UI 分成小的独立并可重用的部分。每个组件彼此独立，而不会影响 UI 的其余部分。</p>\n<h3 id=\"12-解释-react-中-render-的目的\"><a class=\"markdownIt-Anchor\" href=\"#12-解释-react-中-render-的目的\">#</a> <strong>12. 解释 React 中 render () 的目的。</strong></h3>\n<p>每个 React 组件强制要求必须有一个 <strong>render()</strong>。它返回一个 React 元素，是原生 DOM 组件的表示。如果需要渲染多个 HTML 元素，则必须将它们组合在一个封闭标记内，例如  <code>&lt;form&gt;</code> 、 <code>&lt;group&gt;</code> 、 <code>&lt;div&gt;</code>  等。此函数必须保持纯净，即必须每次调用时都返回相同的结果。</p>\n<h3 id=\"13-如何将两个或多个组件嵌入到一个组件中\"><a class=\"markdownIt-Anchor\" href=\"#13-如何将两个或多个组件嵌入到一个组件中\">#</a> <strong>13. 如何将两个或多个组件嵌入到一个组件中？</strong></h3>\n<p>可以通过以下方式将组件嵌入到一个组件中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class MyComponent extends React.Component&#123;\n    render()&#123;\n        return(\n\t\t\t&lt;div&gt;\n            \t&lt;h1&gt;Hello&lt;&#x2F;h1&gt;\n                &lt;Header&#x2F;&gt;\n            &lt;&#x2F;div&gt;\n        );\n    &#125;\n&#125;\nclass Header extends React.Component&#123;\n    render()&#123;\n        return\n\t\t\t&lt;h1&gt;Header Component&lt;&#x2F;h1&gt;\n   &#125;;\n&#125;\nReactDOM.render(\n    &lt;MyComponent&#x2F;&gt;, document.getElementById(&#39;content&#39;)\n);\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"14-什么是-props\"><a class=\"markdownIt-Anchor\" href=\"#14-什么是-props\">#</a> <strong>14. 什么是 Props?</strong></h3>\n<p>Props 是 React 中属性的简写。它们是只读组件，必须保持纯，即不可变。它们总是在整个应用中从父组件传递到子组件。子组件永远不能将 prop 送回父组件。这有助于维护单向数据流，通常用于呈现动态生成的数据。</p>\n<h3 id=\"15-react-中的状态是什么它是如何使用的\"><a class=\"markdownIt-Anchor\" href=\"#15-react-中的状态是什么它是如何使用的\">#</a> <strong>15. React 中的状态是什么？它是如何使用的？</strong></h3>\n<p>状态是 React 组件的核心，是数据的来源，必须尽可能简单。基本上状态是确定组件呈现和行为的对象。与 props 不同，它们是可变的，并创建动态和交互式组件。可以通过  <code>this.state()</code>  访问它们。</p>\n<h3 id=\"16-区分状态和-props\"><a class=\"markdownIt-Anchor\" href=\"#16-区分状态和-props\">#</a> <strong>16. 区分状态和 props</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>条件</strong></th>\n<th><strong>State</strong></th>\n<th><strong>Props</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 从父组件中接收初始值</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>2. 父组件可以改变值</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>3. 在组件中设置默认值</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>4. 在组件的内部变化</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>5. 设置子组件的初始值</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>6. 在子组件的内部更改</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"17-如何更新组件的状态\"><a class=\"markdownIt-Anchor\" href=\"#17-如何更新组件的状态\">#</a> <strong>17. 如何更新组件的状态？</strong></h3>\n<p>可以用  <code>this.setState()</code>  更新组件的状态。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class MyComponent extends React.Component &#123;\n    constructor() &#123;\n        super();\n        this.state &#x3D; &#123;\n            name: &#39;Maxx&#39;,\n            id: &#39;101&#39;\n        &#125;\n    &#125;\n    render()\n        &#123;\n            setTimeout(()&#x3D;&gt;&#123;this.setState(&#123;name:&#39;Jaeha&#39;, id:&#39;222&#39;&#125;)&#125;,2000)\n            return (\n\t\t\t\t&lt;div&gt;\n                \t&lt;h1&gt;Hello &#123;this.state.name&#125;&lt;&#x2F;h1&gt;\n\t\t\t\t\t&lt;h2&gt;Your Id is &#123;this.state.id&#125;&lt;&#x2F;h2&gt;\n                &lt;&#x2F;div&gt;\n            );\n        &#125;\n    &#125;\nReactDOM.render(\n    &lt;MyComponent&#x2F;&gt;, document.getElementById(&#39;content&#39;)\n);\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"18-react-中的箭头函数是什么怎么用\"><a class=\"markdownIt-Anchor\" href=\"#18-react-中的箭头函数是什么怎么用\">#</a> <strong>18. React 中的箭头函数是什么？怎么用？</strong></h3>\n<p>箭头函数（<strong>=&gt;</strong>）是用于编写函数表达式的简短语法。这些函数允许正确绑定组件的上下文，因为在 ES6 中默认下不能使用自动绑定。使用高阶函数时，箭头函数非常有用。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;General way\nrender() &#123;\n    return(\n        &lt;MyInput onChange &#x3D; &#123;this.handleChange.bind(this) &#125; &#x2F;&gt;\n    );\n&#125;\n&#x2F;&#x2F;With Arrow Function\nrender() &#123;\n    return(\n        &lt;MyInput onChange &#x3D; &#123; (e)&#x3D;&gt;this.handleOnChange(e) &#125; &#x2F;&gt;\n    );\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"19-区分有状态和无状态组件\"><a class=\"markdownIt-Anchor\" href=\"#19-区分有状态和无状态组件\">#</a> <strong>19. 区分有状态和无状态组件。</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>有状态组件</strong></th>\n<th><strong>无状态组件</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 在内存中存储有关组件状态变化的信息</td>\n<td>1. 计算组件的内部的状态</td>\n</tr>\n<tr>\n<td>2. 有权改变状态</td>\n<td>2. 无权改变状态</td>\n</tr>\n<tr>\n<td>3. 包含过去、现在和未来可能的状态变化情况</td>\n<td>3. 不包含过去，现在和未来可能发生的状态变化情况</td>\n</tr>\n<tr>\n<td>4. 接受无状态组件状态变化要求的通知，然后将 props 发送给他们。</td>\n<td>4. 从有状态组件接收 props 并将其视为回调函数。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"20-react-组件生命周期的阶段是什么\"><a class=\"markdownIt-Anchor\" href=\"#20-react-组件生命周期的阶段是什么\">#</a> <strong>20. React 组件生命周期的阶段是什么？</strong></h3>\n<p>React 组件的生命周期有三个不同的阶段：</p>\n<ol>\n<li>* 初始渲染阶段：* 这是组件即将开始其生命之旅并进入 DOM 的阶段。</li>\n<li>* 更新阶段：* 一旦组件被添加到 DOM，它只有在 prop 或状态发生变化时才可能更新和重新渲染。这些只发生在这个阶段。</li>\n<li>* 卸载阶段：* 这是组件生命周期的最后阶段，组件被销毁并从 DOM 中删除。</li>\n</ol>\n<h3 id=\"21-详细解释-react-组件的生命周期方法\"><a class=\"markdownIt-Anchor\" href=\"#21-详细解释-react-组件的生命周期方法\">#</a> <strong>21. 详细解释 React 组件的生命周期方法。</strong></h3>\n<p>一些最重要的生命周期方法是：</p>\n<ol>\n<li><strong>*componentWillMount***</strong>()** – 在渲染之前执行，在客户端和服务器端都会执行。</li>\n<li><strong>*componentDidMount***</strong>()** – 仅在第一次渲染后在客户端执行。</li>\n<li><strong>*componentWillReceiveProps***</strong>()** – 当从父类接收到 props 并且在调用另一个渲染器之前调用。</li>\n<li><strong>*shouldComponentUpdate***</strong>()** – 根据特定条件返回 true 或 false。如果你希望更新组件，请返回<strong> true</strong> 否则返回 **false**。默认情况下，它返回 false。</li>\n<li><strong>*componentWillUpdate***</strong>()** – 在 DOM 中进行渲染之前调用。</li>\n<li><strong>*componentDidUpdate***</strong>()** – 在渲染发生后立即调用。</li>\n<li><strong>*componentWillUnmount***</strong>()** – 从 DOM 卸载组件后调用。用于清理内存空间。</li>\n</ol>\n<h3 id=\"22-react-中的事件是什么\"><a class=\"markdownIt-Anchor\" href=\"#22-react-中的事件是什么\">#</a> <strong>22. React 中的事件是什么？</strong></h3>\n<p>在 React 中，事件是对鼠标悬停、鼠标单击、按键等特定操作的触发反应。处理这些事件类似于处理 DOM 元素中的事件。但是有一些语法差异，如：</p>\n<ol>\n<li>用驼峰命名法对事件命名而不是仅使用小写字母。</li>\n<li>事件作为函数而不是字符串传递。</li>\n</ol>\n<p>事件参数重包含一组特定于事件的属性。每个事件类型都包含自己的属性和行为，只能通过其事件处理程序访问。</p>\n<h3 id=\"23-如何在-react-中创建一个事件\"><a class=\"markdownIt-Anchor\" href=\"#23-如何在-react-中创建一个事件\">#</a> <strong>23. 如何在 React 中创建一个事件？</strong></h3>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Display extends React.Component(&#123;\n    show(evt) &#123;\n        &#x2F;&#x2F; code\n    &#125;,\n    render() &#123;\n        &#x2F;&#x2F; Render the div with an onClick prop (value is a function)\n        return (\n            &lt;div onClick&#x3D;&#123;this.show&#125;&gt;Click Me!&lt;&#x2F;div&gt;\n        );\n    &#125;\n&#125;);\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"24-react-中的合成事件是什么\"><a class=\"markdownIt-Anchor\" href=\"#24-react-中的合成事件是什么\">#</a> <strong>24. React 中的合成事件是什么？</strong></h3>\n<p>合成事件是围绕浏览器原生事件充当跨浏览器包装器的对象。它们将不同浏览器的行为合并为一个 API。这样做是为了确保事件在不同浏览器中显示一致的属性。</p>\n<h3 id=\"25-你对-react-的-refs-有什么了解\"><a class=\"markdownIt-Anchor\" href=\"#25-你对-react-的-refs-有什么了解\">#</a> <strong>25. 你对 React 的 refs 有什么了解？</strong></h3>\n<p>Refs 是 React 中引用的简写。它是一个有助于存储对特定的 React 元素或组件的引用的属性，它将由组件渲染配置函数返回。用于对 render () 返回的特定元素或组件的引用。当需要进行 DOM 测量或向组件添加方法时，它们会派上用场。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class ReferenceDemo extends React.Component&#123;\n     display() &#123;\n         const name &#x3D; this.inputDemo.value;\n         document.getElementById(&#39;disp&#39;).innerHTML &#x3D; name;\n     &#125;\nrender() &#123;\n    return(\n          &lt;div&gt;\n            Name: &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123;input &#x3D;&gt; this.inputDemo &#x3D; input&#125; &#x2F;&gt;\n            &lt;button name&#x3D;&quot;Click&quot; onClick&#x3D;&#123;this.display&#125;&gt;Click&lt;&#x2F;button&gt;\n            &lt;h2&gt;Hello &lt;span id&#x3D;&quot;disp&quot;&gt;&lt;&#x2F;span&gt; !!!&lt;&#x2F;h2&gt;\n          &lt;&#x2F;div&gt;\n    );\n   &#125;\n &#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"26-列出一些应该使用-refs-的情况\"><a class=\"markdownIt-Anchor\" href=\"#26-列出一些应该使用-refs-的情况\">#</a> <strong>26. 列出一些应该使用 Refs 的情况。</strong></h3>\n<p>以下是应该使用 refs 的情况：</p>\n<ul>\n<li>需要管理焦点、选择文本或媒体播放时</li>\n<li>触发式动画</li>\n<li>与第三方 DOM 库集成</li>\n</ul>\n<h3 id=\"27-如何模块化-react-中的代码\"><a class=\"markdownIt-Anchor\" href=\"#27-如何模块化-react-中的代码\">#</a> <strong>27. 如何模块化 React 中的代码？</strong></h3>\n<p>可以使用 export 和 import 属性来模块化代码。它们有助于在不同的文件中单独编写组件。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;ChildComponent.jsx\nexport default class ChildComponent extends React.Component &#123;\n    render() &#123;\n        return(\n              &lt;div&gt;\n              \t&lt;h1&gt;This is a child component&lt;&#x2F;h1&gt;\n              &lt;&#x2F;div&gt;\n        );\n    &#125;\n&#125;\n\n&#x2F;&#x2F;ParentComponent.jsx\nimport ChildComponent from &#39;.&#x2F;childcomponent.js&#39;;\nclass ParentComponent extends React.Component &#123;\n    render() &#123;\n        return(\n             &lt;div&gt;\n                &lt;App &#x2F;&gt;\n             &lt;&#x2F;div&gt;\n        );\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"28-如何在-react-中创建表单\"><a class=\"markdownIt-Anchor\" href=\"#28-如何在-react-中创建表单\">#</a> <strong>28. 如何在 React 中创建表单</strong></h3>\n<p>React 表单类似于 HTML 表单。但是在 React 中，状态包含在组件的 state 属性中，并且只能通过  <code>setState()</code>  更新。因此元素不能直接更新它们的状态，它们的提交是由 JavaScript 函数处理的。此函数可以完全访问用户输入到表单的数据。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">handleSubmit(event) &#123;\n    alert(&#39;A name was submitted: &#39; + this.state.value);\n    event.preventDefault();\n&#125;\n\nrender() &#123;\n    return (\n        &lt;form onSubmit&#x3D;&#123;this.handleSubmit&#125;&gt;\n            &lt;label&gt;\n                Name:\n                &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;this.state.value&#125; onChange&#x3D;&#123;this.handleSubmit&#125; &#x2F;&gt;\n            &lt;&#x2F;label&gt;\n            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot; &#x2F;&gt;\n        &lt;&#x2F;form&gt;\n    );\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"29-你对受控组件和非受控组件了解多少\"><a class=\"markdownIt-Anchor\" href=\"#29-你对受控组件和非受控组件了解多少\">#</a> <strong>29. 你对受控组件和非受控组件了解多少？</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>受控组件</strong></th>\n<th><strong>非受控组件</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 没有维持自己的状态</td>\n<td>1. 保持着自己的状态</td>\n</tr>\n<tr>\n<td>2. 数据由父组件控制</td>\n<td>2. 数据由 DOM 控制</td>\n</tr>\n<tr>\n<td>3. 通过 props 获取当前值，然后通过回调通知更改</td>\n<td>3. Refs 用于获取其当前值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"30-什么是高阶组件hoc\"><a class=\"markdownIt-Anchor\" href=\"#30-什么是高阶组件hoc\">#</a> <strong>30. 什么是高阶组件（HOC）？</strong></h3>\n<p>高阶组件是重用组件逻辑的高级方法，是一种源于 React 的组件模式。 HOC 是自定义组件，在它之内包含另一个组件。它们可以接受子组件提供的任何动态，但不会修改或复制其输入组件中的任何行为。你可以认为 HOC 是 “纯（Pure）” 组件。</p>\n<h3 id=\"31-你能用-hoc-做什么\"><a class=\"markdownIt-Anchor\" href=\"#31-你能用-hoc-做什么\">#</a> <strong>31. 你能用 HOC 做什么？</strong></h3>\n<p>HOC 可用于许多任务，例如：</p>\n<ul>\n<li>代码重用，逻辑和引导抽象</li>\n<li>渲染劫持</li>\n<li>状态抽象和控制</li>\n<li>Props 控制</li>\n</ul>\n<h3 id=\"32-什么是纯组件\"><a class=\"markdownIt-Anchor\" href=\"#32-什么是纯组件\">#</a> <strong>32. 什么是纯组件？</strong></h3>\n<p><em>纯（Pure）</em> 组件是可以编写的最简单、最快的组件。它们可以替换任何只有 <strong>render()</strong> 的组件。这些组件增强了代码的简单性和应用的性能。</p>\n<h3 id=\"33-react-中-key-的重要性是什么\"><a class=\"markdownIt-Anchor\" href=\"#33-react-中-key-的重要性是什么\">#</a> <strong>33. React 中 key 的重要性是什么？</strong></h3>\n<p>key 用于识别唯一的 Virtual DOM 元素及其驱动 UI 的相应数据。它们通过回收 DOM 中当前所有的元素来帮助 React 优化渲染。这些 key 必须是唯一的数字或字符串，React 只是重新排序元素而不是重新渲染它们。这可以提高应用程序的性能。</p>\n<h2 id=\"react-redux\"><a class=\"markdownIt-Anchor\" href=\"#react-redux\">#</a> <strong>React Redux</strong></h2>\n<h3 id=\"34-mvc-框架的主要问题是什么\"><a class=\"markdownIt-Anchor\" href=\"#34-mvc-框架的主要问题是什么\">#</a> <strong>34. MVC 框架的主要问题是什么？</strong></h3>\n<p>以下是 MVC 框架的一些主要问题：</p>\n<ul>\n<li>对 DOM 操作的代价非常高</li>\n<li>程序运行缓慢且效率低下</li>\n<li>内存浪费严重</li>\n<li>由于循环依赖性，组件模型需要围绕 models 和 views 进行创建</li>\n</ul>\n<h3 id=\"35-解释一下-flux\"><a class=\"markdownIt-Anchor\" href=\"#35-解释一下-flux\">#</a> <strong>35. 解释一下 Flux</strong></h3>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c4d3813a3e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"flux\"></p>\n<p>Flux 是一种强制单向数据流的架构模式。它控制派生数据，并使用具有所有数据权限的中心 store 实现多个组件之间的通信。整个应用中的数据更新必须只能在此处进行。 Flux 为应用提供稳定性并减少运行时的错误。</p>\n<h3 id=\"36-什么是-redux\"><a class=\"markdownIt-Anchor\" href=\"#36-什么是-redux\">#</a> <strong>36. 什么是 Redux？</strong></h3>\n<p>Redux 是当今最热门的前端开发库之一。它是 JavaScript 程序的可预测状态容器，用于整个应用的状态管理。使用 Redux 开发的应用易于测试，可以在不同环境中运行，并显示一致的行为。</p>\n<h3 id=\"37-redux-遵循的三个原则是什么\"><a class=\"markdownIt-Anchor\" href=\"#37-redux-遵循的三个原则是什么\">#</a> <strong>37. Redux 遵循的三个原则是什么？</strong></h3>\n<ol>\n<li>**<em> 单一事实来源：</em>** 整个应用的状态存储在单个 store 中的对象 / 状态树里。单一状态树可以更容易地跟踪随时间的变化，并调试或检查应用程序。</li>\n<li>**<em> 状态是只读的：</em>** 改变状态的唯一方法是去触发一个动作。动作是描述变化的普通 JS 对象。就像 state 是数据的最小表示一样，该操作是对数据更改的最小表示。</li>\n<li>**<em> 使用纯函数进行更改：</em>** 为了指定状态树如何通过操作进行转换，你需要纯函数。纯函数是那些返回值仅取决于其参数值的函数。</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c501879053?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Store\"></p>\n<h3 id=\"38-你对单一事实来源有什么理解\"><a class=\"markdownIt-Anchor\" href=\"#38-你对单一事实来源有什么理解\">#</a> <strong>38. 你对 “单一事实来源” 有什么理解？</strong></h3>\n<p>Redux 使用 “Store” 将程序的整个状态存储在同一个地方。因此所有组件的状态都存储在 Store 中，并且它们从 Store 本身接收更新。单一状态树可以更容易地跟踪随时间的变化，并调试或检查程序。</p>\n<h3 id=\"39-列出-redux-的组件\"><a class=\"markdownIt-Anchor\" href=\"#39-列出-redux-的组件\">#</a> <strong>39. 列出 Redux 的组件。</strong></h3>\n<p>Redux 由以下组件组成：</p>\n<ol>\n<li><strong>Action</strong> – 这是一个用来描述发生了什么事情的对象。</li>\n<li><strong>Reducer</strong> – 这是一个确定状态将如何变化的地方。</li>\n<li><strong>Store</strong> – 整个程序的状态 / 对象树保存在 Store 中。</li>\n<li><strong>View</strong> – 只显示 Store 提供的数据。</li>\n</ol>\n<h3 id=\"40-数据如何通过-redux-流动\"><a class=\"markdownIt-Anchor\" href=\"#40-数据如何通过-redux-流动\">#</a> <strong>40. 数据如何通过 Redux 流动？</strong></h3>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/3/25/169b42c4958809d0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Data Flow in Redux\"></p>\n<h3 id=\"41-如何在-redux-中定义-action\"><a class=\"markdownIt-Anchor\" href=\"#41-如何在-redux-中定义-action\">#</a> <strong>41. 如何在 Redux 中定义 Action？</strong></h3>\n<p>React 中的 Action 必须具有 type 属性，该属性指示正在执行的 ACTION 的类型。必须将它们定义为字符串常量，并且还可以向其添加更多的属性。在 Redux 中，action 被名为 Action Creators 的函数所创建。以下是 Action 和 Action Creator 的示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function addTodo(text) &#123;\n       return &#123;\n                type: ADD_TODO,\n                 text\n    &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"42-解释-reducer-的作用\"><a class=\"markdownIt-Anchor\" href=\"#42-解释-reducer-的作用\">#</a> <strong>42. 解释 Reducer 的作用。</strong></h3>\n<p>Reducers 是纯函数，它规定应用程序的状态怎样因响应 ACTION 而改变。Reducers 通过接受先前的状态和 action 来工作，然后它返回一个新的状态。它根据操作的类型确定需要执行哪种更新，然后返回新的值。如果不需要完成任务，它会返回原来的状态。</p>\n<h3 id=\"43-store-在-redux-中的意义是什么\"><a class=\"markdownIt-Anchor\" href=\"#43-store-在-redux-中的意义是什么\">#</a> <strong>43. Store 在 Redux 中的意义是什么？</strong></h3>\n<p>Store 是一个 JavaScript 对象，它可以保存程序的状态，并提供一些方法来访问状态、调度操作和注册侦听器。应用程序的整个状态 / 对象树保存在单一存储中。因此，Redux 非常简单且是可预测的。我们可以将中间件传递到 store 来处理数据，并记录改变存储状态的各种操作。所有操作都通过 reducer 返回一个新状态。</p>\n<h3 id=\"44-redux-与-flux-有何不同\"><a class=\"markdownIt-Anchor\" href=\"#44-redux-与-flux-有何不同\">#</a> <strong>44. Redux 与 Flux 有何不同？</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>Flux</strong></th>\n<th><strong>Redux</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. Store 包含状态和更改逻辑</td>\n<td>1. Store 和更改逻辑是分开的</td>\n</tr>\n<tr>\n<td>2. 有多个 Store</td>\n<td>2. 只有一个 Store</td>\n</tr>\n<tr>\n<td>3. 所有 Store 都互不影响且是平级的</td>\n<td>3. 带有分层 reducer 的单一 Store</td>\n</tr>\n<tr>\n<td>4. 有单一调度器</td>\n<td>4. 没有调度器的概念</td>\n</tr>\n<tr>\n<td>5. React 组件订阅 store</td>\n<td>5. 容器组件是有联系的</td>\n</tr>\n<tr>\n<td>6. 状态是可变的</td>\n<td>6. 状态是不可改变的</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"45-redux-有哪些优点\"><a class=\"markdownIt-Anchor\" href=\"#45-redux-有哪些优点\">#</a> <strong>45. Redux 有哪些优点？</strong></h3>\n<p>Redux 的优点如下：</p>\n<ul>\n<li><strong>结果的可预测性 -</strong> 由于总是存在一个真实来源，即 store ，因此不存在如何将当前状态与动作和应用的其他部分同步的问题。</li>\n<li><strong>可维护性 -</strong> 代码变得更容易维护，具有可预测的结果和严格的结构。</li>\n<li><strong>服务器端渲染 -</strong> 你只需将服务器上创建的 store 传到客户端即可。这对初始渲染非常有用，并且可以优化应用性能，从而提供更好的用户体验。</li>\n<li><strong>开发人员工具 -</strong> 从操作到状态更改，开发人员可以实时跟踪应用中发生的所有事情。</li>\n<li><strong>社区和生态系统 -</strong> Redux 背后有一个巨大的社区，这使得它更加迷人。一个由才华横溢的人组成的大型社区为库的改进做出了贡献，并开发了各种应用。</li>\n<li><strong>易于测试 -</strong> Redux 的代码主要是小巧、纯粹和独立的功能。这使代码可测试且独立。</li>\n<li><strong>组织 -</strong> Redux 准确地说明了代码的组织方式，这使得代码在团队使用时更加一致和简单。</li>\n</ul>\n<h2 id=\"react-路由\"><a class=\"markdownIt-Anchor\" href=\"#react-路由\">#</a> <strong>React 路由</strong></h2>\n<h3 id=\"46-什么是-react-路由\"><a class=\"markdownIt-Anchor\" href=\"#46-什么是-react-路由\">#</a> <strong>46. 什么是 React 路由？</strong></h3>\n<p>React 路由是一个构建在 React 之上的强大的路由库，它有助于向应用程序添加新的屏幕和流。这使 URL 与网页上显示的数据保持同步。它负责维护标准化的结构和行为，并用于开发单页 Web 应用。 React 路由有一个简单的 API。</p>\n<h3 id=\"47-为什么-react-router-v4-中使用-switch-关键字\"><a class=\"markdownIt-Anchor\" href=\"#47-为什么-react-router-v4-中使用-switch-关键字\">#</a> <strong>47. 为什么 React Router v4 中使用 switch 关键字 ？</strong></h3>\n<p>虽然 <strong> <code>&lt;div&gt;</code>  ** 用于封装 Router 中的多个路由，当你想要仅显示要在多个定义的路线中呈现的单个路线时，可以使用 “switch” 关键字。使用时，</strong> <code>&lt;switch&gt;</code> ** 标记会按顺序将已定义的 URL 与已定义的路由进行匹配。找到第一个匹配项后，它将渲染指定的路径。从而绕过其它路线。</p>\n<h3 id=\"48-为什么需要-react-中的路由\"><a class=\"markdownIt-Anchor\" href=\"#48-为什么需要-react-中的路由\">#</a> <strong>48. 为什么需要 React 中的路由？</strong></h3>\n<p>Router 用于定义多个路由，当用户定义特定的 URL 时，如果此 URL 与 Router 内定义的任何 “路由” 的路径匹配，则用户将重定向到该特定路由。所以基本上我们需要在自己的应用中添加一个 Router 库，允许创建多个路由，每个路由都会向我们提供一个独特的视图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;switch&gt;\n    &lt;route exact path&#x3D;’&#x2F;’ component&#x3D;&#123;Home&#125;&#x2F;&gt;\n    &lt;route path&#x3D;’&#x2F;posts&#x2F;:id’ component&#x3D;&#123;Newpost&#125;&#x2F;&gt;\n    &lt;route path&#x3D;’&#x2F;posts’   component&#x3D;&#123;Post&#125;&#x2F;&gt;\n&lt;&#x2F;switch&gt;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"49-列出-react-router-的优点\"><a class=\"markdownIt-Anchor\" href=\"#49-列出-react-router-的优点\">#</a> <strong>49. 列出 React Router 的优点。</strong></h3>\n<p>几个优点是：</p>\n<ol>\n<li>就像 React 基于组件一样，在 React Router v4 中，API 是 <em>‘All About Components’</em>。可以将 Router 可视化为单个根组件（<strong> <code>&lt;BrowserRouter&gt;</code> </strong>），其中我们将特定的子路由（<strong> <code>&lt;route&gt;</code> </strong>）包起来。</li>\n<li>无需手动设置历史值：在 React Router v4 中，我们要做的就是将路由包装在 <strong> <code>&lt;BrowserRouter&gt;</code> </strong> 组件中。</li>\n<li>包是分开的：共有三个包，分别用于 Web、Native 和 Core。这使我们应用更加紧凑。基于类似的编码风格很容易进行切换。</li>\n</ol>\n<h3 id=\"50-react-router-与常规路由有何不同\"><a class=\"markdownIt-Anchor\" href=\"#50-react-router-与常规路由有何不同\">#</a> <strong>50. React Router 与常规路由有何不同？</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>主题</strong></th>\n<th><strong>常规路由</strong></th>\n<th><strong>React 路由</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>参与的页面</strong></td>\n<td>每个视图对应一个新文件</td>\n<td>只涉及单个 HTML 页面</td>\n</tr>\n<tr>\n<td><strong>URL 更改</strong></td>\n<td>HTTP 请求被发送到服务器并且接收相应的 HTML 页面</td>\n<td>仅更改历史记录属性</td>\n</tr>\n<tr>\n<td><strong>体验</strong></td>\n<td>用户实际在每个视图的不同页面切换</td>\n<td>用户认为自己正在不同的页面间切换</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "React基础面试题-50"
            ]
        }
    ]
}