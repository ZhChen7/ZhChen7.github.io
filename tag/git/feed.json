{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"git\" tag",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/07/19/DevelopmentEnvironment/",
            "url": "http://example.com/2019/07/19/DevelopmentEnvironment/",
            "title": "开发环境",
            "date_published": "2019-07-19T09:57:31.000Z",
            "content_html": "<h1 id=\"开发环境\"><a class=\"markdownIt-Anchor\" href=\"#开发环境\">#</a> 开发环境</h1>\n<blockquote>\n<p>讲解在面试过程中，面试官可能会问及的前端开发环境的问题，例如 <strong>IDE</strong> ，<strong>Git</strong> ，<strong>模块化</strong> ，<strong>打包工具</strong> ，<strong>上线流程</strong> ，这些类别的题目。</p>\n<p>知识点：</p>\n<p>7-1 IDE</p>\n<p>7-2 Git</p>\n<p>7-3 模块化</p>\n<p>7-4 构建工具</p>\n<p>7-5 上线和回滚</p>\n</blockquote>\n<h3 id=\"关于开发环境\"><a class=\"markdownIt-Anchor\" href=\"#关于开发环境\">#</a> 关于开发环境</h3>\n<ul>\n<li>面试官想通过开发环境了解面试者的经验</li>\n<li>开发环境，最能体现工作产出的效率</li>\n<li>会以聊天的形式为主，而不是出具体的问题</li>\n</ul>\n<h2 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h2>\n<blockquote>\n<p><strong>IDE</strong> ，<strong>Git</strong> ，<strong>JS 模块化</strong> ，<strong>打包工具</strong> ，<strong>上线流程</strong> ，</p>\n</blockquote>\n<ul>\n<li>IDE （ 写代码的效率 ）</li>\n<li>git （ 代码版本管理 ，多人协作开发 ）</li>\n<li>JS 模块化</li>\n<li>打包工具</li>\n<li>上线回滚的流程</li>\n</ul>\n<h2 id=\"7-1-ide\"><a class=\"markdownIt-Anchor\" href=\"#7-1-ide\">#</a> 7-1 IDE</h2>\n<ul>\n<li>webstorm （ 我平常基本用的就是 <strong>webstorm</strong> ）</li>\n<li>sublime</li>\n<li>vscode</li>\n<li>atom</li>\n<li>插件 插件 插件 ！！！</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/MxVs8IUJKDhO.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/QNC5aBgIVByU.png?imageslim\" alt=\"mark\"></p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>千万不要说你使用 Dreamweaver 或者 notpad ++</li>\n<li>不做 .net 也不要用 Visual Studio</li>\n<li>不做 java 也不要用 eclipse</li>\n</ul>\n<h2 id=\"7-2-git\"><a class=\"markdownIt-Anchor\" href=\"#7-2-git\">#</a> 7-2 Git</h2>\n<blockquote>\n<p>Git 详细介绍：可参考的的博客：<a href=\"http://zxinc520.com/lcj/%225d285a027b8c9f7d8dc4f627%22\">Git 篇</a></p>\n</blockquote>\n<ul>\n<li>正式项目都需要代码版本管理</li>\n<li>大型项目需要多人协作开发</li>\n<li>Git 和 linux 是一个作者</li>\n</ul>\n<h2 id=\"7-3-模块化\"><a class=\"markdownIt-Anchor\" href=\"#7-3-模块化\">#</a> 7-3 模块化</h2>\n<blockquote>\n<p>模块化编程就是通过组合一些<strong>相对独立可复用的模块</strong>来进行功能的实现，其最核心的两部分是<strong>定义模块</strong>和<strong>引入模块</strong>；</p>\n<ul>\n<li>定义模块时，每个模块内部的执行逻辑是不被外部感知的，只是导出（暴露）出部分方法和数据；</li>\n<li>引入模块时，同步 / 异步去加载待引入的代码，执行并获取到其暴露的方法和数据；</li>\n</ul>\n<p><strong>模块化的发展情况</strong> ：无模块化–&gt;CommonJS 规范–&gt;AMD 规范–&gt;CMD 规范–&gt;ES6 模块化</p>\n<p><a href=\"https://juejin.im/post/5b6c222a6fb9a04fde5af4ee\">Javascript 模块化指北</a></p>\n<p><a href=\"https://juejin.im/post/5b4420e7f265da0f4b7a7b27\">这一次，我要弄懂 javascript 的模块化</a></p>\n</blockquote>\n<h3 id=\"知识点-2\"><a class=\"markdownIt-Anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<ul>\n<li>不使用模块化的情况</li>\n<li>使用模块化</li>\n<li>AMD</li>\n<li>CommonJS</li>\n</ul>\n<h4 id=\"无模块化\"><a class=\"markdownIt-Anchor\" href=\"#无模块化\">#</a> 无模块化</h4>\n<p>script 标签引入 js 文件，相互罗列，但是被依赖的放在前面，否则使用就会报错。如下：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"jquery.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n　　<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"jquery_scroller.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n　　<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"main.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n　　<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"other1.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n　　<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"other2.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n　　<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"other3.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>​ 即简单的将所有的 js 文件统统放在一起。但是这些文件的顺序还不能出错，比如 jquery 需要先引入，才能引入 jquery 插件，才能在其他的文件中使用 jquery。缺点很明显：</p>\n<ul>\n<li>污染全局作用域</li>\n<li>维护成本高</li>\n<li>依赖关系不明显</li>\n</ul>\n<h3 id=\"amd-规范\"><a class=\"markdownIt-Anchor\" href=\"#amd-规范\">#</a> AMD 规范</h3>\n<blockquote>\n<p>异步模块定义（<strong>AMD</strong>）API 指定了一种定义模块的机制，以便可以异步加载模块及其依赖项。这特别适用于浏览器环境，其中模块的同步加载会导致性能，可用性，调试和跨域访问问题。</p>\n</blockquote>\n<ul>\n<li>require.js <a href=\"https://requirejs.org/\">https://requirejs.org/</a></li>\n<li>全局 define 函数</li>\n<li>全局 require 函数</li>\n<li>依赖 JS 会自动、异步加载</li>\n</ul>\n<p>AMD 标准中，定义了下面三个 API：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>module<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>depends<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequire<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>即通过 define 来<strong>定义</strong>一个模块，然后使用 require 来<strong>加载</strong>一个模块，使用 require.config () 指定引用路径。</p>\n<h4 id=\"举例说明\"><a class=\"markdownIt-Anchor\" href=\"#举例说明\">#</a> 举例说明：</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script\n  src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\"</span>\n  data<span class=\"token operator\">-</span>main<span class=\"token operator\">=</span><span class=\"token string\">\"./main.js\"</span>\n<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>main.js:</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"./a.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">printDate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>a.js:</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"./a-util.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">aUtil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">printDate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aUtil<span class=\"token punctuation\">.</span><span class=\"token function\">aGetFormatDate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>a-util.js:</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"./util.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">util</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> aUtil <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">aGetFormatDate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">getFormatDate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> aUtil<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>util.js:</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> util <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">getFormatDate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"2019-07-19\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"2019年6月20日\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> util<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/tVkLYFlEzrtH.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"commonjs\"><a class=\"markdownIt-Anchor\" href=\"#commonjs\">#</a> CommonJS</h3>\n<blockquote>\n<p>2009 年 ry 发布 Node.js 的第一个版本，CommonJS 作为其中最核心的特性之一，适用于服务端下的场景；历年来的考察和时间的洗礼，以及前端工程化对其的充分支持，CommonJS 被广泛运用于 Node.js 和浏览器；</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// Core Module</span>\n<span class=\"token keyword\">const</span> cp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child_process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Npm Module</span>\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Custom Module</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> axios <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>规范</strong></p>\n<ul>\n<li>module (Object): 模块本身</li>\n<li>exports (*): 模块的导出部分，即暴露出来的内容</li>\n<li>require (Function): 加载模块的函数，获得目标模块的导出值（基础类型为复制，引用类型为浅拷贝），可以加载内置模块、npm 模块和自定义模块。</li>\n</ul>\n<p><strong>nodejs 模块化规范，现在被大量用前端，原因</strong> ：</p>\n<ul>\n<li>前端开发依赖的插件课库，都可以从 npm 中获取</li>\n<li>构建工具的高度自动化，使得使用 npm 的成本非常低</li>\n<li>CommonJS 不会异步加载 JS ，而是同步一次性加载出来</li>\n</ul>\n<h4 id=\"使用-commonjs\"><a class=\"markdownIt-Anchor\" href=\"#使用-commonjs\">#</a> 使用 CommonJS</h4>\n<blockquote>\n<p><strong>module</strong> (Object)、<strong>exports</strong> (*)、<strong>require</strong> (Function)</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//util.ls</span>\nmodule<span class=\"token punctuation\">.</span>export <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">getFormatDate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"2019-07-19\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"2019年6月20日\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//a-util.js</span>\n<span class=\"token keyword\">var</span> util <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"util.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>export <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">aGetFormatDate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">getFormatDate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"特性总结\"><a class=\"markdownIt-Anchor\" href=\"#特性总结\">#</a> 特性总结</h4>\n<ul>\n<li>同步执行模块声明和引入逻辑，分析一些复杂的依赖引用（如循环依赖）时需注意；</li>\n<li>缓存机制，性能更优，同时限制了内存占用；</li>\n<li>Module 模块可供改造的灵活度高，可以实现一些定制需求（如热更新、任意文件类型模块支持）；</li>\n</ul>\n<h4 id=\"amd-和-commonjs-的使用场景\"><a class=\"markdownIt-Anchor\" href=\"#amd-和-commonjs-的使用场景\">#</a> AMD 和 CommonJS 的使用场景</h4>\n<ul>\n<li>需要异步加载 JS ，使用 AMD</li>\n<li>使用了 npm 之后建议使用 CommonJS</li>\n</ul>\n<h3 id=\"重点总结\"><a class=\"markdownIt-Anchor\" href=\"#重点总结\">#</a> 重点总结</h3>\n<ul>\n<li>AMD</li>\n<li>CommonJS</li>\n<li>两者的区别</li>\n</ul>\n<h2 id=\"7-4-构建工具\"><a class=\"markdownIt-Anchor\" href=\"#7-4-构建工具\">#</a> 7-4 构建工具</h2>\n<blockquote>\n<p>我们一定会感叹前端技术发展之快，各种可以提高开发效率的新思想和框架层出不穷。但是他们都有一个共同特点：源代码无法直接运行，必须通过转换后才能正常运行。</p>\n<p>比如：Grunt 、Gulp、FIS 3、<strong>Webpack</strong> …</p>\n<p><a href=\"https://juejin.im/entry/5ae5c8c9f265da0b9f400d8e\">前端构建工具发展及其比较</a></p>\n<p><a href=\"http://zxinc520.com/lcj/%225cb181596d3d4a5cb52b65c9%22\">webpack 学习可参考我的博客 </a> 和 <a href=\"http://zxinc520.com/lcj/%225cb72a04009ae94788aa0d7f%22\">我的另一篇博客</a> 均有 涉及。</p>\n</blockquote>\n<p>构建工具就是做这件事，将源代码转换成可以执行的 JavaScript、CSS、HTML 代码，包括如下内容：</p>\n<ul>\n<li>代码转换：将 TypeScript 编译成 JavaScript、将 SCSS 编译成 CSS 等。</li>\n<li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</li>\n<li>代码分割：提取多个页面的公共代码，提取首屏不需要执行部分代码让其异步记在。</li>\n<li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要通过构建功能将模块分类合并成一个文件。</li>\n<li>自动刷新：监听本地源代码变化，自动重新构建、刷新浏览器。</li>\n<li>代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li>\n<li>自动发布：更新代码后，自动构建出线上发布代码并传输给发布系统。</li>\n</ul>\n<p>构建其实是工程化、自动化思想在前端开发中的体现，将一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。构建为前端开发注入了更大的活力，解放了我们的生产力。</p>\n<p>历史上先后出现了一系列构建工具，他们各有优缺点。由于前端工程师很熟悉 JavaScript，Node.js 又可以胜任所有构建需求，所以大多数构建工具都是用 Node.js 开发的。</p>\n<h2 id=\"7-5-上线和回滚\"><a class=\"markdownIt-Anchor\" href=\"#7-5-上线和回滚\">#</a> 7-5 上线和回滚</h2>\n<ul>\n<li>不会有具体的问题，交流询问的方式</li>\n</ul>\n<h3 id=\"知识点-3\"><a class=\"markdownIt-Anchor\" href=\"#知识点-3\">#</a> 知识点</h3>\n<ul>\n<li>上线和回滚的基本流程</li>\n<li>linux 基本命令</li>\n</ul>\n<h4 id=\"上线和回滚的基本流程\"><a class=\"markdownIt-Anchor\" href=\"#上线和回滚的基本流程\">#</a> 上线和回滚的基本流程</h4>\n<ul>\n<li>\n<p>是非常重要的开发环节</p>\n</li>\n<li>\n<p>各个公司的具体流程不同</p>\n</li>\n<li>\n<p>由专门的工具后者系统完成，我们无需关心细节</p>\n</li>\n<li>\n<p>如果你没有参与过，面试时也要说出要点</p>\n</li>\n<li>\n<p>只讲要点，具体实现无法讲解</p>\n</li>\n</ul>\n<h3 id=\"上线流程要点\"><a class=\"markdownIt-Anchor\" href=\"#上线流程要点\">#</a> 上线流程要点</h3>\n<ul>\n<li>将测试完成的代码提交到 git 版本库的 master 分支</li>\n<li>将当前服务器的代码全部打包并记录版本号，备份</li>\n<li>将 master 分支的代码提交覆盖到线上服务器，生成新版本号</li>\n</ul>\n<h3 id=\"回滚的流程要点\"><a class=\"markdownIt-Anchor\" href=\"#回滚的流程要点\">#</a> 回滚的流程要点</h3>\n<ul>\n<li>将当前服务器的代码打包并记录版本号，备份</li>\n<li>将备份的上一个版本号解压，覆盖到线上服务器，并生成新的版本号</li>\n</ul>\n<h3 id=\"linux-基本命令\"><a class=\"markdownIt-Anchor\" href=\"#linux-基本命令\">#</a> linux 基本命令</h3>\n<ul>\n<li>服务器使用 linux 居多，server 版，只有命令行</li>\n<li>测试环境要匹配线上环境，因此也是 linux</li>\n<li>经常需要登录测试机来自己配置，获取数据</li>\n</ul>\n",
            "tags": [
                "IDE",
                "Git",
                "模块化",
                "构建工具",
                "上线和回滚"
            ]
        },
        {
            "id": "http://example.com/2019/07/12/gitLearning/",
            "url": "http://example.com/2019/07/12/gitLearning/",
            "title": "Git 学习",
            "date_published": "2019-07-12T09:59:30.000Z",
            "content_html": "<h1 id=\"git-学习\"><a class=\"markdownIt-Anchor\" href=\"#git-学习\">#</a> Git 学习</h1>\n<blockquote>\n<p><strong>Git 学习</strong></p>\n<p>Git 的优势</p>\n<p>Git 与 SVN 的主要区别</p>\n<p>安装 Git</p>\n<p>初始化 Git 仓储 /（仓库）</p>\n<p>配置使用者的用户名和邮箱</p>\n<p>把代码 存储到仓库中</p>\n<p>Git 查看日志</p>\n<p>Git 版本回退</p>\n<p>Git 分支的新建与合并</p>\n<p>上传至 github</p>\n<p>通过 ssh 方式 上传 代码</p>\n<p>push 和 pull 简写</p>\n</blockquote>\n<h3 id=\"什么是-git\"><a class=\"markdownIt-Anchor\" href=\"#什么是-git\">#</a> 什么是 Git？</h3>\n<blockquote>\n<p>git – fast 版本控制</p>\n<p>Git 是由 “Linux 之父” <strong>Linus Torvalds</strong> 创建的。因为他发现找不到满意的方案来管理 Linux Kernel 联合开发的版本控制，就自己写了 Git。</p>\n<p><a href=\"https://git-scm.com/\">官方网站</a></p>\n</blockquote>\n<ul>\n<li>Git 是一个<a href=\"https://git-scm.com/about/free-and-open-source\">免费的开源</a> 分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有事务</li>\n<li>Git <a href=\"https://git-scm.com/doc\">易于学习</a>， <a href=\"https://git-scm.com/about/small-and-fast\">占地面积小，具有闪电般快速的性能</a>。它超越了 Subversion，CVS，Perforce 和 ClearCase 等 SCM 工具，具有<a href=\"https://git-scm.com/about/branching-and-merging\">廉价本地分支</a>，便捷的<a href=\"https://git-scm.com/about/staging-area\">临时区域</a>和 <a href=\"https://git-scm.com/about/distributed\">多个工作流程等功能</a>。</li>\n</ul>\n<h3 id=\"git-的优势\"><a class=\"markdownIt-Anchor\" href=\"#git-的优势\">#</a> Git 的优势</h3>\n<p>说到优势，那么自然是相对与 SVN 而言的</p>\n<ol>\n<li>\n<p>** 版本库本地化，支持离线提交，相对独立不影响协同开发。** 每个开发者都拥有自己的版本控制库，在自己的版本库上可以任意的执行提交代码、创建分支等行为。例如，开发者认为自己提交的代码有问题？没关系，因为版本库是自己的，回滚历史、反复提交、归并分支并不会影响到其他开发者。</p>\n</li>\n<li>\n<p>** 更少的 “仓库污染”。**git 对于每个工程只会产生一个.git 目录，这个工程所有的版本控制信息都在这个目录中，不会像 SVN 那样在每个目录下都产生.svn 目录。</p>\n</li>\n<li>\n<p>** 把内容按元数据方式存储，完整克隆版本库。** 所有版本信息位于.git 目录中，它是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签、分支、版本记录等。</p>\n</li>\n<li>\n<p>** 支持快速切换分支方便合并，比较合并性能好。** 在同一目录下即可切换不同的分支，方便合并，且合并文件速度比 SVN 快。</p>\n</li>\n<li>\n<p>** 分布式版本库，无单点故障，内容完整性好。** 内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</p>\n</li>\n</ol>\n<h3 id=\"git-与-svn-的主要区别\"><a class=\"markdownIt-Anchor\" href=\"#git-与-svn-的主要区别\">#</a> Git 与 SVN 的主要区别</h3>\n<p>Git 是<strong>分布式</strong> SCM，而 SVN 是基于<strong>服务器</strong>的，也就是说每个开发者本地都有一套 git 库，每个人维护自己的版本（或者合并其他人的版本），而 SVN 是每个人写完代码后都及时的 checkin 到服务器上，进行合并。</p>\n<h3 id=\"安装-git\"><a class=\"markdownIt-Anchor\" href=\"#安装-git\">#</a> 安装 Git</h3>\n<blockquote>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496\">廖雪峰的官方网站 git 安装</a></p>\n</blockquote>\n<p>鼠标 <strong>右键</strong>，选中  <code>Git Bash Here</code>  在里面输入相关命令：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/litoDVMJqNVb.png?imageslim\" alt=\"mark\"></p>\n<h2 id=\"使用-git\"><a class=\"markdownIt-Anchor\" href=\"#使用-git\">#</a> 使用 Git</h2>\n<h3 id=\"初始化-git-仓储仓库\"><a class=\"markdownIt-Anchor\" href=\"#初始化-git-仓储仓库\">#</a> 初始化 Git 仓储 /（仓库）</h3>\n<ol>\n<li><strong>新建</strong>一个文件夹</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/9NbV1d2Bf3H2.png?imageslim\" alt=\"mark\"></p>\n<ol start=\"2\">\n<li><strong>进入</strong>文件夹，鼠标<strong>右键</strong> 选中  <code>Git Bash Here</code> ，输入命令  <code>git init</code>  回车。</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/PApIqKpihnsJ.gif\" alt=\"mark\"></p>\n<h3 id=\"配置使用者的用户名和邮箱\"><a class=\"markdownIt-Anchor\" href=\"#配置使用者的用户名和邮箱\">#</a> 配置使用者的用户名和邮箱</h3>\n<blockquote>\n<p>配置使用者的用户名和邮箱 （自报家门）, 每一次备份都会把当前备份者的信息存储起来。</p>\n<p><strong>配置用户名</strong> ：  <code>git config --global user.name &quot;zhouchen&quot;</code></p>\n<p><strong>配置邮箱</strong>：  <code>git config --global user.email &quot;1583741285@qq.com&quot;</code></p>\n</blockquote>\n<ol>\n<li>\n<p>配置使用者的<strong>用户名</strong>：<strong>进入</strong>文件夹，鼠标<strong>右键</strong> 选中  <code>Git Bash Here</code> ，</p>\n<p>输入命令  <code>git config --global user.name &quot;zhouchen&quot;</code>  回车 。</p>\n</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/FUG7gTH6S2Mh.png?imageslim\" alt=\"mark\"></p>\n<ol start=\"2\">\n<li>\n<p>同样的配置使用者的 <strong>邮箱</strong>：<strong>进入</strong>文件夹，鼠标<strong>右键</strong> 选中  <code>Git Bash Here</code> ，</p>\n<p>输入命令  <code>git config --global user.email &quot;1583741285@qq.com&quot;</code>  回车 。</p>\n</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/p62Mz0UPYcY9.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"把代码-存储到仓库中\"><a class=\"markdownIt-Anchor\" href=\"#把代码-存储到仓库中\">#</a> 把代码 存储到仓库中</h3>\n<blockquote>\n<p>把代码 存储到仓库中</p>\n</blockquote>\n<p><strong>需求</strong>：将 <a href=\"http://readme.md\">readme.md</a> 文件 存储到仓库中</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/KwUDn18LHU1f.png?imageslim\" alt=\"mark\"></p>\n<ol>\n<li>\n<p><strong>进入</strong>文件夹，鼠标<strong>右键</strong> 选中  <code>Git Bash Here</code> ，</p>\n<p>输入命令  <code>git add ./readme.md</code>  回车 。</p>\n</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/P1DnSzDuSOBO.png?imageslim\" alt=\"mark\"></p>\n<ol start=\"2\">\n<li>紧接上一步，输入命令  <code>git commit -m &quot;add Introductions&quot;</code>  回车 。</li>\n</ol>\n<p><u>add Introductions</u>----- 可以自定义，一个辅助的解释 <strong>说明</strong>。</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/FqHM4n7stzsF.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"查看提交状态\"><a class=\"markdownIt-Anchor\" href=\"#查看提交状态\">#</a> 查看提交状态</h4>\n<p>命令： <code>git status</code></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/85IXkLM5Wusf.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"add-补充-添加到大门口\"><a class=\"markdownIt-Anchor\" href=\"#add-补充-添加到大门口\">#</a> add 补充 – 添加到大门口</h4>\n<p>命令 ： <code>git add .</code></p>\n<h4 id=\"一次性-放入仓库\"><a class=\"markdownIt-Anchor\" href=\"#一次性-放入仓库\">#</a> 一次性 – 放入仓库</h4>\n<blockquote>\n<p>合并 add 和 commit 命令</p>\n</blockquote>\n<p>命令： <code>git commit --all -m &quot;这是一次性的操作&quot;</code></p>\n<h3 id=\"git-查看日志\"><a class=\"markdownIt-Anchor\" href=\"#git-查看日志\">#</a> Git 查看日志</h3>\n<blockquote>\n<p>查看日志 ---- 能够查看自己提交的信息</p>\n<p><code>git log</code> ：查看历史提交的日志</p>\n<p><code>git log --oneline</code>  可以看到精简版的日志</p>\n</blockquote>\n<p>命令： <code>git log</code></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/PBubR1jYW0fX.png?imageslim\" alt=\"mark\"></p>\n<p>命令： <code>git log --oneline</code></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/bDLltWMjdSo2.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"git-版本回退\"><a class=\"markdownIt-Anchor\" href=\"#git-版本回退\">#</a> Git 版本回退</h3>\n<blockquote>\n<p>git 版本回退</p>\n<p>场景：如果最后一次提交的代码有误，可以通过 git 版本回退，回到代码无误的那一个状态。</p>\n</blockquote>\n<h4 id=\"根据索引回退\"><a class=\"markdownIt-Anchor\" href=\"#根据索引回退\">#</a> 根据索引回退</h4>\n<ol>\n<li>使用命令  <code>git log --oneline</code>  查看状态</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/3RDzcU0Fo8Vy.png?imageslim\" alt=\"mark\"></p>\n<ol start=\"2\">\n<li>命令： <code>git reset --hard Head~0 </code>  ( 向后退 <strong>0</strong> 次)</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/Uobb7X1EwPUd.png?imageslim\" alt=\"mark\"></p>\n<ol start=\"3\">\n<li>命令： <code>git reset --hard Head~1</code>  （向后退 <strong>1</strong> 次）；此时代码回退了<strong>一次</strong> 。</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/3lM4UYpv7mQw.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190711/rwuTTeqbAFNc.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"通过版本号回退\"><a class=\"markdownIt-Anchor\" href=\"#通过版本号回退\">#</a> 通过版本号回退</h4>\n<blockquote>\n<p>通过版本号回退</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/VsLjP0uf8h8D.png?imageslim\" alt=\"mark\"></p>\n<p>命令： <code>git reset --hard ac97cbc </code>  回车执行</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/puqQzAUO57un.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/4b2kofXa5m3B.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"git-reflog\"><a class=\"markdownIt-Anchor\" href=\"#git-reflog\">#</a> git reflog</h4>\n<blockquote>\n<p>可以看到每一次切换版本记录</p>\n</blockquote>\n<p>命令： <code>git reflog</code>  查看总体记录</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/rIsddoYu54q2.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"git-分支的新建与合并\"><a class=\"markdownIt-Anchor\" href=\"#git-分支的新建与合并\">#</a> Git 分支的新建与合并</h3>\n<blockquote>\n<p>git 创建分支</p>\n<p>运用场景：放开发者只开发完成部分代码，想保存代码，为了能够后续继续开发，可以创建分支。</p>\n</blockquote>\n<p><strong>现在让我们来看一个简单的分支与合并的例子，实际工作中大体也会用到这样的工作流程：</strong></p>\n<ol>\n<li>开发某个网站。</li>\n<li>为实现某个新的需求，创建一个分支。</li>\n<li>在这个分支上开展工作。</li>\n</ol>\n<p><strong>假设此时，你突然接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：</strong></p>\n<ol>\n<li>返回到原先已经发布到生产服务器上的分支。</li>\n<li>为这次紧急修补建立一个新分支，并在其中修复问题。</li>\n<li>通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。</li>\n<li>切换到之前实现新需求的分支，继续工作。</li>\n</ol>\n<h3 id=\"git-分支的新建\"><a class=\"markdownIt-Anchor\" href=\"#git-分支的新建\">#</a> Git 分支的新建</h3>\n<p><strong>新建分支</strong> ：命令： <code>git branch &lt;name&gt;</code></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/vCIxtjnYlgsu.png?imageslim\" alt=\"mark\"></p>\n<p><strong>查看分支信息</strong> ：命令： <code>git branch</code>  （ <strong>绿色</strong> --&gt; 代表正处于此分支）</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/R3t4POgEphiO.png?imageslim\" alt=\"mark\"></p>\n<p><strong>切换分支</strong> ：命令  <code>git checkout dev</code></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/MQQVVoNGu41k.png?imageslim\" alt=\"mark\"></p>\n<h4 id=\"在分支中提交部分代码\"><a class=\"markdownIt-Anchor\" href=\"#在分支中提交部分代码\">#</a> 在分支中提交部分代码</h4>\n<blockquote>\n<p>类似于主分支 提交（一样）</p>\n</blockquote>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/gBcACkrl5Gxf.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"git-合并分支\"><a class=\"markdownIt-Anchor\" href=\"#git-合并分支\">#</a> Git 合并分支</h3>\n<blockquote>\n<p>合并分支</p>\n<p><strong>需求</strong>：将 dev 分支 合并到主分支（master 分支）上。</p>\n</blockquote>\n<ol>\n<li>切换到 <strong>master</strong> 分支：命令： <code>git checkout master</code></li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/bKIzXXwv3Xnm.png?imageslim\" alt=\"mark\"></p>\n<ol start=\"2\">\n<li>合并 dev 分支 到 master 分支上：命令： <code>git merge dev</code></li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/uMQR0k4u6qTT.png?imageslim\" alt=\"mark\"></p>\n<ol start=\"3\">\n<li>查看自己的提交记录 命令： <code>git log --oneline</code></li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/gu7FKi6tGBkf.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"上传至-github\"><a class=\"markdownIt-Anchor\" href=\"#上传至-github\">#</a> 上传至 github</h3>\n<blockquote>\n<p><code>git push [地址] master</code></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/900937935629664\">参考廖雪峰的官方网站 github 篇</a></p>\n<p>【地址】：例如：<a href=\"https://github.com/ZhChen7/Travel.git\">https://github.com/ZhChen7/Travel.git</a></p>\n</blockquote>\n<p><strong>git push</strong> 推项目到 github： <code>git push [地址] master</code></p>\n<h4 id=\"从-github-拉下项目\"><a class=\"markdownIt-Anchor\" href=\"#从-github-拉下项目\">#</a> 从 github 拉下项目</h4>\n<blockquote>\n<p>github 拉下项目</p>\n<p>【地址】：例如：<a href=\"https://github.com/ZhChen7/Travel.git\">https://github.com/ZhChen7/Travel.git</a></p>\n</blockquote>\n<p><strong>git pull</strong> 从 github 拉下项目 ： <code>git pull [地址] master</code></p>\n<p><strong>git clone</strong> 从 github 复制项目（往往在第一次使用）： <code>git clone [地址]</code></p>\n<h3 id=\"通过-ssh-方式-上传-代码\"><a class=\"markdownIt-Anchor\" href=\"#通过-ssh-方式-上传-代码\">#</a> 通过 ssh 方式 上传 代码</h3>\n<blockquote>\n<p>公钥 和 私钥 ；两者之间是有关联的。</p>\n</blockquote>\n<ol>\n<li>\n<p>生成 <strong>公钥</strong> 和 <strong>私钥</strong></p>\n<p>命令： <code>ssh-keygen -t rsa -C &lt;邮箱&gt;</code></p>\n</li>\n</ol>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/2GKvEKipn11B.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/9qHzNoUvBgy2.png?imageslim\" alt=\"mark\"></p>\n<p><strong>找到生成的文件</strong> ：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/DPxGphRT9AXv.png?imageslim\" alt=\"mark\"></p>\n<p><strong>给自己的 github 配置 ssh</strong> ：</p>\n<p><img src=\"http://static.zxinc520.com/blog/20190712/eK9KUtgXVIrN.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"提交冲突\"><a class=\"markdownIt-Anchor\" href=\"#提交冲突\">#</a> 提交冲突</h3>\n<blockquote>\n<p>先 <strong>pull</strong> 还是 先 <strong>push</strong></p>\n<p>应用场景：多人共同提交时，产生提交冲突时。</p>\n</blockquote>\n<p><strong>解决方案</strong>：<strong>先 pull</strong> 然后 <strong>后 push</strong></p>\n<h3 id=\"push-和-pull-简写\"><a class=\"markdownIt-Anchor\" href=\"#push-和-pull-简写\">#</a> push 和 pull 简写</h3>\n<blockquote>\n<p>push 和 pull 简写</p>\n<p>【地址简写】： <code>git remote add &lt;变量名&gt; &lt;远程地址&gt;</code></p>\n</blockquote>\n<p><strong>配置远程地址</strong>（设置别名）：方便每一次不用输入很长的地址</p>\n<p>命令： <code>git remote add origin git@github.com:ZhChen7/Travel.git</code></p>\n<p>即：为  <code>git@github.com:ZhChen7/Travel.git</code>  设置别名： **origin **</p>\n<h4 id=\"默认关联\"><a class=\"markdownIt-Anchor\" href=\"#默认关联\">#</a> 默认关联</h4>\n<blockquote>\n<p>当我们在 push 时，加上 <strong>-u 参数</strong> ，那么在<strong>下次 push 时</strong>；只用 写  <code>git push</code>  即可上传代码。</p>\n<p>（加上 <strong>-u</strong> 之后，git 会把当前分支 与 远程指定的分支 进行<strong>关联</strong>）</p>\n</blockquote>\n<p>下次 直接写  <code>git push</code>  相当于 写  <code>git push origin master</code>  。</p>\n",
            "tags": [
                "Git"
            ]
        }
    ]
}