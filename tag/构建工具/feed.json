{
    "version": "https://jsonfeed.org/version/1",
    "title": "sunflower • All posts by \"构建工具\" tag",
    "description": "周琛的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/07/19/DevelopmentEnvironment/",
            "url": "http://example.com/2019/07/19/DevelopmentEnvironment/",
            "title": "开发环境",
            "date_published": "2019-07-19T09:57:31.000Z",
            "content_html": "<h1 id=\"开发环境\"><a class=\"markdownIt-Anchor\" href=\"#开发环境\">#</a> 开发环境</h1>\n<blockquote>\n<p>讲解在面试过程中，面试官可能会问及的前端开发环境的问题，例如 <strong>IDE</strong> ，<strong>Git</strong> ，<strong>模块化</strong> ，<strong>打包工具</strong> ，<strong>上线流程</strong> ，这些类别的题目。</p>\n<p>知识点：</p>\n<p>7-1 IDE</p>\n<p>7-2 Git</p>\n<p>7-3 模块化</p>\n<p>7-4 构建工具</p>\n<p>7-5 上线和回滚</p>\n</blockquote>\n<h3 id=\"关于开发环境\"><a class=\"markdownIt-Anchor\" href=\"#关于开发环境\">#</a> 关于开发环境</h3>\n<ul>\n<li>面试官想通过开发环境了解面试者的经验</li>\n<li>开发环境，最能体现工作产出的效率</li>\n<li>会以聊天的形式为主，而不是出具体的问题</li>\n</ul>\n<h2 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h2>\n<blockquote>\n<p><strong>IDE</strong> ，<strong>Git</strong> ，<strong>JS 模块化</strong> ，<strong>打包工具</strong> ，<strong>上线流程</strong> ，</p>\n</blockquote>\n<ul>\n<li>IDE （ 写代码的效率 ）</li>\n<li>git （ 代码版本管理 ，多人协作开发 ）</li>\n<li>JS 模块化</li>\n<li>打包工具</li>\n<li>上线回滚的流程</li>\n</ul>\n<h2 id=\"7-1-ide\"><a class=\"markdownIt-Anchor\" href=\"#7-1-ide\">#</a> 7-1 IDE</h2>\n<ul>\n<li>webstorm （ 我平常基本用的就是 <strong>webstorm</strong> ）</li>\n<li>sublime</li>\n<li>vscode</li>\n<li>atom</li>\n<li>插件 插件 插件 ！！！</li>\n</ul>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/MxVs8IUJKDhO.png?imageslim\" alt=\"mark\"></p>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/QNC5aBgIVByU.png?imageslim\" alt=\"mark\"></p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>千万不要说你使用 Dreamweaver 或者 notpad ++</li>\n<li>不做 .net 也不要用 Visual Studio</li>\n<li>不做 java 也不要用 eclipse</li>\n</ul>\n<h2 id=\"7-2-git\"><a class=\"markdownIt-Anchor\" href=\"#7-2-git\">#</a> 7-2 Git</h2>\n<blockquote>\n<p>Git 详细介绍：可参考的的博客：<a href=\"http://zxinc520.com/lcj/%225d285a027b8c9f7d8dc4f627%22\">Git 篇</a></p>\n</blockquote>\n<ul>\n<li>正式项目都需要代码版本管理</li>\n<li>大型项目需要多人协作开发</li>\n<li>Git 和 linux 是一个作者</li>\n</ul>\n<h2 id=\"7-3-模块化\"><a class=\"markdownIt-Anchor\" href=\"#7-3-模块化\">#</a> 7-3 模块化</h2>\n<blockquote>\n<p>模块化编程就是通过组合一些<strong>相对独立可复用的模块</strong>来进行功能的实现，其最核心的两部分是<strong>定义模块</strong>和<strong>引入模块</strong>；</p>\n<ul>\n<li>定义模块时，每个模块内部的执行逻辑是不被外部感知的，只是导出（暴露）出部分方法和数据；</li>\n<li>引入模块时，同步 / 异步去加载待引入的代码，执行并获取到其暴露的方法和数据；</li>\n</ul>\n<p><strong>模块化的发展情况</strong> ：无模块化–&gt;CommonJS 规范–&gt;AMD 规范–&gt;CMD 规范–&gt;ES6 模块化</p>\n<p><a href=\"https://juejin.im/post/5b6c222a6fb9a04fde5af4ee\">Javascript 模块化指北</a></p>\n<p><a href=\"https://juejin.im/post/5b4420e7f265da0f4b7a7b27\">这一次，我要弄懂 javascript 的模块化</a></p>\n</blockquote>\n<h3 id=\"知识点-2\"><a class=\"markdownIt-Anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<ul>\n<li>不使用模块化的情况</li>\n<li>使用模块化</li>\n<li>AMD</li>\n<li>CommonJS</li>\n</ul>\n<h4 id=\"无模块化\"><a class=\"markdownIt-Anchor\" href=\"#无模块化\">#</a> 无模块化</h4>\n<p>script 标签引入 js 文件，相互罗列，但是被依赖的放在前面，否则使用就会报错。如下：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"jquery.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n　　<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"jquery_scroller.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n　　<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"main.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n　　<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"other1.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n　　<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"other2.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n　　<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"other3.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>​ 即简单的将所有的 js 文件统统放在一起。但是这些文件的顺序还不能出错，比如 jquery 需要先引入，才能引入 jquery 插件，才能在其他的文件中使用 jquery。缺点很明显：</p>\n<ul>\n<li>污染全局作用域</li>\n<li>维护成本高</li>\n<li>依赖关系不明显</li>\n</ul>\n<h3 id=\"amd-规范\"><a class=\"markdownIt-Anchor\" href=\"#amd-规范\">#</a> AMD 规范</h3>\n<blockquote>\n<p>异步模块定义（<strong>AMD</strong>）API 指定了一种定义模块的机制，以便可以异步加载模块及其依赖项。这特别适用于浏览器环境，其中模块的同步加载会导致性能，可用性，调试和跨域访问问题。</p>\n</blockquote>\n<ul>\n<li>require.js <a href=\"https://requirejs.org/\">https://requirejs.org/</a></li>\n<li>全局 define 函数</li>\n<li>全局 require 函数</li>\n<li>依赖 JS 会自动、异步加载</li>\n</ul>\n<p>AMD 标准中，定义了下面三个 API：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>module<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>depends<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequire<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>即通过 define 来<strong>定义</strong>一个模块，然后使用 require 来<strong>加载</strong>一个模块，使用 require.config () 指定引用路径。</p>\n<h4 id=\"举例说明\"><a class=\"markdownIt-Anchor\" href=\"#举例说明\">#</a> 举例说明：</h4>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script\n  src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\"</span>\n  data<span class=\"token operator\">-</span>main<span class=\"token operator\">=</span><span class=\"token string\">\"./main.js\"</span>\n<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>main.js:</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"./a.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">printDate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>a.js:</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"./a-util.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">aUtil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">printDate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aUtil<span class=\"token punctuation\">.</span><span class=\"token function\">aGetFormatDate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>a-util.js:</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"./util.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">util</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> aUtil <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">aGetFormatDate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">getFormatDate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> aUtil<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>util.js:</em></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> util <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">getFormatDate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"2019-07-19\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"2019年6月20日\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> util<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://static.zxinc520.com/blog/20190719/tVkLYFlEzrtH.png?imageslim\" alt=\"mark\"></p>\n<h3 id=\"commonjs\"><a class=\"markdownIt-Anchor\" href=\"#commonjs\">#</a> CommonJS</h3>\n<blockquote>\n<p>2009 年 ry 发布 Node.js 的第一个版本，CommonJS 作为其中最核心的特性之一，适用于服务端下的场景；历年来的考察和时间的洗礼，以及前端工程化对其的充分支持，CommonJS 被广泛运用于 Node.js 和浏览器；</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// Core Module</span>\n<span class=\"token keyword\">const</span> cp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child_process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Npm Module</span>\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Custom Module</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> axios <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>规范</strong></p>\n<ul>\n<li>module (Object): 模块本身</li>\n<li>exports (*): 模块的导出部分，即暴露出来的内容</li>\n<li>require (Function): 加载模块的函数，获得目标模块的导出值（基础类型为复制，引用类型为浅拷贝），可以加载内置模块、npm 模块和自定义模块。</li>\n</ul>\n<p><strong>nodejs 模块化规范，现在被大量用前端，原因</strong> ：</p>\n<ul>\n<li>前端开发依赖的插件课库，都可以从 npm 中获取</li>\n<li>构建工具的高度自动化，使得使用 npm 的成本非常低</li>\n<li>CommonJS 不会异步加载 JS ，而是同步一次性加载出来</li>\n</ul>\n<h4 id=\"使用-commonjs\"><a class=\"markdownIt-Anchor\" href=\"#使用-commonjs\">#</a> 使用 CommonJS</h4>\n<blockquote>\n<p><strong>module</strong> (Object)、<strong>exports</strong> (*)、<strong>require</strong> (Function)</p>\n</blockquote>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//util.ls</span>\nmodule<span class=\"token punctuation\">.</span>export <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">getFormatDate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"2019-07-19\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"2019年6月20日\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//a-util.js</span>\n<span class=\"token keyword\">var</span> util <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"util.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>export <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">aGetFormatDate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">getFormatDate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"特性总结\"><a class=\"markdownIt-Anchor\" href=\"#特性总结\">#</a> 特性总结</h4>\n<ul>\n<li>同步执行模块声明和引入逻辑，分析一些复杂的依赖引用（如循环依赖）时需注意；</li>\n<li>缓存机制，性能更优，同时限制了内存占用；</li>\n<li>Module 模块可供改造的灵活度高，可以实现一些定制需求（如热更新、任意文件类型模块支持）；</li>\n</ul>\n<h4 id=\"amd-和-commonjs-的使用场景\"><a class=\"markdownIt-Anchor\" href=\"#amd-和-commonjs-的使用场景\">#</a> AMD 和 CommonJS 的使用场景</h4>\n<ul>\n<li>需要异步加载 JS ，使用 AMD</li>\n<li>使用了 npm 之后建议使用 CommonJS</li>\n</ul>\n<h3 id=\"重点总结\"><a class=\"markdownIt-Anchor\" href=\"#重点总结\">#</a> 重点总结</h3>\n<ul>\n<li>AMD</li>\n<li>CommonJS</li>\n<li>两者的区别</li>\n</ul>\n<h2 id=\"7-4-构建工具\"><a class=\"markdownIt-Anchor\" href=\"#7-4-构建工具\">#</a> 7-4 构建工具</h2>\n<blockquote>\n<p>我们一定会感叹前端技术发展之快，各种可以提高开发效率的新思想和框架层出不穷。但是他们都有一个共同特点：源代码无法直接运行，必须通过转换后才能正常运行。</p>\n<p>比如：Grunt 、Gulp、FIS 3、<strong>Webpack</strong> …</p>\n<p><a href=\"https://juejin.im/entry/5ae5c8c9f265da0b9f400d8e\">前端构建工具发展及其比较</a></p>\n<p><a href=\"http://zxinc520.com/lcj/%225cb181596d3d4a5cb52b65c9%22\">webpack 学习可参考我的博客 </a> 和 <a href=\"http://zxinc520.com/lcj/%225cb72a04009ae94788aa0d7f%22\">我的另一篇博客</a> 均有 涉及。</p>\n</blockquote>\n<p>构建工具就是做这件事，将源代码转换成可以执行的 JavaScript、CSS、HTML 代码，包括如下内容：</p>\n<ul>\n<li>代码转换：将 TypeScript 编译成 JavaScript、将 SCSS 编译成 CSS 等。</li>\n<li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</li>\n<li>代码分割：提取多个页面的公共代码，提取首屏不需要执行部分代码让其异步记在。</li>\n<li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要通过构建功能将模块分类合并成一个文件。</li>\n<li>自动刷新：监听本地源代码变化，自动重新构建、刷新浏览器。</li>\n<li>代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li>\n<li>自动发布：更新代码后，自动构建出线上发布代码并传输给发布系统。</li>\n</ul>\n<p>构建其实是工程化、自动化思想在前端开发中的体现，将一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。构建为前端开发注入了更大的活力，解放了我们的生产力。</p>\n<p>历史上先后出现了一系列构建工具，他们各有优缺点。由于前端工程师很熟悉 JavaScript，Node.js 又可以胜任所有构建需求，所以大多数构建工具都是用 Node.js 开发的。</p>\n<h2 id=\"7-5-上线和回滚\"><a class=\"markdownIt-Anchor\" href=\"#7-5-上线和回滚\">#</a> 7-5 上线和回滚</h2>\n<ul>\n<li>不会有具体的问题，交流询问的方式</li>\n</ul>\n<h3 id=\"知识点-3\"><a class=\"markdownIt-Anchor\" href=\"#知识点-3\">#</a> 知识点</h3>\n<ul>\n<li>上线和回滚的基本流程</li>\n<li>linux 基本命令</li>\n</ul>\n<h4 id=\"上线和回滚的基本流程\"><a class=\"markdownIt-Anchor\" href=\"#上线和回滚的基本流程\">#</a> 上线和回滚的基本流程</h4>\n<ul>\n<li>\n<p>是非常重要的开发环节</p>\n</li>\n<li>\n<p>各个公司的具体流程不同</p>\n</li>\n<li>\n<p>由专门的工具后者系统完成，我们无需关心细节</p>\n</li>\n<li>\n<p>如果你没有参与过，面试时也要说出要点</p>\n</li>\n<li>\n<p>只讲要点，具体实现无法讲解</p>\n</li>\n</ul>\n<h3 id=\"上线流程要点\"><a class=\"markdownIt-Anchor\" href=\"#上线流程要点\">#</a> 上线流程要点</h3>\n<ul>\n<li>将测试完成的代码提交到 git 版本库的 master 分支</li>\n<li>将当前服务器的代码全部打包并记录版本号，备份</li>\n<li>将 master 分支的代码提交覆盖到线上服务器，生成新版本号</li>\n</ul>\n<h3 id=\"回滚的流程要点\"><a class=\"markdownIt-Anchor\" href=\"#回滚的流程要点\">#</a> 回滚的流程要点</h3>\n<ul>\n<li>将当前服务器的代码打包并记录版本号，备份</li>\n<li>将备份的上一个版本号解压，覆盖到线上服务器，并生成新的版本号</li>\n</ul>\n<h3 id=\"linux-基本命令\"><a class=\"markdownIt-Anchor\" href=\"#linux-基本命令\">#</a> linux 基本命令</h3>\n<ul>\n<li>服务器使用 linux 居多，server 版，只有命令行</li>\n<li>测试环境要匹配线上环境，因此也是 linux</li>\n<li>经常需要登录测试机来自己配置，获取数据</li>\n</ul>\n",
            "tags": [
                "IDE",
                "Git",
                "模块化",
                "构建工具",
                "上线和回滚"
            ]
        }
    ]
}